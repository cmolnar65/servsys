package com.pandmservices.web;
import com.pandmservices.*;
import com.pandmservices.core.*;
import com.pandmservices.support.*;
import com.pandmservices.dbserver.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.net.*;
import java.io.*;
import java.util.*;
import java.util.Vector;
import java.text.*;
import java.lang.*;
import java.lang.Integer;
import java.lang.Math.*;
import java.lang.String;
import java.lang.Float;
import java.lang.Double;
import java.math.*;
import java.util.Date;
import java.sql.*;
import javax.mail.*;
import javax.mail.internet.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.disk.*;
import org.apache.commons.fileupload.servlet.*;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.io.PrintWriter;
import javax.servlet.ServletInputStream;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUpload;
import org.apache.commons.fileupload.MultipartStream;
import org.apache.commons.io.*;
//import org.apache.commons.beanutils.*;
//import org.apache.commons.beanutils.MethodUtils;
import java.io.FileOutputStream;
import java.io.IOException;

public class UniCash extends HttpServlet
{
	ServletConfig config = null;
	static Connection con = null;
	Connection condb = null;
	Connection conu = null;
	String glogin = null;
	int sall=0;
	static String apphome=null;
	String pass = null;
	String classdir=null;
	String grealname = null;
	String gidcode = null;
	static String Gwebhome = null;
	String phpdir=null;
	String menu = null;
	String headerimage=null;
        static String emailsendaddress=null;
	static String adminok = "0";
        static String emailserver=null;
	static String techemailaddress=null;
	static String TRUE =  "TRUE";
	public static long MS_SECOND = 1000L; 
	public static long MS_MINUTE = 60L * MS_SECOND; 
	public static long MS_HOUR = 60L * MS_MINUTE; 
	public static long DAY = 24L;

	public void init(ServletConfig config)
		throws ServletException
	{
		super.init(config);
		this.config = config;

	try
		{
			Gwebhome = (String) config.getInitParameter("web.home");
			String driver = (String) config.getInitParameter("db.driver");
			apphome = (String) config.getInitParameter("web.apphome");
			classdir = (String) config.getInitParameter("web.classdir");
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			String server = (String) config.getInitParameter("db.server");
			String database = (String) config.getInitParameter("db.database");
			String user = (String) config.getInitParameter("db.username");
			pass = (String) config.getInitParameter("db.password");
			phpdir = (String) config.getInitParameter("web.phpdir");
			Class.forName(driver);
	//		con = DriverManager.getConnection(protocol+":"+subProtocol+"://"+server+"/"+database, user, pass);
			//////String username = req.getRemoteUser();

		}
		catch (Exception e)
		{
			throw new ServletException(e.getMessage());
		}
	};// init


	public void doGet(HttpServletRequest req, HttpServletResponse res)
		throws ServletException
	{
		try
		{
			HttpSession session=req.getSession(true);
			log("This is the start of the servlet");
			String driver = (String) config.getInitParameter("db.driver");
			String Gwebhome = (String) config.getInitParameter("web.home");
			apphome = (String) config.getInitParameter("web.apphome");
			classdir = (String) config.getInitParameter("web.classdir");
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			String server = (String) config.getInitParameter("db.server");
			String database = (String) config.getInitParameter("db.database");
			String user = (String) config.getInitParameter("db.username");
			pass = (String) config.getInitParameter("db.password");
			phpdir = (String) config.getInitParameter("web.phpdir");
			Class.forName(driver);
			con = DriverManager.getConnection(protocol+":"+subProtocol+"://"+server+"/"+database+"?autoReconnect=true", user, pass);
			String action = req.getParameter("action");
			PrintWriter out= res.getWriter();
			String username=null;
			username=(String)session.getAttribute("login");
			log("just got session information in doGet. User: "+username+"");
			if (action.equalsIgnoreCase("checklogin")) {
				doCheckUserLogin(req, res, out, session, username);	
			} else if (action.equalsIgnoreCase("customerrequest")) {
				doCustomerRequest(req, res, out, session, username);
			} else if (action.equalsIgnoreCase("checkcustomer")) {
				doCheckCustomer(req, res, out, session, username);
			} else if (action.equalsIgnoreCase("custaddform")) {
				doCustAddForm(req, res, out, session, username);
			} else if (action.equalsIgnoreCase("savecustaddform")) {
				doSaveCustAddForm(req, res, out, session, username);
			} else if (action.equalsIgnoreCase("addservicerequest")) {
				doAddServiceRequest(req, res, out, session, username);
			} else if (action.equalsIgnoreCase("savecustcallslip")) {
				doSaveCustCallslip(req, res, out, session, username);
			} else{
			if (username==null) {
			
			doLoginUser(req, res, out, session, username);	
			
				} else {
			gidcode=(String)session.getAttribute("idcode");
			log("Session idcode= "+gidcode+"");
			res.setContentType("text/html");
			log("Action: "+action+"");
			if (action == null) {
			session.setAttribute("action","loginuser");
					}
		
			doMenuChoices(req, res, out, session, username);	
			}
		}
			log("finishing DoGet");
			out.println("</http>");
			out.close();	
		}
		catch (Exception e)
		{
			throw new ServletException(e.getMessage());
		}
	}// doGet


	public void doPost(HttpServletRequest req, HttpServletResponse res)
		throws ServletException
	{
		doGet(req, res);
	}// doPost

private void doOpenConnection()
		throws ServletException
	{
			try {
			String driver = (String) config.getInitParameter("db.driver");
			apphome = (String) config.getInitParameter("web.apphome");
			classdir = (String) config.getInitParameter("web.classdir");
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			String server = (String) config.getInitParameter("db.server");
			String database = (String) config.getInitParameter("db.database");
			Class.forName(driver);
			String user = (String) config.getInitParameter("db.username");
			pass = (String) config.getInitParameter("db.password");
			phpdir = (String) config.getInitParameter("web.phpdir");
		con = DriverManager.getConnection(protocol+":"+subProtocol+"://"+server+"/"+database+"?autoReconnect=true", user, pass);
		}
		catch (Exception e)
		{
			throw new ServletException(e.getMessage());
		}
	}


  private void doTop(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	doOpenConnection();
	//username=(String)session.getAttribute("login");
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Service System</title>");
	out.println("</head>");
	out.println("<frameset cols=\"210,*\" rows=\"*\" border=\"1\" frameborder=\"0\">");

	out.println("<frame src=\""+classdir+"UniCash?action=menu&menu=main\" name=\"nav\">");
	out.println("<frame src=\""+classdir+"UniCash?action=showhomepage\" name=\"phpmain\">");


	out.println("</frameset>");
	out.println("<noframes>");
	out.println("<body bgcolor=\"#FFFFFF\">");

	out.println("</body>");
	out.println("</noframes>");
	out.println("</html>");
	}

  private void doSelectInvItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select KeyCode</title>");
	out.println("</head>");
	String scatnum = req.getParameter("catnum");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=editinvitemquant\" name=\"addcat\">");
	out.println("<p>Item Key Code :");
	out.println("<input type=\"text\" name=\"keycode\" value=\"-\">");
	out.println("</p>");
	out.println("<input type=\"hidden\" name=\"catnum\" value="+scatnum+">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	}


  private void doEditInvQuant(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String keycode = req.getParameter("keycode");
		String scatnum = req.getParameter("catnum");
		//int sitemid=Integer.parseInt(ttsid);
		Format formatter;	
		Calendar now = Calendar.getInstance();
        	Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);


			String minquantity=null;
			String itemname=null;
			int catnum=0;
			int itemnum=0;
			String quant=null;

                Vector v;
                v = UniInvAll.getAllItems(con,keycode);

		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniInvAll t = (UniInvAll) v.elementAt(i);
			itemnum  = t.getItemNum();
			catnum  = t.getCatNum();
                        itemname = t.getItemName();
			keycode = t.getKeyCode();
			minquantity = t.getMinQuantity();
			quant = t.getActualQuant();
		}

		if (quant==null) {
				quant="0";
		}

out.println("<html>");
out.println("<head>");
out.println("<title>Inventory Item Edit</title>");
out.println("</head>");
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateinvquant \" name=\"addtime\">");
out.println("<table width=\"80%\"><tr><td>Item Name</td><td>"+itemname+"</td></tr>");
out.println("<input type=\"hidden\" name=\"itemname\" value=\""+ itemname +"\">");
out.println("<tr><td>Key Code</td><td>"+keycode+"</td></tr>");
out.println("<input type=\"hidden\" name=\"keycode\" value=\""+keycode  +"\"  > ");
out.println("<tr><td>System Quantity</td><td>"+quant+"</td></tr>");
out.println("<input type=\"hidden\" name=\"sysquant\" value=\""+quant +"\">");
out.println("<input type=\"hidden\" name=\"catnum\" value=\""+catnum  +"\">");
out.println("<tr><td>Correct Quant</td><td>");
out.println("<input type=\"text\" name=\"newquant\" value=\""+quant+"\"></td></tr>");
out.println("</table>");
out.println("<input type=\"hidden\" name=\"catnum\" value="+scatnum+">");
out.println("<input type=\"hidden\" name=\"itemnum\" value="+itemnum+">");
out.println("<input type=\"hidden\" name=\"transid\" value="+s+">");
out.println("<CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
	}

	public void doMenuChoices(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
	{


			String action = req.getParameter("action");
			String menu="";
			if (action == null) {
                                doMenu(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("logoutuser"))
	                        {
				doLogoutUser(req, res, out, session, username);	
	                        }
			else if (action.equalsIgnoreCase("loginuser"))
	                        {
				doLoginUser(req, res, out, session, username);	
	                        }
			else if (action.equalsIgnoreCase("menu"))
	                        {
                                doMenu(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("domenuexpired"))
	                        {
                                doExpired(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("editcustomer"))
	                        {
                                doEditCustomer(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("saveheatload"))
	                        {
                                doSaveHeatLoad(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("updaterateconfig"))
	                        {
                                doSaveRateConfig(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("updateheatload"))
	                        {
                                doSaveHeatLoad(req, res, out, session, username);
	                        }
				else if (action.equalsIgnoreCase("savepackagecompareform"))
	                        {
                                doSavePackageCompare(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("updatepackagecompareform"))
	                        {
                                doSavePackageCompare(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("deleteheatload"))
	                        {
                                doDelHeatLoad(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("delpackcomprec"))
	                        {
                                doDelPackageCompare(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addpackcompare"))
	                        {
                                doAddPackCompare(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addheatload"))
	                        {
                                doAddHeatLoad(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("printheatload"))
	                        {
                                doPrintHeatLoad(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("editheatload"))
	                        {
                                doAddHeatLoad(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("editpackcompare"))
	                        {
                                doAddPackCompare(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addsurvey"))
	                        {
                                doAddSurvey(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("savesurvey"))
	                        {
                                doSaveSurvey(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("updatesurvey"))
	                        {
                                doSaveSurvey(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("editsurvey"))
	                        {
                                doAddSurvey(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("upprintorder"))
	                        {
                                doOptionUp(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("downprintorder"))
	                        {
                                doOptionDown(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("deloption"))
	                        {
                                doDeleteQuoteOption(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("delinspection"))
	                        {
                                doDeleteInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("delcallslip"))
	                        {
                                doDeleteCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("zerotruckstock"))
	                        {
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doZeroTruckStock(req, res, out, session, username);
					} else
					{
                                doLoginAdminUser(req, res, out, session, action, username);
					}
				}
			else if (action.equalsIgnoreCase("delequip"))
	                        {
                                doDeleteEquip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("editequipment"))
	                        {
                                doEditEquip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("edselectcharge"))
	                        {
                                doEdSelectCharge(req, res, out, session, username);
				}                        
                        else if (action.equalsIgnoreCase("listmwork"))
	                        {
                                doListMWorkSheet(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("listflatrate"))
	                        {
                                doListFlatRate(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("exportflatrate"))
	                        {
                                doListFlatRate(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatepsprices"))
	                        {
                                doUpdatePsPrices(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateflatrateprices"))
	                        {
                                doUpdateFlatRateTable(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("deleteflatrateprice"))
	                        {
                                doDeleteFlatRate(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("uploadflatrates"))
	                        {
                                doUploadFlatRateTable(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("updaterateserver"))
	                        {
                                doUploadRateServer(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("downloadrateserver"))
	                        {
                                doDownloadRateServer(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateuserinfo"))
	                        {
                                doUpdateUserInfo(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatepackages"))
	                        {
                                doUpdatePackages(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("uploadpackagelist"))
	                        {
                                doUploadPackages(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("uploaddoclist"))
	                        {
                                doUploadDocs(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatedoclist"))
	                        {
                                doUpdateDocs(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatephone_list"))
	                        {
                                doUpdatePhoneList(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatemainworksheet"))
	                        {
                                doUpdateMainWorksheet(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatemasterworksheet"))
	                        {
                                doUpdateMasterWorkSheets(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("copyformtocust"))
	                        {
                                doCopyFormToCust(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("uploadallforms"))
	                        {
                                doUploadForms(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateforms"))
	                        {
                                doUpdateForms(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateexpiredate"))
	                        {
                                doUpdateExpireDate(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateinvkeycodetable"))
	                        {
                                doUpdateInvKeyCodeTable(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateedcharge2"))
	                        {
                                doUpdateSvcCharge2(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("nositenum"))
	                        {
                                doNoCustNum(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("showdoccatlist"))
	                        {
                                doShowDocCatList(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("showdoclist"))
	                        {
                                doShowDocList(req, res, out, session,username);
				}
                        else if (action.equalsIgnoreCase("checktempsplit"))
	                        {
                                doCheckTempSplit(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("flatratereport"))
	                        {
                                doFlatRateReport(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateedcharge"))
	                        {
                                doUpdateSvcCharge(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("savetechinfo"))
	                        {
                                doSaveTechInfo(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatetechinfo"))
	                        {
                                doUpdateTechInfo(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updaterespsform"))
	                        {
                                doUpdateResPsForm(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatecompinfo"))
	                        {
                                doUpdateCompInfo(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatefrconfig"))
	                        {
				String submit= req.getParameter("submit");
                        	if (submit.equalsIgnoreCase("save")) {
                                	doUpdateFrConfig(req, res, out, session, username);
					}
				else if (submit.equalsIgnoreCase("updateserver")) {
					doUploadFlatRateConfig(req,res,out,session,username);
					}
				}
                        else if (action.equalsIgnoreCase("downloadfrconfig"))
	                        {
                                doDownloadFrConfig(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatewsconfig"))
	                        {
                                doUpdateWsConfig(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("saveemailinfo"))
	                        {
                                doSaveEmailInfo(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateemailinfo"))
	                        {
                                doUpdateEmailInfo(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateserverconfig"))
	                        {
                                doUpdateServerConfig(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addcomplcat"))
	                        {
                                doAddComplCat(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("savecomplcat"))
	                        {
                                doSaveComplCat(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("syncdbserver"))
	                        {
                                doSyncDbServer(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatetimecat"))
	                        {
                                doUpdateTimeCat(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("uploadtimecat"))
	                        {
                                doUploadTimeCat(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("downloadtimecat"))
	                        {
                                doDownloadTimeCat(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("downloadcompconfig"))
	                        {
                                doDownloadCompConfig(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("uploadcompconfig"))
	                        {
                                doUploadCompConfig(req, res, out, session, username);
				}
//ADMIN FUNCTION
                        else if (action.equalsIgnoreCase("ecompletioncodes"))
	                        {
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doShowCompletionCatList(req, res, out, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("updateformquestion"))
	                        {
                                doSaveFormQuestion(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("saveformquestion"))
	                        {
                                doSaveFormQuestion(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateform"))
	                        {
                                doSaveForm(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("saveform"))
	                        {
                                doSaveForm(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("editformquestion"))
	                        {
                                doAddFormQuestion(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addformquestion"))
	                        {
                                doAddFormQuestion(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("delcustformrec"))
	                        {
                                doDeleteCustForm(req, res, out, username);
				}
                        else if (action.equalsIgnoreCase("deletecustform"))
	                        {
                                doDeleteCustForm(req, res, out, username);
				}
                        else if (action.equalsIgnoreCase("deleteform"))
	                        {
                                doDeleteForm(req, res, out, username);
				}
                        else if (action.equalsIgnoreCase("delformquestion"))
	                        {
                                doDeleteFormQuestion(req, res, out, username);
				}
                        else if (action.equalsIgnoreCase("editform"))
	                        {
                                doAddForm(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("printcustform"))
	                        {
                                doPrintCustForm(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addform"))
	                        {
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doAddForm(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("configforms"))
	                        {
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doShowForms(req, res, out, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("addcustform"))
	                        {
                                doShowForms(req, res, out, username);
				}
                        else if (action.equalsIgnoreCase("edittimecats"))
	                        {
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doShowTimeCats(req, res, out, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("showsvccomplcatcodes"))
	                        {
                                doShowSvcComplCatCodes(req, res, out, username);
				}
                        else if (action.equalsIgnoreCase("showcomplcatcodes"))
	                        {
                                doShowComplCatCodes(req, res, out, username);
				}
                        else if (action.equalsIgnoreCase("delwsrecy"))
	                        {
                                doDeleteWsRecY(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("delwsrec"))
	                        {
                                doDeleteWsRec(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("delmasterwsrecy"))
	                        {
                                doDeleteMasterWsRecY(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("delwsmasterserv"))
	                        {
                                doDeleteMasterWsRec(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("delservproprec"))
	                        {
                                doDeletePropRec(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("delservproprecy"))
	                        {
                                doDeletePropRecY(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("delproprecy"))
	                        {
                                doDeletePropRecY(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("delproprec"))
	                        {
                                doDeletePropRec(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("deletesvccomplcodec"))
	                        {
                                doDelSvcComplCodec(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("deletesvccomplcode"))
	                        {
                                doDelSvcComplCode(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("editemailtruckcat"))
	                        {
                                doEditEmailTruckCat(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("savesvccomplcode"))
	                        {
                                doSaveSvcComplCode(req, res, out,session, username);
				}
                        else if (action.equalsIgnoreCase("saveaddcomplcode"))
	                        {
                                doSaveComplCode(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addaddcompl"))
	                        {
                                doAddSvcCompl(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatecomplcode"))
	                        {
                                doUpdateComplCode(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("deletecomplcatcode"))
	                        {
                                doDeleteComplCode(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("checkadminuser"))
	                        {
                                doCheckAdminUser(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("editcomplcatcode"))
	                        {
                                doEditComplCode(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addcomplcode"))
	                        {
                                doAddComplCode(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("editserverconfig"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doEditServerConfig(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("editfrconfig"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doEditFlatRateConfig(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("editwsconfig"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doEditWsConfig(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
			//ADMIN FUNCTION
			else if (action.equalsIgnoreCase("editrateconfig"))
			{
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doEditRateConfig(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("editemailinfo"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doEditEmailInfo(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("uploaduser"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
				doUploadUserInfo(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("adduser"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
				doAddTechInfo(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("deluserrec"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
				doDeleteUserRec(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("deluserrecy"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
				doDeleteUserRecY(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("listtechinfo"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
				doListUsers(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("edittechinfo"))
	                        {
	//ADMIN FUNCTION
                                doEditTechInfo(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("edrespsform"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doEditResPsForm(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
	                        else if (action.equalsIgnoreCase("addmanualtime"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doAddAdminTimeEntry(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}		
                        else if (action.equalsIgnoreCase("editcompinfo"))
	                        {
	//ADMIN FUNCTION
				adminok = req.getParameter("adminok");
				if ((adminok=="1")||(adminok!=null)) {
                                doEditCompInfo(req, res, out, session, username);
					} else
					{
				doLoginAdminUser(req, res, out, session, action, username);
					}
				}
                        else if (action.equalsIgnoreCase("airflowstandards"))
	                        {
                                doAirFlowStandards(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updateflatrate"))
	                        {
                                doUpdateFlatRate(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("copyws"))
	                        {
                                doCopyWs(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("copymasterwstocus"))
	                        {
                                doCopyMasterWstoCus(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("copywstocus"))
	                        {
                                doCopyWstoCus(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("copywsmasterserv"))
	                        {
                                doCopyWsMasterServ(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("copywsnewcus"))
	                        {
                                doCopyWsCusSelect(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("copymasterwsnewcus"))
	                        {
                                doCopyMasterWsCusSelect(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("wstoservproposal"))
	                        {
                                doWsToServProposal(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addoptiontoquote"))
	                        {
                                doWsToProposalOpt(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("top"))
	                        {
                                doTop(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addoptionsave"))
	                        {
                                doAddOptionSave(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("wstoproposalopt"))
	                        {
                                doWsToProposalOpt(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addoption"))
	                        {
                                doWsToProposal(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("wstoproposal"))
	                        {
                                doWsToProposal(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("sendworksheets"))
	                        {
                                doSendAllWorksheets(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("sendsingleworksheet"))
	                        {
                                doSendWorksheet(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("printworksheet"))
	                        {
                                doPrintWorksheet(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("wskeycodelookup"))
	                        {
                                doWsKeyCodeLookup(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("updatesheetitem"))
	                        {
                                doUpdateWsItem(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("saveworksheetitem"))
	                        {
                                doSaveWsItem(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addchargemenu"))
	                        {
                                doAddChargeMenu(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("showchargeselect"))
	                        {
                                doListFlatRate(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("showservpchargeselect"))
	                        {
                                doListFlatRate(req, res, out, session, username);
				}
                         else if (action.equalsIgnoreCase("saveflatrate"))
	                        {
                                doSaveFlatRate(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("addflatrate"))
	                        {
                                doAddFlatPrice(req, res, out, session, username);
				}
                       else if (action.equalsIgnoreCase("telnetconnect"))
	                        {
                                doTelnetConnect(req, res, out, session, username);
				}
                       else if (action.equalsIgnoreCase("sendall"))
	                        {
                                doSyncDbServer(req, res, out, session, username);
				doOpenConnection();
                                doUpdateUserInfo(req, res, out, session, username);
				doOpenConnection();
                                doDownloadTimeCat(req, res, out, session, username);
				doOpenConnection();
                                doSendDailyTimeEntry(req, res, out, session,sall, username);
				doOpenConnection();
                                doSendCallSlips(req, res, out, session,sall, username);
				doOpenConnection();
                                doMailCheckme(req, res, out, session, username);
				doOpenConnection();
                                doSendInspections(req, res, out, session,sall, username);
				doOpenConnection();
				doEmStockUsage(req, res, out, session, username);
				doOpenConnection();
				doFollowUpReport(req, res, out, session, username);
				doOpenConnection();
				doSendProposals(req, res, out, session,sall, username);
				doOpenConnection();
                                doSendAllWorksheets(req, res, out, session, username);
				doOpenConnection();
				doSyncCustTable(req,res,out,session,username);
				doOpenConnection();
				doUpdateLocalCustUnlock(req,res,out,session,username);
				}
                       else if (action.equalsIgnoreCase("senddailytime"))
	                        {
                                doSyncDbServer(req, res, out, session, username);
				doOpenConnection();
                                doUpdateUserInfo(req, res, out, session, username);
				doOpenConnection();
                                doDownloadTimeCat(req, res, out, session, username);
				doOpenConnection();
                                doSendDailyTimeEntry(req, res, out, session,sall, username);
				doOpenConnection();
				doEmStockUsage(req, res, out, session, username);
				doOpenConnection();
				doFollowUpReport(req, res, out, session, username);
				doOpenConnection();
				doSyncCustTable(req,res,out,session,username);
				doOpenConnection();
				doUpdateLocalCustUnlock(req,res,out,session,username);
				}
                       else if (action.equalsIgnoreCase("exportsingletime"))
	                        {
                                doExportSingleTimeEntry(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("deletesingletime"))
	                        {
                                doDeleteSingleTimeEntry(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendinspections"))
	                        {
                                doSendInspections(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendsingleinspections"))
	                        {
                                doSendSingleInspections(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendextratime"))
	                        {
                                doExtraTime(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("mailextratime"))
	                        {
                                doMailExtraTime(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendarrive"))
	                        {
                                doArrived(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendcomplete"))
	                        {
                                doSendComplete(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendalmostdone"))
	                        {
                                doAlmostDone(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("exportcallslips"))
	                        {
                                doExportCallSlips(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendcallslips"))
	                        {
                                doSendCallSlips(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendsinglecallslips"))
	                        {
                                doSendSingleCallSlips(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendstockrequest"))
	                        {
                                doEmTruckStockAllCat(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendproposals"))
	                        {
                                doSendProposals(req, res, out, session,sall, username);
				}
                       else if (action.equalsIgnoreCase("sendsingleproposals"))
	                        {
                                doSendSingleProposals(req, res, out, session,sall, username);
				}
                        else if (action.equalsIgnoreCase("selectsenddate"))
	                        {
                                doSelectSendDate(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("printprevagreement"))
	                        {
                                doPrintPrevagreement(req, res, out, session, username);
				}
                        else if (action.equalsIgnoreCase("sendprevagreement"))
	                        {
                                doSendPrevagreement(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("editprevagreement"))
	                        {
                                doEditPrevagreement(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printservproposal"))
	                        {
                                doPrintServProposal(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printcompareform"))
	                        {
                               doPrintPackageCompare(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printcompare"))
	                        {
                               doShowPropCompair(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printproposal"))
	                        {
                                doPrintProposal(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printjobflow"))
	                        {
                                doPrintJobFlow(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("delservproposalitem"))
	                        {
                                doDelProposalItem(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("delproposalitem"))
	                        {
                                doDelProposalItem(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("updateworksheet"))
	                        {
                                doUpdateWorksheet(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("editws"))
	                        {
                                doEditWorksheet(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("showworksheet"))
	                        {
                                doEditMasterWorksheet(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("editservproposal"))
	                        {
                                doEditProposal(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("editproposal"))
	                        {
                                doEditProposal(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("listphonelist"))
	                        {
                                doListPhoneList(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("editcompphonerec"))
	                        {
                                doEditCompPhoneItem(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("updatecompphonerec"))
	                        {
                                doUpdateCompPhoneListRec(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("savecompphonerec"))
	                        {
                                doSaveCompPhoneListRec(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("addcompphonerec"))
	                        {
                                doAddCompPhoneRec(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("phonelisttoserv"))
	                        {
                                doPhoneListToServ(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("delcompphonerec"))
	                        {
                                doDeleteCompPhoneRec(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("addprevagreement"))
	                        {
                                doAddPrev(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("updatecallslip"))
	                        {
                                doUpdateCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("updatecheckme"))
	                        {
                                doUpdateCheckme(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("rcupdatecallslip"))
	                        {
                                doUpdateCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("rupdatecallslip"))
	                        {
                                doUpdateCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("inspectprint"))
	                        {
                                doPrintInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("vinspectprint"))
	                        {
                                doPrintInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printcheckme"))
	                        {
                                doPrintCheckme(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printcallslip"))
	                        {
                                doPrintCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("viewpcallslip"))
	                        {
                                doPrintCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("senddailycheckme"))
	                        {
                                doMailCheckme(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("uploaddailypreventative"))
	                        {
                                doUploadPreventative(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("getservequip"))
	                        {
                                doDownloadEquipment(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("getservcallslip"))
	                        {
                                doDownloadCallSlips(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("getservinspection"))
	                        {
                                doDownloadInspections(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("uploaddailyequipment"))
	                        {
                                doUploadEquipment(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printspaceheater"))
	                        {
                                doPrintSpaceHeater(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printelist"))
	                        {
                                doPrintEquipmentList(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printaccover"))
	                        {
                                doPrintAcCover(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("printiaqdisc"))
	                        {
                                doPrintAirQuality(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("savecallslip"))
	                        {
                                doSaveCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("savecheckme"))
	                        {
                                doSaveCheckme(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("saveinspection"))
	                        {
                                doSaveInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("updateinspection"))
	                        {
                                doUpdateInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("rcupdateinspection"))
	                        {
                                doUpdateInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("rupdateinspection"))
	                        {
                                doUpdateInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("addinspection"))
	                        {
                                doAddInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("addcallslip"))
	                        {
                                doAddCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("addcheckme"))
	                        {
                                doAddCheckme(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("editcallslip"))
	                        {
                                doEditCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("editcheckme"))
	                        {
                                doAddCheckme(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("rceditcallslip"))
	                        {
                                doEditCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("reditcallslip"))
	                        {
                                doEditCallslip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("addinvmenu"))
	                        {
                                doInvMenu(req, res, out, username);
				}
			else if (action.equalsIgnoreCase("addinvrecord"))
	                        {
                                doAddInvRecord(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("showinvitems"))
	                        {
                                doShowInvItems(req, res, out, username);
				}
			else if (action.equalsIgnoreCase("editinspection"))
	                        {
                                doEditInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("rceditinspection"))
	                        {
                                doEditInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("reditinspection"))
	                        {
                                doEditInspection(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("updateprevagreement")) 
	                        {
                                doUpdatePrev(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("updateproposal")) 
	                        {
                                doUpdateProposal(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("updateservproposal")) 
	                        {
                                doUpdateProposal(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("saveprevagreement"))
	                        {
                                doSavePrev(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("calcprice"))
	                        {
                                doCalcPrice(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("finishcalcprice"))
	                        {
                                doFinishCalcPrice(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("addequipment"))
	                        {
                                doAddEquip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("saveworksheet"))
	                        {
                                doSaveWorksheet(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("saveservproposalitem"))
	                        {
                                doSaveProposalItem(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("saveproposalitem"))
	                        {
                                doSaveProposalItem(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("addservquoteitemmenu"))
	                        {
                                doAddQuoteItemMenu(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("addquoteitemmenu"))
	                        {
                                doAddQuoteItemMenu(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("saveequipment"))
	                        {
                                doSaveEquip(req, res, out, session, username);
				}
			else if (action.equalsIgnoreCase("uploadinvcats"))
	                        {
                                doUploadInvCats(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("showcatlist"))
	                        {
                                doShowCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("showquotecatlist"))
	                        {
                                doQuoteCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("pkgcatlist"))
	                        {
                                doWsPackageCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("editpackageitem"))
	                        {
                                doEditPackageItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("updatepackageitem"))
	                        {
                                doUpdatePackageItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("showpackagecatlist"))
	                        {
                                doPackageCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("confightgloadcatlist"))
	                        {
                                doConfigHtgLoadCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("confightgloadmultlist"))
	                        {
                                doConfigHtgLoadMultList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("addhtgloadclass"))
			{
				doAddHtgLoadCatFrm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("addhtgloadmult"))
			{
				doAddHtgLoadMultFrm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savehtgloadcat"))
			{
				doSaveHtgLoadCat(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savehtgloadmult"))
			{
				doSaveHtgLoadMult(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("updatehtgloadclass"))
			{
				doUpdateHtgLoadClass(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("updatehtgloadmult"))
			{
				doUpdateHtgLoadMult(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("edithtgloadclass"))
			{
				doEditHtgLoadClass(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("edithtgloadmultconfig"))
			{
				doEditHtgLoadMult(req, res, out, session, username);
			}

			else if (action.equalsIgnoreCase("reportpackagecatlist"))
	                        {
                                doReportPackageCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("followupreport"))
	                        {
                                doFollowUpReport(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addworksheet"))
	                        {
                                doAddWorkSheet(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addservproposal"))
	                        {
                                doAddProposal(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addproposal"))
	                        {
                                doAddProposal(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("saveservproposal"))
	                        {
                                doSaveProposal(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("saveproposal"))
	                        {
                                doSaveProposal(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("editcustform"))
	                        {
                                doEditCForms(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("updatecustformquestion"))
	                        {
                                doEditCForms(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("showcustdetail"))
	                        {
                                doShowCustDetail(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("showcustdetail_ide"))
	                        {
                                doShowCustDetail(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("delwsitem"))
	                        {
                                doDelWsItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addwspkgitem"))
	                        {
                                doAddWsPkgItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addwsinvitem"))
	                        {
                                doAddWsInvItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addwsitem"))
	                        {
                                doAddWsItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("editwsitem"))
	                        {
                                doEditWsItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("editinvitem"))
	                        {
                                doEditInvItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addproposalitem"))
	                        {
                                doAddProposalItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addservproposalitem"))
	                        {
                                doAddProposalItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("editquoteitem"))
	                        {
	//ADMIN FUNCTION
                                doEditQuoteItem(req, res, out, session, username);
	                        }
                        else if (action.equalsIgnoreCase("editflatrate"))
	                        {
	//ADMIN FUNCTION
                                doEditFlatRate(req, res, out, session, username);
	                        }
                        else if (action.equalsIgnoreCase("addinvtrans"))
	                        {
                                doAddInvTrans(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("saveinvtrans2"))
	                        {
                                doSaveInvTransEntry2(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("savetimecat"))
	                        {
                                doSaveTimeCat(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("saveinvtrans"))
	                        {
                                doSaveInvTransEntry(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("editinvtrans"))
	                        {
                                doEditInvTrans(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("updateinvtrans"))
	                        {
                                doUpdateInvTrans(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("showinvdetail"))
	                        {
                                doShowTransList(req, res, out, session, username);
	                        }
                        else if (action.equalsIgnoreCase("showhomepage"))
	                        {
                                doShowHomePage(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addinvitem"))
	                        {
                                doAddInvItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addpackageitem"))
	                        {
                                doAddPackageItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addquoteitem"))
	                        {
                                doAddQuoteItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("saveaddinvitem"))
	                        {
                                doSaveAddInvItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("saveaddpackageitem"))
	                        {
                                doSaveAddPackageItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("saveaddquoteitem"))
	                        {
                                doSaveAddQuoteItem(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("showservquotecatitemsmenu"))
	                        {
                                doShowQuoteCatListMenu(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("showquotecatitemsmenu"))
	                        {
                                doShowQuoteCatListMenu(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("showwspackageitems"))
	                        {
                                doShowWsPackageCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("showallpackages"))
	                        {
                                doShowPackageItemListID(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("showpackageitems"))
	                        {
                                doShowPackageCatList(req, res, out, username);
	                        }
                        else if (action.equalsIgnoreCase("reportpackageitems"))
	                        {
                                doReportPackageCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("showquotecatitems"))
	                        {
                                doShowQuoteCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("showcatitems"))
	                        {
                                doShowInvCatList(req, res, out, username);
	                        }
			else if (action.equalsIgnoreCase("edittimeentry"))
	                        {
                                doEditTimeEntry(req, res, out, session, username);
	                        }
                        else if (action.equalsIgnoreCase("savenewcharge"))
	                        {
                                doSaveNewCharge(req, res, out, session, username);
	                        }
                        else if (action.equalsIgnoreCase("updatecustomerentry"))
	                        {
                                doUpdateCustomerEntry(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("updateequipmententry"))
	                        {
                                doUpdateEquipmentEntry(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("selecttimereportdate"))
			{
				doSelectTimeReportsDate(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("sendweeklytimereport"))
			{
				doWeeklyTimeTransmit(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("sendyesterdaytimereport"))
			{
				doAutoYesterdayTimeTransmit(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screens"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenservicethisweek"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenservicelastweek"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenservicequarter"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenserviceytd"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenmaintthisweek"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenmaintlastweek"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenmaintquarter"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenmaintytd"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenservicethisweeke"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenservicelastweeke"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenservicequartere"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenserviceytde"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenmaintthisweeke"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenmaintlastweeke"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenmaintquartere"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("screenmaintytde"))
			{
				doAutoScreens(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("sendweektodatetimereport"))
			{
				doAutoWeekToDateTimeTransmit(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("sendquartertodatetimereport"))
			{
				doAutoQuarterToDateTimeTransmit(req, res, out, session, username);
			}	
			else if (action.equalsIgnoreCase("sendyeartodatetimereport"))
			{
				doAutoYearToDateTimeTransmit(req, res, out, session, username);
			}	
			else if (action.equalsIgnoreCase("senddailytimereport"))
			{
				doDailyTimeTransmit(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("updatetimeentry"))
	                        {
                                doUpdateTimeEntry(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("printtimesheet"))
	                        {
                                doPrintTimeSheet(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("showtimesheet"))
	                        {
                                doShowTimeSheet(req, res, out, session, username);
	                        }
                         else if (action.equalsIgnoreCase("edittimecode"))
	                        {
                                doAddTimeCat(req, res, out, session, username);
	                        }
                         else if (action.equalsIgnoreCase("addtimecat"))
	                        {
                                doAddTimeCat(req, res, out, session, username);
	                        }
                         else if (action.equalsIgnoreCase("addtimeentry"))
	                        {
                                doAddTimeEntry(req, res, out, session, username);
	                        }
                         else if (action.equalsIgnoreCase("addcustomer"))
	                        {
                                doAddCustomerEntry(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("unlockcustomer"))
	                        {
                                doAddCustomerUnlock(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("savecustunlock"))
	                        {
                                doSaveCustUnlock(req, res, out, session, username);
	                        }
				else if (action.equalsIgnoreCase("runcustunlock"))
	                        {
                                doUpdateLocalCustUnlock(req, res, out, session, username);
	                        }
			else if (action.equalsIgnoreCase("addcustomerserver"))
			{
				doAddCustomerServer(req,res,out,session,username);
			}
			else if (action.equalsIgnoreCase("searchcustserver"))
			{
				doSearchCustomerServer(req,res,out,session,username);
			}
			else if (action.equalsIgnoreCase("savetimeentry"))
			{
				doSaveTimeEntry(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("saveadmintimeentry"))
			{
				doSaveAdminTimeEntry(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savecustomerentry"))
			{
				doSaveCustomerEntry(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selecttimereportdate"))
			{
				doSelectTimeReportDate(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selecttimedate"))
			{
                                doSelectTimeDate(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selectstockdatespan"))
			{
                                doSelectStockDateSpan(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("addleadstart"))
			{
                                doStartLead(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selectproposaldatespan"))
			{
                                doSelectProposalDateSpan(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selectcommisiondatespan"))
			{
                                doSelectCommisionDateSpan(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("callreport"))
			{
                                doCallReport(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("commisionreport"))
			{
                                doPrintCommisionReport(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selectcallrepdatespan"))
			{
                                doSelectServProposalDateSpan(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selectservproposaldatespan"))
			{
                                doSelectServProposalDateSpan(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selectwsdatespan"))
			{
                                doSelectWsDateSpan(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("wsreport"))
			{
                                doWsReport(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("proposalreport"))
			{
                                doProposalReport(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("servproposalreport"))
			{
                                doServProposalReport(req, res, out, session, username);
			}
                        else if (action.equalsIgnoreCase("startkeycodelookup"))
			{
                                doStartKeyCodeLookup(req, res, out, session, username);
			}
                        else if (action.equalsIgnoreCase("wskeycodecheck"))
			{
                                doWsKeyCodeCheck(req, res, out, session, username);
			}
                        else if (action.equalsIgnoreCase("keycodecheck"))
			{
                                doKeyCodeCheck(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("showstockusage"))
			{
                                doShowStockUsage(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("addprevprice"))
			{
				doAddPrevPrice(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("editprevprice"))
			{
				doAddPrevPrice(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("uploadinvcsvfile"))
			{
				doUploadInvCSVFile(req, res, out, session, username);	
			}
			else if (action.equalsIgnoreCase("importinvcsv"))
			{
				doImportInvCSVFile(req, res, out, session, username);	
			}
			else if (action.equalsIgnoreCase("saveprevprice"))
			{
				doSavePrevPrice(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("updateprevprice"))
			{
				doSavePrevPrice(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("listprevprice"))
			{
				doListPrevPrice(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("addaccount"))
			{
				doValidUser(req, res, out, username);
				headerimage="<img SRC=\""+Gwebhome+"icons/haddaccountheader.jpg\" NOSAVE height=137 width=556></h1>";
				doAddAcctFrm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("saveaccount"))
			{
				doValidUser(req, res, out, username);
				doSaveAccount(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("wslistcustomers"))
			{
				doWsListCustomers(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("addleadcustomer"))
			{
				doExCustLeadForm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("custleadform"))
			{
				doExCustLeadForm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("servsync"))
			{
				doSyncCustTable(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selexistingleadcustomer"))
			{
				doSelectExistingLeadCustomer(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("leadcustomerselect"))
			{
				doLeadCustomerSelect(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("masterwslistcustomers"))
			{
				doMasterWsListCustomers(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("listcustomers"))
			{
				doListCustomers(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("listcustomersaddress"))
			{
				doListCustomerAddress(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("listcustomerscustnum"))
			{
				doListCustomerCustNum(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("listcustomerscity"))
			{
				doListCustomerCity(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("searchcustcity"))
			{
				doSearchCustCity(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("searchcustnum"))
			{
				doSearchCustNum(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("searchcustaddress"))
			{
				doSearchCustAddress(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("listentry"))
			{
				doValidUser(req, res, out, username);
				headerimage="<img SRC=\""+Gwebhome+"icons/hlistentheader.jpg\" NOSAVE height=137 width=556></h1>";
				doListEntry(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("addcat"))
			{
				doAddCatFrm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("editcat"))
			{
				doAddCatFrm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savedoc"))
			{
				doSaveDoc(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savedoccat"))
			{
				doSaveDocCat(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("adddoc"))
			{
				doAddDocFrm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("adddoccat"))
			{
				doAddDocCatFrm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("addquoteclass"))
			{
				doAddQuoteCatFrm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("addpackageclass"))
			{
				doAddPackageCatFrm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("selectaccount"))
			{
				doValidUser(req, res, out, username);
				doSelectAccount(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("paybillform"))
			{
				doValidUser(req, res, out, username);
				doBankTransForm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("banktransform"))
			{
				doValidUser(req, res, out, username);
				headerimage="<img SRC=\""+Gwebhome+"icons/hentryheader.jpg\" NOSAVE height=137 width=556></h1>";
				doBankTransForm(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savetrans"))
			{
				doValidUser(req, res, out, username);
				doSaveTrans(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savetype"))
			{
				doValidUser(req, res, out, username);
				doSaveType(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savepackagecat"))
			{
				doSavePackageCat(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savequotecat"))
			{
				doSaveQuoteCat(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("savecat"))
			{
				doSaveCat(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("updatecat"))
			{
				doUpdateCat(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("listtrans"))
			{
				doValidUser(req, res, out, username);
				headerimage="<img SRC=\""+Gwebhome+"icons/hledgerheader.jpg\" NOSAVE height=137 width=556></h1>";
				session.setAttribute("headerimage",headerimage);
				String aid = req.getParameter("account");
				session.setAttribute("action",action);
				session.setAttribute("aid",aid);
                                res.sendRedirect(Gwebhome+"jsp/junilisttrans.jsp");
			}
			else if (action.equalsIgnoreCase("listalltrans"))
			{
				doValidUser(req, res, out, username);
				headerimage="<img SRC=\""+Gwebhome+"icons/hledgerheader.jpg\" NOSAVE height=137 width=556></h1>";
				session.setAttribute("headerimage",headerimage);
				String aid = req.getParameter("account");
				session.setAttribute("aid",aid);
                                res.sendRedirect(Gwebhome+"jsp/junilistalltrans.jsp");
			}
			else if (action.equalsIgnoreCase("bills"))
			{
				doValidUser(req, res, out, username);
				headerimage="<img SRC=\""+Gwebhome+"icons/hbillsheader.jpg\" NOSAVE height=137 width=556></h1>";
				doListAllBills(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("emtrucksinglecat"))
			{
				doEmTruckStockSingleCat(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("trucksinglecat"))
			{
				doTruckStockSingleCat(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("truckbycat"))
			{
				doTruckStockCat(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("updateinvitem"))
			{
				doUpdateInvItem(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("updatequoteitem"))
			{
				doUpdateQuoteItem(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("truckbykeycode"))
			{
				doTruckStockKeyCode(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("editchargerec"))
			{
				doEditCharge(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("editchargerec2"))
			{
				doEditCharge2(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("delchargerec"))
			{
				doDeleteCharge(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("reminders"))
			{
				doListAllReminders(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("deletereminder"))
			{
				doDeleteReminder(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("delinvtrans2"))
			{
				doDeleteInvTrans(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("delinvtrans"))
			{
				doDeleteInvTrans(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("addremind"))
			{
				doAddRemindForm(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("showonereminder"))
			{
				doEditReminder(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("truckstockrequestcat"))
			{
				doTruckStockRequestCat(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("truckstockrequest"))
			{
				doTruckStockRequest(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("selectinvitem"))
			{
				doSelectInvItem(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("editinvitemquant"))
			{
				doEditInvQuant(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("updateinvquant"))
			{
				doSaveInvQuantTransEntry(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("saveremind"))
			{
				doSaveRemind(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("savenote"))
			{
				doSaveNote(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("addnote"))
			{
				doAddNote(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("deletenote"))
			{
				doDeleteNote(req, res, out, session, username);
			}
			else if (action.equalsIgnoreCase("updateremind"))
			{
				doSaveRemind(req, res, out, session,username);
			}
			else if (action.equalsIgnoreCase("config"))
			{

				doValidUser(req, res, out,username);

				doConfigMenu(req, res, out, session,username);
			}
			else
			{
				doError(req, res, out,username);
			}

	return;
	}

	public void doMenu(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
	{
	String menu="";
	String mbody="";
	String category="";
	int catnum=0;
	doOpenConnection();
	menu = req.getParameter("menu");
	String action = req.getParameter("action");
	if (menu==null) {
		menu="main";
			}
	username=(String)session.getAttribute("login");
	MainMenu.getIndividualItem (con, req, res, out, session, username, classdir, action,  menu);
}


private void doSaveInvQuantTransEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String callslip = req.getParameter("transid");
                String newquantity = req.getParameter("newquant");
                String sysquantity = req.getParameter("sysquant");
                String titemnum = req.getParameter("itemnum");
		int itemnum = Integer.parseInt(titemnum);
                String tcatnum = req.getParameter("catnum");
		int catnum = Integer.parseInt(tcatnum);
                String tdate = req.getParameter("transid");
                String notes = "Adjustment";
		double curqu = Double.parseDouble(newquantity);
		double sysqu= Double.parseDouble(sysquantity);
		double quantity=0;
		if (sysqu>curqu) {
			quantity=0-(sysqu-curqu);
				}

		if (curqu>sysqu) {
			quantity=curqu-sysqu;
				}
		if (curqu==sysqu) {
			quantity=0;
				}
		String squantity=""+quantity+"";

                UniInvDetail.addInvTrans(con, callslip, itemnum, tdate, notes, squantity);
			res.sendRedirect( classdir + "UniCash?action=showcatitems&catnum="+catnum);
            }


	private void doValidUser(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
		throws Exception
	{
		if (glogin==null || glogin.length() <1)
		{
				res.sendRedirect( Gwebhome + "jsp/login.jsp");
		}
	}


	public void doExpDate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
	{
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
	}

	private void doExpired(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
	{
			printHeader(req, res, out, username);

			out.println("The software appears to have expired.<br>This means you");
			out.println("must do an update. If you are connected to the internet");
			out.println("<br>Please click on continue below. If not YOU MUST CONNECT<br>AND UPDATE!!!!!<br>");
			out.println("You may need to close internet explorer and re-open once the update is complete.<br><br>");

		out.println("<a href=\""+classdir+"UniCash?action=updateexpiredate\">Continue</a></p>");
			printFooter(req, res, out, username);
	}

	
	private void doError(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
		throws Exception
	{

		out.println("The servlet was called with an invalid action: " + req.getParameter("action"));
		printFooter(req, res, out, username);
	}


	private void printFooter(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
	throws Exception
	{
	out.println("<br>");
	String apphome = (String) config.getInitParameter("web.apphome");
	String classdir = (String) config.getInitParameter("web.classdir");
	out.println("<center><h2>");
	out.println("</h2></center>");
	}

	private void printHeader(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
	throws Exception
	{
	out.println("<http>");

	}
        
        private void doShowHomePage(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
	throws Exception
	{
// main table

	out.println("<table><tr><td>");
// Stats to date (since beginning of year) from timesheet summary
String thismainserver=doGetThisMainServer();

		if (!thismainserver.equalsIgnoreCase("yes")) {
	out.println("<h4>Your Statistics Year To Date</h4>");
	out.println("<table border=1 width=\"95%\" align=\"left\">");
	out.println("<th>Call Type</th><th>Count</th><th>Total Collected</th><th>Non-Commision<br>Billed</th><th>Commision<br>Billed</th><th>Commision</th><th>Time</th><th>Time Without Travel</th>");

			String server = (String) config.getInitParameter("db.server");
			String database = (String) config.getInitParameter("db.database");
			String user = (String) config.getInitParameter("db.username");
			String pass = (String) config.getInitParameter("db.password");
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+server+"/"+database+"?autoReconnect=true", user, pass);
		doOpenConnection();
		Statement stmt = conu.createStatement();
	ResultSet rs = stmt.executeQuery("select ucase(ctype) as ctype, count(tsid) as callcount, sum(amount) as amount, sum(amount_collected) as amount_collected, sum(camount) as camount, sum(commision) as commision,  ucase(SEC_TO_TIME(sum(TIME_TO_SEC(subtime(time_out,dispatch_time))))) as time_with_travel,  ucase(SEC_TO_TIME(sum(TIME_TO_SEC(subtime(time_out,time_in))))) as time_no_travel from time_sheet where tdate>'2005-09-30' group by ctype;");
		while(rs.next())
		{
			String tamount =rs.getString("amount"); 
			String tcamount = rs.getString("camount");
			String tamount_collected = rs.getString("amount_collected");
			String tcommision = rs.getString("commision");
			String ctype=rs.getString("ctype");
			String callcount=rs.getString("callcount");
			String timewithtravel=rs.getString("time_with_travel");
			String timenotravel=rs.getString("time_no_travel");
	out.println("<tr><td>"+ctype+"</td><td>"+callcount+"</td><td>"+tamount_collected+"</td><td>"+tamount+"</td><td>"+tcamount+"</td><td>"+tcommision+"</td><td>"+timewithtravel+"</td><td>"+timenotravel+"</td></tr>");
		}
	rs = stmt.executeQuery("select count(tsid) as callcount, sum(amount) as amount, sum(amount_collected) as amount_collected, sum(camount) as camount, sum(commision) as commision,  ucase(SEC_TO_TIME(sum(TIME_TO_SEC(subtime(time_out,dispatch_time))))) as time_with_travel,  ucase(SEC_TO_TIME(sum(TIME_TO_SEC(subtime(time_out,time_in))))) as time_no_travel from time_sheet where tdate>'2005-09-30';");
		while(rs.next())
		{
			String tamount =rs.getString("amount"); 
			String tcamount = rs.getString("camount");
			String tamount_collected = rs.getString("amount_collected");
			String tcommision = rs.getString("commision");
			String callcount=rs.getString("callcount");
			String timewithtravel=rs.getString("time_with_travel");
			String timenotravel=rs.getString("time_no_travel");
	out.println("<tr><td>Total</td><td>"+callcount+"</td><td>"+tamount_collected+"</td><td>"+tamount+"</td><td>"+tcamount+"</td><td>"+tcommision+"</td><td>"+timewithtravel+"</td><td>"+timenotravel+"</td></tr>");
		}

	out.println("</table>");
		conu.close();
	} else 
	{
		out.println("<center><h3>You are on main database server</h3>");
	}
	out.println("</font></html>");
	out.println("</td></tr><tr><td>");

		

	out.println("</td></tr></table>");
	con.close();
	}


private void doAirFlowStandards(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			out.println("<html>");
			doMHeader(req, res, out, session, username);

			out.println("<table width=\"100%\">");
			out.println("<tr>");
			out.println("Duct / Air sizing<br><br>");
				out.println("HEATING<br><br>");
				out.println("Residential<br><br>");
					out.println("Poor construction 30 BTU / Sq Foot<br>");
					out.println("Average construction 25 BTU / sq Foot<br>");
					out.println("Good / Best construction 20 BTU / sq Foot<br><br>");
				out.println("Commercial <br><br>");
					out.println("30 BTU / sq ft<br><br>");
				out.println("Check CFM capacity of system<br><br>");
					out.println("5\" Branch good for 60CFM<br>");
					out.println("6\" Branch is good for 100 CFM<br>");
					out.println("7\" Branch is good for  150 CFM<br>");
					out.println("8\" Branch is good for 200 CFM<br>");
					out.println("10\" Branch is good for 400<br><br>");
				out.println("Rule of thumb for S/A and R/A - 400 CFM per ton of A/C<br><br>");
				out.println("For heat you need at least 1 cubic foot per 80 BTU in heating<br>");
				out.println("** Get change in temperature to convert temp rise or drop to CFM<br>");
				out.println("To convert kilowatt to BTU's: (electric heat)<br>");
				out.println("# of KW x 2400 = total btu output at 240 volts<br>");
				out.println("# of KW x 2560 = total BTU out at 208 volts<br><br>");
 				out.println("COMMERCIAL COOLING<br><br>");
 				out.println("Typical office layout<br>");
 				out.println("400 Square foot per ton<br>");
 				out.println("if lots of glass or heavy load heat load must be calculated<br>");
 				out.println("In church or assembly area 200 Sq feet per ton<br>");
 				out.println("People sitting give off 350 BTU per person<br>");
 				out.println("People with moderate activity give off 450 BTU per person<br>");
 				out.println("People working out / dancing give off 650 BTU per person<br>");
 				out.println("2 spacegards in any system over 5 tons -  static pressure to high<br>");
					

			out.println("</table></BODY>");
			out.println("</HTML>");
			}


private void doUploadInvCats(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String thismainserver=doGetThisMainServer();
			
			if (thismainserver.equalsIgnoreCase("no")) {
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			Statement stmtu = conu.createStatement();
			int result=stmtu.executeUpdate("DROP TABLE IF EXISTS inv_cats;");
			int result2=stmtu.executeUpdate("CREATE TABLE inv_cats ( catnum int(11) NOT NULL auto_increment,category text NOT NULL,description text,keyprefix text,PRIMARY KEY  (catnum),UNIQUE KEY catnum (catnum),KEY catnum_2 (catnum)) ENGINE=MyISAM DEFAULT CHARSET=latin1");
			printHeader(req, res, out, username);
			
			SyncInvCat ic = new SyncInvCat(con,conu);	

			out.println("Uploaded Inventory Cats complete<br></html>");
			}
		
			}

private void doUpdateInvKeyCodeTable(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String thismainserver=doGetThisMainServer();
			
			if (thismainserver.equalsIgnoreCase("no")) {
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM inv_keycodes_date");
			while(rs.next())
				{
				localdate=rs.getString("dateupdated");
				}
			
			Statement stmtu = conu.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM inv_keycodes_date");
			while(rsu.next())
				{
				remotedate=rsu.getString("dateupdated");
				}
		out.println("Local Date: "+localdate+"<br>");	
		out.println("Remote Date: "+remotedate+"<br>");	

		if (doFormatDateComp(getDate(remotedate))>doFormatDateComp(getDate(localdate)))
			{
			out.println("Inventory Keycode Database Needs Updated<br>");
			int result=stmt.executeUpdate("DROP TABLE IF EXISTS inv_keycodes;");
			int result2=stmt.executeUpdate("CREATE TABLE inv_keycodes (ID int(11) NOT NULL auto_increment,keycodep text,part_number text,sort_desc text,description text,manu text,location text,oh_qty double,qty_opt double,part_cost double,extended_cost double,sell_price text,stocknum text,orderuom text,conversion double,peak_oh text,off_peak_oh text,PRIMARY KEY (ID),UNIQUE ID (ID),KEY ID_2 (ID));");

			rsu = stmtu.executeQuery("SELECT * FROM inv_keycodes");
                int counter=0;
			while(rsu.next())
				{
			String keycodep=rsu.getString("keycodep");
			String part_number=rsu.getString("part_number");
			String sort_desc=rsu.getString("sort_desc");
			String description=rsu.getString("description");
			String manu=rsu.getString("manu");
			String location=rsu.getString("location");
			String oh_qty=rsu.getString("oh_qty");
			String qty_opt=rsu.getString("qty_opt");
			String part_cost=rsu.getString("part_cost");
			String extended_cost=rsu.getString("extended_cost");
			String sell_price=rsu.getString("sell_price");
			String stocknum=rsu.getString("stocknum");
			String orderuom=rsu.getString("orderuom");
			String conversion=rsu.getString("conversion");
			String peak_oh=rsu.getString("peak_oh");
			String off_peak_oh=rsu.getString("off_peak_oh");
			counter++;
			sort_desc="";
			String tdescription = description.replaceAll("'","ft");
			String ttdescription = tdescription.replaceAll("\"","in");
			String tttdescription = ttdescription.replaceAll("null","");
		stmt.executeUpdate("INSERT INTO inv_keycodes (keycodep, part_number, sort_desc, description, manu, location, oh_qty, qty_opt, part_cost, extended_cost, sell_price, stocknum, orderuom, conversion, peak_oh, off_peak_oh) Values ('"+keycodep+"','" +part_number+ "', '"+sort_desc+"','"+tttdescription+"','" +manu+ "', '"+location+"','"+oh_qty+"','" +qty_opt+ "', '"+part_cost+"','"+extended_cost+"','" +sell_price+ "', '"+stocknum+"','"+orderuom+"','" +conversion+ "', '"+peak_oh+"','"+off_peak_oh+"')");
		}
		result = stmt.executeUpdate("UPDATE inv_keycodes_date set dateupdated='"+s+"';");

		out.println("Records Written: "+counter+"<br>");
		rs = stmt.executeQuery("SELECT * FROM inv_keycodes_date");
		while(rs.next())
			{
			String nlocaldate=rs.getString("dateupdated");
			out.println("New Local Date: "+ nlocaldate +"<br>");
			}
			}
		else if (doFormatDateComp(getDate(remotedate))<=doFormatDateComp(getDate(localdate)))
			{
			out.println("Inventory Keycodes Database up to date<br><br>");
			}

			int result=stmt.executeUpdate("DROP TABLE IF EXISTS inv_cats;");
			int result2=stmt.executeUpdate("CREATE TABLE inv_cats ( catnum int(11) NOT NULL auto_increment,category text NOT NULL,description text,keyprefix text,PRIMARY KEY  (catnum),UNIQUE KEY catnum (catnum),KEY catnum_2 (catnum)) ENGINE=MyISAM DEFAULT CHARSET=latin1");
			printHeader(req, res, out, username);
			
			SyncInvCat ic = new SyncInvCat(conu,con);	

			out.println("Download Inventory Cats complete<br></html>");
	

	
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		} else {
		out.println("You are on main server - you can not update anything your databases are the masters");
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
			}
		con.close();
		conu.close();
	}


private void doUploadFlatRateTable(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = conu.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM flat_rate_date");

			String thismainserver=doGetThisMainServer();
			if (thismainserver.equalsIgnoreCase("no")) {
			while(rs.next())
				{
				remotedate=rs.getString("dateupdated");
				}
			
			Statement stmtu = con.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM flat_rate_date");
			while(rsu.next())
				{
				localdate=rsu.getString("dateupdated");
				}
		out.println("Local Date: "+localdate+"<br>");	
		out.println("Remote Date: "+remotedate+"<br>");	

			out.println("Flat Rate Database Needs Updated<br>");

			int result5 = stmt.executeUpdate("DROP TABLE IF EXISTS flat_rate_table;");
			int result6 = stmt.executeUpdate("CREATE TABLE flat_rate_table (code int(11) NOT NULL auto_increment, part text, category text, keycode text, hours decimal(10,2) default '0.00', partcost decimal(10,2) default 0.00, custnotes text, nodiscount text, specitem int(11),  PRIMARY KEY  (code), UNIQUE KEY code (code));");

                Vector v;
		v = FlatRateTable.getAllItems(con);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
			FlatRateTable t = (FlatRateTable) v.elementAt(i);
			int code=t.getCode();
			String category=t.getCategory();
			String part = t.getPart();
			String keycode=t.getKeycode();
			double hours = t.getHours();
			double partcost=t.getPartCost();
			String custnotes=t.getCustNotes();
			String nodiscount=t.getNoDiscount();
			String specitem=""+t.getSpecItem()+"";
			counter++;

		FlatRateTable.AddItem(conu, code, category, part, keycode, hours, partcost, custnotes, nodiscount, specitem);

		int result = stmt.executeUpdate("UPDATE flat_rate_date set dateupdated='"+s+"';");
		}
		out.println("Records Written: "+counter+"<br>");
		rs = stmt.executeQuery("SELECT * FROM flat_rate_date");
		while(rs.next())
			{
			String nlocaldate=rs.getString("dateupdated");
			out.println("New Local Date: "+ nlocaldate +"<br>");
			}
		
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		} else {
		int result = stmt.executeUpdate("UPDATE flat_rate_date set dateupdated='"+s+"';");
		out.println("You are on main server - you can not update anything your databases are the masters");
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
			}
		con.close();
		conu.close();
	}

private void doSyncCustTable(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);

	out.println("Backing Up Local Machine To Server - May Take a while<br>Any problems check internet connection!<br>");
/////////////////////////////////////////////////////////
// Lets sync all unsynced customers first
////////////////////////////////////////////////////////
	SyncLocalCustomer slc = new SyncLocalCustomer(con, conu);
	out.println("Local Customer Sync Complete<br>");
        SyncCustomer sc = new SyncCustomer(con,conu);
	out.println("Customer Sync Complete<br>");
	SyncEquip se = new SyncEquip(con,conu);
	out.println("Equipment Sync Complete<br>");
	SyncPagreement sp = new SyncPagreement(con,conu);
	out.println("Preventative Sync Complete<br>");
	SyncTimeSheets st = new SyncTimeSheets(con,conu);
	out.println("Time Sheet Sync Complete<br>");
	SyncCallNotes scn=new SyncCallNotes(con,conu);
	out.println("Callslip Notes Sync Complete<br>");
	SyncInspectNotes sin=new SyncInspectNotes(con,conu);
	out.println("Inspection Notes Sync Complete<br>");
	SyncQuotes sq = new SyncQuotes(con,conu);
	out.println("Quote Sync Complete<br>");
	SyncWorksheets sw = new SyncWorksheets(con,conu);
	out.println("Worksheet Sync Complete<br>");
	SyncInvUse siu = new SyncInvUse(con,conu);
	out.println("Inventory Use Sync Complete<br>");
	SyncSvcCharges ssc = new SyncSvcCharges(con,conu);
	out.println("Service Charges Sync Complete<br>");
	SyncCallslip scs = new SyncCallslip(con,conu);
	out.println("Service Callslips Sync Complete<br>");
	SyncInspection sis = new SyncInspection(con,conu);
	out.println("Inspection Sync Complete<br>");
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		conu.close();
		con.close();
	}
private void doSyncInspection(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);

	out.println("Backing Up Local Machine To Server - May Take a while<br>Any problems check internet connection!<br>");
/////////////////////////////////////////////////////////
// Lets sync all unsynced customers first
////////////////////////////////////////////////////////
        SyncCustomer sc = new SyncCustomer(con,conu);
	out.println("Customer Sync Complete<br>");
	SyncEquip se = new SyncEquip(con,conu);
	out.println("Equipment Sync Complete<br>");
	SyncInvUse siu = new SyncInvUse(con,conu);
	out.println("Inventory Use Sync Complete<br>");
	SyncSvcCharges ssc = new SyncSvcCharges(con,conu);
	out.println("Service Charges Sync Complete<br>");
	SyncInspection sis = new SyncInspection(con,conu);
	out.println("Inspection Sync Complete<br>");
		conu.close();
		con.close();
	}


private void doSyncCallslips(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);

	out.println("Backing Up Local Machine To Server - May Take a while<br>Any problems check internet connection!<br>");
/////////////////////////////////////////////////////////
// Lets sync all unsynced customers first
////////////////////////////////////////////////////////
        SyncCustomer sc = new SyncCustomer(con,conu);
				doOpenConnection();
	out.println("Customer Sync Complete<br>");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
	SyncEquip se = new SyncEquip(con,conu);
	out.println("Equipment Sync Complete<br>");
				doOpenConnection();
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
	SyncInvUse siu = new SyncInvUse(con,conu);
	out.println("Inventory Use Sync Complete<br>");
	SyncSvcCharges ssc = new SyncSvcCharges(con,conu);
				doOpenConnection();
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
	out.println("Service Charges Sync Complete<br>");
	SyncCallslip scs = new SyncCallslip(con,conu);
	out.println("Service Callslips Sync Complete<br>");
	conu.close();
	con.close();
	}

private void doUpdateFlatRateTable(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM flat_rate_date");
			while(rs.next())
				{
				localdate=rs.getString("dateupdated");
				}
			
			Statement stmtu = conu.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM flat_rate_date");
			while(rsu.next())
				{
				remotedate=rsu.getString("dateupdated");
				}
		out.println("Local Date: "+localdate+"<br>");	
		out.println("Remote Date: "+remotedate+"<br>");	

			out.println("Flat Rate Database Needs Updated<br>");
			int result5 = stmt.executeUpdate("DROP TABLE IF EXISTS flat_rate_table;");
			int result6 = stmt.executeUpdate("CREATE TABLE flat_rate_table (code int(11) NOT NULL auto_increment, part text, category text, keycode text, hours decimal(10,2) default '0.00', partcost decimal(10,2) default 0.00, custnotes text, nodiscount text, specitem int(11), PRIMARY KEY  (code), UNIQUE KEY code (code));");
                int counter=0;
                Vector v;
		v = FlatRateTable.getAllItems(conu);
                for (int i = 0 ; i < v.size(); i++)
                {
			FlatRateTable t = (FlatRateTable) v.elementAt(i);
			int code=t.getCode();
			String category=t.getCategory();
			String part = t.getPart();
			String keycode=t.getKeycode();
			double hours = t.getHours();
			double partcost=t.getPartCost();
			String custnotes=t.getCustNotes();
			String nodiscount=t.getNoDiscount();
			String specitem=""+t.getSpecItem()+"";
			counter++;

		FlatRateTable.AddItem(con, code, category, part, keycode, hours, partcost, custnotes, nodiscount, specitem);
		}
		int result = stmt.executeUpdate("UPDATE flat_rate_date set dateupdated='"+s+"';");
		out.println("Records Written: "+counter+"<br>");
		rs = stmt.executeQuery("SELECT * FROM flat_rate_date");
		while(rs.next())
			{
			String nlocaldate=rs.getString("dateupdated");
			out.println("New Local Date: "+ nlocaldate +"<br>");
			}
			int result15 = stmt.executeUpdate("DROP TABLE IF EXISTS flat_rate_cat;");
			int result15a = stmt.executeUpdate("create table flat_rate_cat (catnum int(11) NOT NULL auto_increment, category text, PRIMARY KEY  (catnum), UNIQUE KEY code (catnum));");
			int result15b = stmt.executeUpdate("insert into flat_rate_cat (category) select category from flat_rate_table group by category;");
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		con.close();
		conu.close();
		res.sendRedirect(""+classdir+"UniCash?action=downloadfrconfig");
	}


private void doUpdateExpireDate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			
			printHeader(req, res, out, username);
			localdate=doGetExpireDate();
			
			Statement stmtu = conu.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM expire_date");
			while(rsu.next())
				{
				remotedate=rsu.getString("expiredate");
				}

		out.println("Local Date: "+localdate+"<br>");	
		out.println("Remote Date: "+remotedate+"<br>");	

		if (doFormatDateComp(getDate(remotedate))> doFormatDateComp(getDate(localdate)))
			{
			out.println("Updating Expire Date<br>Server Date Greater Than Local Date <br>");
                SystemExpireDate.UpdateItem(con, remotedate);
		}

		
		else if (doFormatDateComp(getDate(remotedate))==doFormatDateComp(getDate(localdate)))
			{
			out.println("Current Expire Date is Valid<br>Server and Local Date Match<br>");
			}
		
		else if (doFormatDateComp(getDate(remotedate))<doFormatDateComp(getDate(localdate)))
			{
			out.println("Current Expire Date is not valid - CORRECTING<br>Local date greater than server date.<br>");
                SystemExpireDate.UpdateItem(con, remotedate);
			}
		
		out.println("<a href=\"http://127.0.0.1:8080/servsys/index.html\">Continue</a></p>");
		printFooter(req,res,out,username);
	}
//UPDATE_MWORKSHEET - HERE

private void doUpdateMasterWorkSheets(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		Connection con2 = null;
		String dbserver=doGetMainServer();
		String dbpasswd=doGetMainPassword();
		String dbuser=doMainDbUser();
		String dbname=doMainDbName();
		String protocol = (String) config.getInitParameter("db.protocol");
		String subProtocol = (String) config.getInitParameter("db.subprotocol");
		con2 = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);

// Check Connectivity
			Statement stmtu = con2.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM masterworksheet");
// Drop Local Tables
			Statement stmt = con.createStatement();
			int result=stmt.executeUpdate("DROP TABLE IF EXISTS masterworksheet;");
			result=stmt.executeUpdate("DROP TABLE IF EXISTS masterwsitem;");
// Rebuild Local Tables
			result=stmt.executeUpdate("create table masterworksheet (wsrec int(11) NOT NULL auto_increment,wsdesc text NOT NULL, wsdate date NOT NULL default '2000-01-01',wsnotes text NOT NULL,wsmult decimal(10,2) NOT NULL default '0.00',wsmultlab decimal(10,2) NOT NULL default '0.00',wsmultsub decimal(10,2) NOT NULL default '0.00',PRIMARY KEY  (wsrec),KEY wsrec (wsrec));");

			result=stmt.executeUpdate("CREATE TABLE masterwsitem ( wsrec int(11) NOT NULL default '0',itemrec int(11) NOT NULL auto_increment,item text NOT NULL,keycode text NOT NULL,quantity int(11) NOT NULL default '0',cost decimal(10,2) NOT NULL default '0.00',laborhours int(11) NOT NULL default '0',  laborcost decimal(10,2) NOT NULL default '0.00',shophours int(11) NOT NULL default '0' , subcost decimal(10,2) NOT NULL default '0.00',UNIQUE KEY itemrec_2 (itemrec),KEY itemrec (itemrec));");

// Get Master Worksheet Items
                Vector vw;
                vw = UniMasterWorksheet.getAllItems(con2);
		int counter=0;
                for (int i = 0 ; i < vw.size(); i++)
                {
                UniMasterWorksheet tw = (UniMasterWorksheet) vw.elementAt(i);
		int wsnum=tw.getWsRec();
		String wsdate=tw.getWsDate();
		String wssummary=tw.getWsDesc();
		String wsmult=tw.getWsMult();
		UniMasterWorksheet.AddItem(con, wsnum, wsdate, wssummary, wsmult);
			}

		Vector vp;
                vp = UniMasterWsItems.getAllItems(con2);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniMasterWsItems tp = (UniMasterWsItems) vp.elementAt(j);
		int wsrec = tp.getWsRec();
		int itemrec = tp.getItemRec();
		String item = tp.getWsItem();
		String keycode = tp.getWsKeyCode();
		int quantity = tp.getWsQuant();
		int laborhours = tp.getWsLaborHours();
		int shophours = tp.getWsShopHours();
		double cost=tp.getWsCost();
		double subcost=tp.getWsSubCost();
		double laborcost=tp.getWsLaborCost();
		String scost= ""+cost+"";
		String ssubcost=""+subcost+"";
		String slaborcost=""+laborcost+"";
		UniMasterWsItems.AddItem(con,wsrec,item,keycode,quantity,scost,laborhours,slaborcost,shophours, ssubcost);
		}

		printHeader(req, res, out, username);
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		con2.close();
		con.close();

			}



private void doUpdateDocs(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String thismainserver=doGetThisMainServer();
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmtr = conu.createStatement();
			Statement stmt = con.createStatement();
			ResultSet rs = stmtr.executeQuery("SELECT * FROM packages_date");
		if (thismainserver.equalsIgnoreCase("no")) {
			while(rs.next())
				{
				remotedate=rs.getString("dateupdated");
				}
		out.println("Remote Date: "+remotedate+"<br>");	

			int result=stmt.executeUpdate("DROP TABLE IF EXISTS doc_cat;");
			result=stmt.executeUpdate("CREATE TABLE doc_cat (catnum int(11) NOT NULL auto_increment,category text NOT NULL,PRIMARY KEY  (catnum),KEY catnum (catnum));");

			int result2=stmt.executeUpdate("DROP TABLE IF EXISTS documentation;");
			result2=stmt.executeUpdate("CREATE TABLE documentation (docid int(11) NOT NULL auto_increment, doctype int(11) default NULL, filepath text NOT NULL, docdate date default NULL ,key1 text ,key2 text ,key3 text, document blob, docdesc text NOT NULL, UNIQUE KEY docid (docid), KEY docid_2 (docid));");
                Vector v;
                v = DocCat.getUnsortedItems(conu);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        DocCat t = (DocCat) v.elementAt(i);
			String catdesc=t.Category();
			int catnum=t.getCatnum();
			counter++;

                DocCat.addCompCat(con, catdesc);
		}
		out.println("Package Category Records Written: "+counter+"<br>");

                Vector vv;
                vv = Docs.getAllItems(conu);
                int countert=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                       Docs tt = (Docs) vv.elementAt(i);
			String doctype =tt.getDocType();
			String filepath=tt.getFilePath();
			String key1=tt.getKey1();
			String key2=tt.getKey2();
			String key3=tt.getKey3();
			String docdesc=tt.getDocDesc();
			String docdate=tt.getDocDate();
			countert++;

                Docs.addItem(con, doctype, filepath, docdate, key1, key2, key3, docdesc);
		}
		out.println("Document Records Written: "+countert+"<br>");

		out.println("Document Category  Records Written: "+counter+"<br>");
	} else {
		out.println("You are on main server - Dates only updated.<br>");
		}	
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		conu.close();
		con.close();
	}


private void doUploadFlatRateConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tlabperhour = req.getParameter("labperhour");
		Double labperhour = Double.valueOf(tlabperhour);
		String tpsdiscount = req.getParameter("psdiscount");
		Double psdiscount = Double.valueOf(tpsdiscount);
		String tmrdiscount = req.getParameter("mrdiscount");
		Double mrdiscount = Double.valueOf(tmrdiscount);
		String tcommarkup = req.getParameter("commarkup");
		Double commarkup = Double.valueOf(tcommarkup);
		String tsalestax = req.getParameter("salestax");
		Double salestax = Double.valueOf(tsalestax);
		String tpartmarkup = req.getParameter("partmarkup");
		Double partmarkup = Double.valueOf(tpartmarkup);
		String tsitemlowprice = req.getParameter("sitemlowprice");
		Double sitemlowprice = Double.valueOf(tsitemlowprice);
		String tsitemhighprice = req.getParameter("sitemhighprice");
		Double sitemhighprice = Double.valueOf(tsitemhighprice);
		String tsitemhighhours = req.getParameter("sitemhighhours");
		Double sitemhighhours = Double.valueOf(tsitemhighhours);
                FlatRateConfig.UpdateItem(con, tlabperhour, tpsdiscount, tmrdiscount, tcommarkup, tsalestax, tpartmarkup, tsitemlowprice, tsitemhighprice, tsitemhighhours);
		
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String thismainserver=doGetThisMainServer();
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);

			labperhour = doLabPerHour();
			psdiscount = doPsDiscount();
			mrdiscount = doMrDiscount();
			commarkup = doComMarkUp();
			partmarkup = doPartMarkUp();
			salestax = doSalesTax();
	sitemlowprice=doSitemLowPrice();
	sitemhighprice=doSitemHighPrice();
	sitemhighhours=doSitemHighHours();

			Statement stmt = conu.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM packages_date");
		if (thismainserver.equalsIgnoreCase("no")) {
			while(rs.next())
				{
				remotedate=rs.getString("dateupdated");
				}
		out.println("Package Remote Date: "+remotedate+"<br>Server Present<br>");	

			int result=stmt.executeUpdate("DROP TABLE IF EXISTS flatrateconfig;");
			int result2=stmt.executeUpdate("CREATE TABLE flatrateconfig ( labperhour decimal(10,2), psdiscount decimal(10,2), mrdiscount decimal(10,2), commarkup decimal(10,2), salestax decimal(10,2), partmarkup decimal(10,2), sitemlowprice decimal(10,2), sitemhighprice decimal(10,2), sitemhighhours decimal(10,2))");

			int result4 = stmt.executeUpdate("insert into flatrateconfig (labperhour, psdiscount, mrdiscount, commarkup, salestax, partmarkup, sitemlowprice, sitemhighprice, sitemhighhours) values ('"+labperhour+"', '"+psdiscount+"', '"+mrdiscount+"', '"+commarkup+"', '"+salestax+"', '"+partmarkup+"', '"+sitemlowprice+"', '"+sitemhighprice+"', '"+sitemhighhours+"');");
			} else {
		out.println("You are on main server - Dates only updated.<br>");
		}	
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		conu.close();
		con.close();
	}

private void doUploadDocs(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String thismainserver=doGetThisMainServer();
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = conu.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM packages_date");
		if (thismainserver.equalsIgnoreCase("no")) {
			while(rs.next())
				{
				remotedate=rs.getString("dateupdated");
				}
		out.println("Remote Date: "+remotedate+"<br>");	

			int result=stmt.executeUpdate("DROP TABLE IF EXISTS doc_cat;");
			result=stmt.executeUpdate("CREATE TABLE doc_cat (catnum int(11) NOT NULL auto_increment,category text NOT NULL,PRIMARY KEY  (catnum),KEY catnum (catnum));");

			int result2=stmt.executeUpdate("DROP TABLE IF EXISTS documentation;");
			result2=stmt.executeUpdate("CREATE TABLE documentation (docid int(11) NOT NULL auto_increment, doctype int(11) default NULL, filepath text NOT NULL, docdate date default NULL ,key1 text ,key2 text ,key3 text, document blob, docdesc text NOT NULL, UNIQUE KEY docid (docid), KEY docid_2 (docid));");
                Vector v;
                v = DocCat.getUnsortedItems(con);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        DocCat t = (DocCat) v.elementAt(i);
			String catdesc=t.Category();
			int catnum=t.getCatnum();
			counter++;

                DocCat.addCompCat(conu, catdesc);
		}
		out.println("Package Category Records Written: "+counter+"<br>");

                Vector vv;
                vv = Docs.getAllItems(con);
                int countert=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                       Docs tt = (Docs) vv.elementAt(i);
			String doctype =tt.getDocType();
			String filepath=tt.getFilePath();
			String key1=tt.getKey1();
			String key2=tt.getKey2();
			String key3=tt.getKey3();
			String docdesc=tt.getDocDesc();
			String docdate=tt.getDocDate();
			countert++;

                Docs.addItem(conu, doctype, filepath, docdate, key1, key2, key3, docdesc);
		}
		out.println("Document Records Written: "+countert+"<br>");

		out.println("Document Category  Records Written: "+counter+"<br>");
	} else {
		out.println("You are on main server - Dates only updated.<br>");
		}	
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		conu.close();
		con.close();
	}


private void doUploadPackages(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String thismainserver=doGetThisMainServer();
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = conu.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM packages_date");
		if (thismainserver.equalsIgnoreCase("no")) {
			while(rs.next())
				{
				remotedate=rs.getString("dateupdated");
				}
			
			Statement stmtu = con.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM packages_date");
			while(rsu.next())
				{
				localdate=rsu.getString("dateupdated");
				}
		out.println("Local Date: "+localdate+"<br>");	
		out.println("Remote Date: "+remotedate+"<br>");	

			int result=stmt.executeUpdate("DROP TABLE IF EXISTS packagecats;");
			result=stmt.executeUpdate("CREATE TABLE packagecats (catID int(11) NOT NULL auto_increment,catDesc text NOT NULL,adjper text NOT NULL,PRIMARY KEY  (catID),UNIQUE KEY catID_2 (catID),KEY catID (catID)) TYPE=MyISAM;");
			int result2=stmt.executeUpdate("DROP TABLE IF EXISTS package;");
			result2=stmt.executeUpdate("CREATE TABLE package (recID int(11) NOT NULL auto_increment,pkgID text NOT NULL,catID int(11) NOT NULL default '0',pkgDesc text NOT NULL,pkgLaborHours int(11) NOT NULL default '0',pkgPartsCost double(10,2) NOT NULL default '0.00',PRIMARY KEY  (recID),  UNIQUE KEY recID_2 (recID),KEY recID (recID)) TYPE=MyISAM COMMENT='Package Cost for Install';");

                Vector v;
                v = UniPkgCats.getAllItems(con,"x");
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniPkgCats t = (UniPkgCats) v.elementAt(i);
			String catdesc=t.getCatDesc();
			String adjper=t.getAdjPer();
			counter++;

                UniPkgCats.addPkgCat(conu, catdesc, adjper);
		}
		out.println("Package Category Records Written: "+counter+"<br>");

                Vector vv;
                vv = UniPkgItems.getAllItems(con);
                int countert=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                       UniPkgItems tt = (UniPkgItems) vv.elementAt(i);
			int catid=tt.getCatID();
			String pkgid=tt.getPkgID();
			String pkgdesc=tt.getPkgDesc();
			int pkglabor=tt.getPkgLaborHours();
			double pkgpartscost=tt.getPkgPartsCost();
			countert++;

                UniPkgItems.addPkgItem(conu, catid, pkgid, pkgdesc, pkglabor, pkgpartscost);
		}
		result = stmtu.executeUpdate("UPDATE packages_date set dateupdated='"+s+"';");
		out.println("Package Records Written: "+countert+"<br>");

		ResultSet rs4 = stmtu.executeQuery("SELECT * FROM packages_date");
		while(rs4.next())
			{
			String nlocaldate=rs4.getString("dateupdated");
			out.println("New Local Date: "+ nlocaldate +"<br>");
			}
		out.println("Package Records Written: "+countert+"<br>");
	} else {
		int result = stmt.executeUpdate("UPDATE packages_date set dateupdated='"+s+"';");
		out.println("You are on main server - Dates only updated.<br>");
		}	
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		con.close();
		conu.close();
	}

private void doUpdateUserInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String thismainserver=doGetThisMainServer();
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM packages_date");
		if (thismainserver.equalsIgnoreCase("no")) {
			while(rs.next())
				{
				remotedate=rs.getString("dateupdated");
				}
			
		out.println("Remote Date: "+remotedate+"<br>");	

			int result=stmt.executeUpdate("DROP TABLE IF EXISTS users;");
			result=stmt.executeUpdate("DROP TABLE IF EXISTS tech_table;");
			result=stmt.executeUpdate("DROP TABLE IF EXISTS configemail;");
			result=stmt.executeUpdate("CREATE TABLE users (login varchar(15) NOT NULL default '',passwd varchar(15) NOT NULL default '',role varchar(15) NOT NULL default '',idcode varchar(15) NOT NULL default '',PRIMARY KEY  (login)) ENGINE=MyISAM;");
			result=stmt.executeUpdate("CREATE TABLE tech_table (username text, tech_name text NOT NULL, techinit tinytext NOT NULL, truck_num text, nate_id text NOT NULL, allow_delete text NOT NULL, mod_airbal text NOT NULL, mod_install text NOT NULL, mod_servadmin text NOT NULL, serv_update text NOT NULL, create_worksheet text, edit_compphonelist text, servsync text, transmit int(11), department text NOT NULL) ENGINE=MyISAM;");
			result=stmt.executeUpdate("CREATE TABLE configemail (username text, tech_email text NOT NULL, time_email text NOT NULL, svc_email text NOT NULL, ins_email text NOT NULL, smtp_server text NOT NULL, prop_email text NOT NULL, stock_email text NOT NULL, semail_cat text NOT NULL, smtp_user text, smtp_password text) ENGINE=MyISAM;");

                Vector v;
                v = UniLogin.getAllItems(conu);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniLogin t = (UniLogin) v.elementAt(i);
			String ulogin=t.getULogin();
			String passwd=t.getPasswd();
			String idcode=t.getIdCode();
			String role=t.getRole();
			counter++;

                UniLogin.addUser(con, idcode,ulogin,role,passwd);
		}
		out.println("User Records Written: "+counter+"<br>");

                Vector vv;
                vv = UniEmailAdd.getAllItems(conu);
                int countert=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                       UniEmailAdd tt = (UniEmailAdd) vv.elementAt(i);
			String tech_email=tt.getTechEmail();
			String time_email=tt.getTimeEmail();
			String svc_email=tt.getSvcEmail();
			String ins_email=tt.getInsEmail();
			String smtpserver=tt.getSmtpServer();
			String prop_email=tt.getPropEmail();
			String stock_email=tt.getStockEmail();
			String stock_mail_cat=tt.getStockMailCat();
			String smtpuser=tt.getSmtpUser();
			String smtppassword=tt.getSmtpPassword();
			String lusername=tt.getUserName();
			countert++;

                UniEmailAdd.AddItem(con, tech_email, time_email, svc_email, ins_email, smtpserver, prop_email, stock_email, stock_mail_cat, smtpuser, smtppassword, lusername);
		}
		out.println("Email Records Written: "+countert+"<br>");


                Vector vi;
                vi = UniTechInfo.getAllItems(conu);
                int counteri=0;
                for (int i = 0 ; i < vi.size(); i++)
                {
                       UniTechInfo ti = (UniTechInfo) vi.elementAt(i);
			String tech_name =ti.getTechName();
			String tech_init=ti.getTechInit();
			String truck_num=ti.getTruckNum();
			String nate_id=ti.getNateID();
			String allow_delete=ti.getAllowDelete();
			String mod_airbal=ti.getModAirBal();
			String mod_install=ti.getModInstall();
			String mod_servadmin=ti.getModServAdmin();
			String serv_update=ti.getServUpdate();
			String create_worksheet=ti.getCreateWorksheet();
			String edit_compphonelist=ti.getEditCompPhoneList();
			String servsync=ti.getServSync();
			String lusername=ti.getUserName();
			String transmit=ti.getTransmit();
			String department=ti.getDepartment();
			counteri++;

                UniTechInfo.AddItem(con, tech_name, tech_init, truck_num, nate_id, allow_delete, mod_airbal, mod_install, mod_servadmin, serv_update, create_worksheet, edit_compphonelist, servsync, lusername, transmit, department);
		}
		out.println("Tech Records Written: "+counteri+"<br>");

	} else {
		out.println("You are on main server - can not update user records.<br>");

		}	

		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		con.close();
		conu.close();
	}

private void doUploadUserInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String thismainserver=doGetThisMainServer();
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = conu.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM packages_date");
		if (thismainserver.equalsIgnoreCase("no")) {
			while(rs.next())
				{
				remotedate=rs.getString("dateupdated");
				}
			
		out.println("Remote Date: "+remotedate+"<br>");	

			int result=stmt.executeUpdate("DROP TABLE IF EXISTS users;");
			result=stmt.executeUpdate("DROP TABLE IF EXISTS tech_table;");
			result=stmt.executeUpdate("DROP TABLE IF EXISTS configemail;");
			result=stmt.executeUpdate("CREATE TABLE users (login varchar(15) NOT NULL default '',passwd varchar(15) NOT NULL default '',role varchar(15) NOT NULL default '',idcode varchar(15) NOT NULL default '',PRIMARY KEY  (login)) ENGINE=MyISAM;");
			result=stmt.executeUpdate("CREATE TABLE tech_table (username text, tech_name text NOT NULL, techinit tinytext NOT NULL, truck_num text, nate_id text NOT NULL, allow_delete text NOT NULL, mod_airbal text NOT NULL, mod_install text NOT NULL, mod_servadmin text NOT NULL, serv_update text NOT NULL, create_worksheet text, edit_compphonelist text, servsync text, transmit int(11), department text NOT NULL) ENGINE=MyISAM;");
			result=stmt.executeUpdate("CREATE TABLE configemail (username text, tech_email text NOT NULL, time_email text NOT NULL, svc_email text NOT NULL, ins_email text NOT NULL, smtp_server text NOT NULL, prop_email text NOT NULL, stock_email text NOT NULL, semail_cat text NOT NULL, smtp_user text, smtp_password text) ENGINE=MyISAM;");

                Vector v;
                v = UniLogin.getAllItems(con);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniLogin t = (UniLogin) v.elementAt(i);
			String ulogin=t.getULogin();
			String passwd=t.getPasswd();
			String idcode=t.getIdCode();
			String role=t.getRole();
			counter++;

                UniLogin.addUser(conu, idcode,ulogin,role,passwd);
		}
		out.println("User Records Written: "+counter+"<br>");

                Vector vv;
                vv = UniEmailAdd.getAllItems(con);
                int countert=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                       UniEmailAdd tt = (UniEmailAdd) vv.elementAt(i);
			String tech_email=tt.getTechEmail();
			String time_email=tt.getTimeEmail();
			String svc_email=tt.getSvcEmail();
			String ins_email=tt.getInsEmail();
			String smtpserver=tt.getSmtpServer();
			String prop_email=tt.getPropEmail();
			String stock_email=tt.getStockEmail();
			String stock_mail_cat=tt.getStockMailCat();
			String smtpuser=tt.getSmtpUser();
			String smtppassword=tt.getSmtpPassword();
			String lusername=tt.getUserName();
			countert++;

                UniEmailAdd.AddItem(conu, tech_email, time_email, svc_email, ins_email, smtpserver, prop_email, stock_email, stock_mail_cat, smtpuser, smtppassword, lusername);
		}
		out.println("Email Records Written: "+countert+"<br>");


                Vector vi;
                vi = UniTechInfo.getAllItems(con);
                int counteri=0;
                for (int i = 0 ; i < vi.size(); i++)
                {
                       UniTechInfo ti = (UniTechInfo) vi.elementAt(i);
			String tech_name =ti.getTechName();
			String tech_init=ti.getTechInit();
			String truck_num=ti.getTruckNum();
			String nate_id=ti.getNateID();
			String allow_delete=ti.getAllowDelete();
			String mod_airbal=ti.getModAirBal();
			String mod_install=ti.getModInstall();
			String mod_servadmin=ti.getModServAdmin();
			String serv_update=ti.getServUpdate();
			String create_worksheet=ti.getCreateWorksheet();
			String edit_compphonelist=ti.getEditCompPhoneList();
			String servsync=ti.getServSync();
			String lusername=ti.getUserName();
			String transmit=ti.getTransmit();
			String department=ti.getDepartment();
			counteri++;

                UniTechInfo.AddItem(conu, tech_name, tech_init, truck_num, nate_id, allow_delete, mod_airbal, mod_install, mod_servadmin, serv_update, create_worksheet, edit_compphonelist, servsync, lusername, transmit, department);
		}
		out.println("Tech Records Written: "+counteri+"<br>");

	} else {
		out.println("You are on main server - can not update user records.<br>");

		}	

		out.println("<a href=\""+classdir+"UniCash?action=listtechinfo&adminok=1\">Continue</a></p>");
		printFooter(req,res,out,username);
	}

private void doUpdatePackages(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String thismainserver=doGetThisMainServer();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM packages_date");
			while(rs.next())
				{
				localdate=rs.getString("dateupdated");
				}
			
			Statement stmtu = conu.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM packages_date");
			while(rsu.next())
				{
				remotedate=rsu.getString("dateupdated");
				}
		out.println("Local Date: "+localdate+"<br>");	
		out.println("Remote Date: "+remotedate+"<br>");	

		if (doFormatDateComp(getDate(remotedate))> doFormatDateComp(getDate(localdate)))
			{
			out.println("Package Tables Need Updated<br>");
			int result=stmt.executeUpdate("DROP TABLE IF EXISTS packagecats;");
			result=stmt.executeUpdate("CREATE TABLE packagecats (catID int(11) NOT NULL auto_increment,catDesc text NOT NULL,adjper text NOT NULL,PRIMARY KEY  (catID),UNIQUE KEY catID_2 (catID),KEY catID (catID)) TYPE=MyISAM;");
			int result2=stmt.executeUpdate("DROP TABLE IF EXISTS package;");
			result2=stmt.executeUpdate("CREATE TABLE package (recID int(11) NOT NULL auto_increment,pkgID text NOT NULL,catID int(11) NOT NULL default '0',pkgDesc text NOT NULL,pkgLaborHours int(11) NOT NULL default '0',pkgPartsCost double(10,2) NOT NULL default '0.00',PRIMARY KEY  (recID),  UNIQUE KEY recID_2 (recID),KEY recID (recID)) TYPE=MyISAM COMMENT='Package Cost for Install';");

                Vector v;
                v = UniPkgCats.getAllItems(conu,"x");
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniPkgCats t = (UniPkgCats) v.elementAt(i);
			String catdesc=t.getCatDesc();
			String adjper=t.getAdjPer();
			counter++;

                UniPkgCats.addPkgCat(con, catdesc, adjper);
		}
		out.println("Package Category Records Written: "+counter+"<br>");

                Vector vv;
                vv = UniPkgItems.getAllItems(conu);
                int countert=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                       UniPkgItems tt = (UniPkgItems) vv.elementAt(i);
			int catid=tt.getCatID();
			String pkgid=tt.getPkgID();
			String pkgdesc=tt.getPkgDesc();
			int pkglabor=tt.getPkgLaborHours();
			double pkgpartscost=tt.getPkgPartsCost();
			countert++;

                UniPkgItems.addPkgItem(con, catid, pkgid, pkgdesc, pkglabor, pkgpartscost);
		}
		result = stmt.executeUpdate("UPDATE packages_date set dateupdated='"+s+"';");
		out.println("Package Records Written: "+countert+"<br>");

		ResultSet rs4 = stmt.executeQuery("SELECT * FROM packages_date");
		while(rs4.next())
			{
			String nlocaldate=rs4.getString("dateupdated");
			out.println("New Local Date: "+ nlocaldate +"<br>");
			}
			}
		//else if (remotedate.equals(localdate))
		else if (doFormatDateComp(getDate(remotedate))<=doFormatDateComp(getDate(localdate)))
			{
			out.println("Database up to date<br><br>");
			}
		
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		con.close();
		conu.close();
	}

private void doPhoneListToServ(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM phone_list_date");
			while(rs.next())
				{
				localdate=rs.getString("dateupdated");
				}
			
			Statement stmtu = conu.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM phone_list_date");
			while(rsu.next())
				{
				remotedate=rsu.getString("dateupdated");
				}
		out.println("Remote Date: "+remotedate+"<br>");	

			int result=stmtu.executeUpdate("DROP TABLE IF EXISTS phone_list;");
			int result2=stmtu.executeUpdate("CREATE TABLE phone_list (record_number int(11) NOT NULL auto_increment,name varchar(100) NOT NULL default '-', home_number varchar(100) default NULL,cell_number varchar(100) default NULL, direct_connect varchar(100) default NULL,truck_number varchar(100) default NULL,additional_number varchar(100) default NULL,PRIMARY KEY  (record_number,name)) ;");

                Vector v;
                v = UniPhoneList.getAllItems(con);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniPhoneList t = (UniPhoneList) v.elementAt(i);
                        int record_number  = t.getId();
                        String  name = t.getName();
                        String home_number = t.getHomeNumber();
                        String cell_number = t.getCellNumber();
			if (cell_number==null) { cell_number="-"; }
                        String direct_connect = t.getDirectConnect();
			if (direct_connect==null) { direct_connect="-"; }
                        String truck_number = t.getTruckNumber();
			if (truck_number==null) { truck_number="-"; }
                        String additional_number = t.getAdditionalNumber();
			if (additional_number==null) { additional_number="-"; }
		UniPhoneList.AddItem(conu, name, home_number, cell_number, direct_connect, truck_number, additional_number);
		counter++;
		result = stmtu.executeUpdate("UPDATE phone_list_date set dateupdated='"+s+"';");
		}
		out.println("Records Written: "+counter+"<br>");
		rs = stmtu.executeQuery("SELECT * FROM phone_list_date");
		while(rs.next())
			{
			String nlocaldate=rs.getString("dateupdated");
			out.println("New Remote Date: "+ nlocaldate +"<br>");
			}
			out.println("<br><h1><center>PLEASE CLOSE THIS WINDOWN AND THEN:<br><br>Make sure you now do an Update of the Phone List to Check your work<br></center></h1>");
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		con.close();
		conu.close();
	}

private void doUpdatePhoneList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM phone_list_date");
			while(rs.next())
				{
				localdate=rs.getString("dateupdated");
				}
			
			Statement stmtu = conu.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM phone_list_date");
			while(rsu.next())
				{
				remotedate=rsu.getString("dateupdated");
				}
		out.println("Local Date: "+localdate+"<br>");	
		out.println("Remote Date: "+remotedate+"<br>");	

		if (doFormatDateComp(getDate(remotedate))>doFormatDateComp(getDate(localdate)))
			{
			out.println("Needs Updated<br>");
			int result=stmt.executeUpdate("DROP TABLE IF EXISTS phone_list;");
			int result2=stmt.executeUpdate("CREATE TABLE phone_list (record_number int(11) NOT NULL auto_increment,name varchar(100) NOT NULL default '-', home_number varchar(100) default NULL,cell_number varchar(100) default NULL, direct_connect varchar(100) default NULL,truck_number varchar(100) default NULL,additional_number varchar(100) default NULL,PRIMARY KEY  (record_number,name)) ;");

                Vector v;
                v = UniPhoneList.getAllItems(conu);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniPhoneList t = (UniPhoneList) v.elementAt(i);
                        int record_number  = t.getId();
                        String  name = t.getName();
                        String home_number = t.getHomeNumber();
                        String cell_number = t.getCellNumber();
			if (cell_number==null) { cell_number="-"; }
                        String direct_connect = t.getDirectConnect();
			if (direct_connect==null) { direct_connect="-"; }
                        String truck_number = t.getTruckNumber();
			if (truck_number==null) { truck_number="-"; }
                        String additional_number = t.getAdditionalNumber();
			if (additional_number==null) { additional_number="-"; }
		UniPhoneList.AddItem(con, name, home_number, cell_number, direct_connect, truck_number, additional_number);
		counter++;
		result = stmt.executeUpdate("UPDATE phone_list_date set dateupdated='"+s+"';");
		}
		out.println("Records Written: "+counter+"<br>");
		rs = stmt.executeQuery("SELECT * FROM phone_list_date");
		while(rs.next())
			{
			String nlocaldate=rs.getString("dateupdated");
			out.println("New Local Date: "+ nlocaldate +"<br>");
			}
			}
		else if (doFormatDateComp(getDate(remotedate))<=doFormatDateComp(getDate(localdate)))
			{
			out.println("Database up to date<br><br>");
			}
		
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		con.close();
		conu.close();
	}

private void doUpdatePsPrices(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			printHeader(req, res, out, username);
			Statement stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT * FROM prevprices_date");
			while(rs.next())
				{
				localdate=rs.getString("dateupdated");
				}
			
			Statement stmtu = conu.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM prevprices_date");
			while(rsu.next())
				{
				remotedate=rsu.getString("dateupdated");
				}
		out.println("Local Date: "+localdate+"<br>");	
		out.println("Remote Date: "+remotedate+"<br>");	

		if (doFormatDateComp(getDate(remotedate))>doFormatDateComp(getDate(localdate)))
			{
			out.println("Needs Updated<br>");
			int result=stmt.executeUpdate("DROP TABLE IF EXISTS prevprices;");
			int result2=stmt.executeUpdate("CREATE TABLE prevprices (planrec int(11) NOT NULL auto_increment,descript text NOT NULL,tm_est decimal(10,2),yr1 decimal(10,2),yr2 decimal(10,2),yr3 decimal(10,2),PRIMARY KEY (planrec),UNIQUE planrec (planrec),KEY planrec_2 (planrec));");
                Vector v;
                v = UniPreventative.getAllItems(conu);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniPreventative t = (UniPreventative) v.elementAt(i);
                        int planrec  = t.getId();
                        String description= t.getDescription();
                        String tm_est = t.getTmEst();
                        String yr1 = t.getYr1();
                        String yr2 = t.getYr2();
                        String yr3 = t.getYr3();
			counter++;

                UniPreventative.addPreventative(con, description, tm_est, yr1, yr2, yr3);
		result = stmt.executeUpdate("UPDATE prevprices_date set dateupdated='"+s+"';");
		}
		out.println("Records Written: "+counter+"<br>");
		rs = stmt.executeQuery("SELECT * FROM prevprices_date");
		while(rs.next())
			{
			String nlocaldate=rs.getString("dateupdated");
			out.println("New Local Date: "+ nlocaldate +"<br>");
			}
			}
		else if (doFormatDateComp(getDate(remotedate))<=doFormatDateComp(getDate(localdate)))
			{
			out.println("Database up to date<br><br>");
			}
		
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		printFooter(req,res,out,username);
		con.close();
		conu.close();
	}


private void doUpdateCompInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String imagename  = req.getParameter("imagename");
		String imagewidth = req.getParameter("imagewidth");
		String imagehight = req.getParameter("imagehight");
		String compname = req.getParameter("compname");
		String complogo = req.getParameter("complogo");
		String compaddress = req.getParameter("compaddress");
		String compphone = req.getParameter("compphone");
		String enabcustomer = req.getParameter("enabcustomer");
		String useletterhead = req.getParameter("useletterhead");
		String reportemail = req.getParameter("reportemail");
		String yearenddate = req.getParameter("yearenddate");
		String laptopretentiontime=req.getParameter("laptopretentiontime");
		String nocustonlaptop=req.getParameter("nocustonlaptop");
		
                UniCompConfig.UpdateItem(con, imagename, imagewidth, imagehight, compname, complogo, compaddress, compphone, useletterhead, enabcustomer, reportemail,  doFormatDateDb(getDateDb(yearenddate)), laptopretentiontime, nocustonlaptop);
                
		out.println("Your item has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
		con.close();
            }


private void doUpdateResPsForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String psform  = req.getParameter("psform");
                ResPsForm.UpdateItem(con, psform);
                out.println("Your form has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
		con.close();
            }

private void SaveTechInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tnum = req.getParameter("tnum");
                String tname = req.getParameter("tname");
                String tinit  = req.getParameter("tinit");
		String nate_id = req.getParameter("nate_id");
		String allow_delete=req.getParameter("allow_delete");
		String mod_airbal=req.getParameter("mod_airbal");
		String mod_install=req.getParameter("mod_install");
		String mod_servadmin=req.getParameter("mod_servadmin");
		String serv_update=req.getParameter("serv_update");
		String create_worksheet=req.getParameter("create_worksheet");
		String edit_compphonelist=req.getParameter("edit_compphonelist");
		String servsync=req.getParameter("servsync");
		String lusername=req.getParameter("lusername");
		String transmit=req.getParameter("transmit");
		String department=req.getParameter("department");
                UniTechInfo.AddItem(con, tname, tinit, tnum,nate_id, allow_delete, mod_airbal, mod_install, mod_servadmin, serv_update, create_worksheet, edit_compphonelist, servsync, lusername, transmit, department);
                out.println("Your item has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=listtechinfo");
		con.close();
            }

private void doSaveTechInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tnum = req.getParameter("tnum");
                String tname = req.getParameter("tname");
                String tinit  = req.getParameter("tinit");
		String nate_id = req.getParameter("nate_id");
		String allow_delete=req.getParameter("allow_delete");
		String mod_airbal=req.getParameter("mod_airbal");
		String mod_install=req.getParameter("mod_install");
		String mod_servadmin=req.getParameter("mod_servadmin");
		String serv_update=req.getParameter("serv_update");
		String create_worksheet=req.getParameter("create_worksheet");
		String edit_compphonelist=req.getParameter("edit_compphonelist");
		String servsync=req.getParameter("servsync");
		String lusername=req.getParameter("lusername");
		String userpassword=req.getParameter("userpassword");
		String userrole=req.getParameter("userrole");
		String transmit=req.getParameter("transmit");
		String department=req.getParameter("department");
                UniTechInfo.AddItem(con, tname, tinit, tnum,nate_id, allow_delete, mod_airbal, mod_install, mod_servadmin, serv_update, create_worksheet, edit_compphonelist, servsync, lusername, transmit, department);
		UniLogin.addUser(con,tinit,lusername,userrole,userpassword);
                out.println("Your item has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=listtechinfo&adminok=1");
		con.close();
            }

private void doUpdateTechInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tnum = req.getParameter("tnum");
                String tname = req.getParameter("tname");
                String tinit  = req.getParameter("tinit");
		String nate_id = req.getParameter("nate_id");
		String allow_delete=req.getParameter("allow_delete");
		String mod_airbal=req.getParameter("mod_airbal");
		String mod_install=req.getParameter("mod_install");
		String mod_servadmin=req.getParameter("mod_servadmin");
		String serv_update=req.getParameter("serv_update");
		String create_worksheet=req.getParameter("create_worksheet");
		String edit_compphonelist=req.getParameter("edit_compphonelist");
		String servsync=req.getParameter("servsync");
		String lusername=req.getParameter("lusername");
		String userpassword=req.getParameter("userpassword");
		String userrole=req.getParameter("userrole");
		String transmit=req.getParameter("transmit");
		String department=req.getParameter("department");
		
                UniTechInfo.UpdateItem(con, tname, tinit, tnum,nate_id, allow_delete, mod_airbal, mod_install, mod_servadmin, serv_update, create_worksheet, edit_compphonelist, servsync, lusername, transmit, department);
		UniLogin.updateUser(con,tinit,lusername,userrole,userpassword);
                out.println("Your item has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=listtechinfo&adminok=1");
		con.close();
            }


private void doUpdateServerConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String servername = req.getParameter("servername");
                String lusername = req.getParameter("lusername");
                String password  = req.getParameter("password");
                String dbname  = req.getParameter("dbname");
		String mainservername = req.getParameter("mainservername");
                String mainusername = req.getParameter("mainusername");
                String mainpassword  = req.getParameter("mainpassword");
                String maindbname  = req.getParameter("maindbname");
		String thismainserver = req.getParameter("thismainserver");
                UniDbServer.UpdateItem(con, servername, lusername, password, dbname, mainservername, mainusername, mainpassword, maindbname, thismainserver);
                out.println("Your item has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
            }


private void doUpdateFrConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tlabperhour = req.getParameter("labperhour");
		Double labperhour = Double.valueOf(tlabperhour);
		String tpsdiscount = req.getParameter("psdiscount");
		Double psdiscount = Double.valueOf(tpsdiscount);
		String tmrdiscount = req.getParameter("mrdiscount");
		Double mrdiscount = Double.valueOf(tmrdiscount);
		String tcommarkup = req.getParameter("commarkup");
		Double commarkup = Double.valueOf(tcommarkup);
		String tsalestax = req.getParameter("salestax");
		Double salestax = Double.valueOf(tsalestax);
		String tpartmarkup = req.getParameter("partmarkup");
		Double partmarkup = Double.valueOf(tpartmarkup);
		String tsitemlowprice = req.getParameter("sitemlowprice");
		Double sitemlowprice = Double.valueOf(tsitemlowprice);
		String tsitemhighprice = req.getParameter("sitemhighprice");
		Double sitemhighprice = Double.valueOf(tsitemhighprice);
		String tsitemhighhours = req.getParameter("sitemhighhours");
		Double sitemhighhours = Double.valueOf(tsitemhighhours);

                FlatRateConfig.UpdateItem(con, tlabperhour, tpsdiscount, tmrdiscount, tcommarkup, tsalestax, tpartmarkup, tsitemlowprice, tsitemhighprice, tsitemhighhours);

                out.println("Your item has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
            }

private void doDownloadFrConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

			Format formatter;	
			Calendar now = Calendar.getInstance();
        		Date date = new Date(); 
			formatter = new SimpleDateFormat("yyyy-MM-dd");
			String s = formatter.format(date);
			String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String localdate=null;
			String remotedate=null;
			String thismainserver=doGetThisMainServer();
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);

			double labperhour = 0.00;
			double psdiscount = 0.00;
			double mrdiscount = 0.00;
			double commarkup = 0.00;
			double salestax = 0.00;
			double partmarkup = 0.00;
			double sitemlowprice = 0.00;
			double sitemhighprice = 0.00;
			double sitemhighhours=0.00;

                Vector v;
                v = FlatRateConfig.getAllItems(conu);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                      labperhour   = t.getLabPerHour();
		      psdiscount = t.getPsDiscount();
		      mrdiscount = t.getMrDiscount();
		      commarkup = t.getComMarkup();
		      salestax  = t.getSalesTax();
		      partmarkup = t.getPartMarkup();
		      sitemlowprice = t.getSitemLowPrice();
		      sitemhighprice = t.getSitemHighPrice();
		      sitemhighhours = t.getSitemHighHours();
                }

			Statement stmt = conu.createStatement();
			Statement stmtl = con.createStatement();

			ResultSet rs = stmt.executeQuery("SELECT * FROM packages_date");
		if (thismainserver.equalsIgnoreCase("no")) {
			while(rs.next())
				{
				remotedate=rs.getString("dateupdated");
				}
		out.println("Package Remote Date: "+remotedate+"<br>Server Present<br>");	

			int result=stmtl.executeUpdate("DROP TABLE IF EXISTS flatrateconfig;");
			int result2=stmtl.executeUpdate("CREATE TABLE flatrateconfig ( labperhour decimal(10,2), psdiscount decimal(10,2), mrdiscount decimal(10,2), commarkup decimal(10,2), salestax decimal(10,2), partmarkup decimal(10,2), sitemlowprice decimal(10,2), sitemhighprice decimal(10,2), sitemhighhours decimal(10,2))");

			int result4 = stmtl.executeUpdate("insert into flatrateconfig (labperhour, psdiscount, mrdiscount, commarkup, salestax, partmarkup, sitemlowprice, sitemhighprice, sitemhighhours) values ('"+labperhour+"', '"+psdiscount+"', '"+mrdiscount+"', '"+commarkup+"', '"+salestax+"', '"+partmarkup+"', '"+sitemlowprice+"', '"+sitemhighprice+"', '"+sitemhighhours+"');");
			} else {
		out.println("You are on main server - Dates only updated.<br>");
		}	
		out.println("<a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		conu.close();
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
            }

private void doUpdateWsConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String laborcost = req.getParameter("laborcost");
		Double tlaborcost = Double.valueOf(laborcost);
                String partmult = req.getParameter("partmult");
		Double tpartmult = Double.valueOf(partmult);
                String labmult = req.getParameter("labmult");
		Double tlabmult = Double.valueOf(labmult);
                String markupdiv = req.getParameter("markupdiv");
		Double tmarkupdiv = Double.valueOf(markupdiv);
                String gptolabor = req.getParameter("gptolabor");
		String propprice = req.getParameter("propprice");
		Double tgptolabor = Double.valueOf(gptolabor);
		String crewbillable = req.getParameter("crewbillable");
                UniWsConfig.UpdateItem(con, laborcost, partmult, markupdiv, gptolabor, propprice, crewbillable,labmult);
                out.println("Your item has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
            }

private void doSaveEmailInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tech_email = req.getParameter("tech_email");
                String time_email = req.getParameter("time_email");
                String svc_email  = req.getParameter("svc_email");
                String ins_email  = req.getParameter("ins_email");
                String prop_email  = req.getParameter("prop_email");
                String stock_email  = req.getParameter("stock_email");
                String smtpserver  = req.getParameter("smtpserver");
                String smtpuser  = req.getParameter("smtpuser");
                String smtppassword  = req.getParameter("smtppassword");
                String lusername  = req.getParameter("lusername");
                String stock_mail_cat  = req.getParameter("stock_mail_cat");
                UniEmailAdd.AddItem(con, tech_email, time_email, svc_email, ins_email, smtpserver, prop_email, stock_email, stock_mail_cat, smtpuser, smtppassword, lusername);
                out.println("Your item has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=listtechinfo&adminok=1");
            }

private void doUpdateEmailInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tech_email = req.getParameter("tech_email");
                String time_email = req.getParameter("time_email");
                String svc_email  = req.getParameter("svc_email");
                String ins_email  = req.getParameter("ins_email");
                String prop_email  = req.getParameter("prop_email");
                String stock_email  = req.getParameter("stock_email");
                String smtpserver  = req.getParameter("smtpserver");
                String smtpuser  = req.getParameter("smtpuser");
                String smtppassword  = req.getParameter("smtppassword");
                String lusername  = req.getParameter("lusername");
                String stock_mail_cat  = req.getParameter("stock_mail_cat");
                UniEmailAdd.UpdateItem(con, tech_email, time_email, svc_email, ins_email, smtpserver, prop_email, stock_email, stock_mail_cat, smtpuser, smtppassword, lusername);
                out.println("Your item has been updated in the database<br>");
                res.sendRedirect(""+classdir+"UniCash?action=listtechinfo&adminok=1");
            }

//ADMIN FUNCTION
//
private void doEditServerConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String servername=null;
	String lusername=null;
	String password=null;
	String dbname=null;
	servername = doGetDbServer();
	password = doGetDbPassword();
	lusername = doGetDbUser();
	dbname = doGetDbName();

	String mainservername=null;
	String mainusername=null;
	String mainpassword=null;
	String maindbname=null;
	String thismainserver=null;
	mainservername = doGetMainServer();
	mainpassword = doGetMainPassword();
	mainusername = doMainDbUser();
	maindbname = doMainDbName();
	thismainserver=doGetThisMainServer();

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Server Information</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateserverconfig\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Update Server Name :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"servername\" size=\"40\" value=\""+ servername+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Update User Name:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"lusername\" size=\"40\" value=\""+lusername +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Update Server Password  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"password\" size=\"40\" value=\""+password +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Update DB Name  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"dbname\" size=\"40\" value=\""+dbname +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Main Server Name :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mainservername\" size=\"40\" value=\""+ mainservername+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Main  User Name:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mainusername\" size=\"40\" value=\""+mainusername +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Main Server Password  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mainpassword\" size=\"40\" value=\""+mainpassword +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Main DB Name  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"maindbname\" size=\"40\" value=\""+maindbname +"\">");
	out.println("</td></tr><tr><td>");
	out.println("This Main Server :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"thismainserver\" size=\"40\" value=\""+thismainserver+"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	}


//ADMIN FUNCTION
//
private void doEditEmailTruckCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String tech_email=null;
	String smtpserver=null;
	String time_email=null;
	String svc_email=null;
	String ins_email=null;
	String prop_email=null;
	String stock_email=null;

	tech_email = doGetTech_Email(username);
	time_email = doGetTime_Email(username);
	svc_email = doGetSvc_Email(username);
	ins_email = doGetIns_Email(username);
	prop_email = doGetProp_Email(username);
	stock_email = doGetStock_Email(username);
	smtpserver = doGetSmtpServer(username);

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Truck Stock Category</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateemailinfo\" name=\"addcust\">");
	out.println("<INPUT TYPE=hidden name=tech_email value=\""+tech_email+"\" ");
	out.println("<INPUT TYPE=hidden name=time_email value=\""+time_email+"\" ");
	out.println("<INPUT TYPE=hidden name=svc_email value=\""+svc_email+"\" ");
	out.println("<INPUT TYPE=hidden name=ins_email value=\""+ins_email+"\" ");
	out.println("<INPUT TYPE=hidden name=prop_email value=\""+prop_email+"\" ");
	out.println("<INPUT TYPE=hidden name=stock_email value=\""+stock_email+"\" ");
	out.println("<INPUT TYPE=hidden name=smtpserver value=\""+smtpserver+"\" ");
	
	out.println("<table>");
	out.println("<th>Cat Number</th><th>Category Name</th>");

                Vector v;
                v = UniInvCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniInvCat t = (UniInvCat) v.elementAt(i);
                      	int CatNum = t.getCatnum();
                        String description = t.Description();
                        String category = t.Category();
                        out.println("<tr><td>");
                        out.println(""+CatNum+"</td><td>"+category+"</td>");
                        out.println("</tr>");
                }



	out.println("</table><br>");
	String stock_mail_cat = doGetStockMailCat(username);
	out.println("<b>Select which categories to send truck requests for (1,2,3,4):</b><br>");
	out.println("<INPUT TYPE=text name=stock_mail_cat value=\""+stock_mail_cat+"\" ");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	}


private void doEditFlatRateConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	double labperhour= 0.00;
	double psdiscount = 0.00;
	double mrdiscount = 0.00;
	double commarkup = 0.00;
	double salestax= 0.00;
	double partmarkup=0.00;
	double sitemlowprice=0.00;
	double sitemhighprice=0.00;
	double sitemhighhours=0.00;
	labperhour = doLabPerHour();
	psdiscount = doPsDiscount();
	mrdiscount = doMrDiscount();
	commarkup = doComMarkUp();
	partmarkup = doPartMarkUp();
	salestax = doSalesTax();
	sitemlowprice=doSitemLowPrice();
	sitemhighprice=doSitemHighPrice();
	sitemhighhours=doSitemHighHours();

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Flat Rate Config</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatefrconfig\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Labor per Hour  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"labperhour\" size=\"40\" value=\""+labperhour+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Part Markup:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"partmarkup\" size=\"40\" value=\""+partmarkup+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Sales Tax  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"salestax\" size=\"40\" value=\""+salestax+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Planned Service Discount  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"psdiscount\" size=\"40\" value=\""+psdiscount+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Multi-Repair Discount:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mrdiscount\" size=\"40\" value=\""+mrdiscount+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Special Items High Price:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"sitemhighprice\" size=\"40\" value=\""+sitemhighprice+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Special Items Low Price:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"sitemlowprice\" size=\"40\" value=\""+sitemlowprice+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Special Items Max Hours:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"sitemhighhours\" size=\"40\" value=\""+sitemhighhours+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Commercial Markup:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"commarkup\" size=\"40\" value=\""+commarkup+"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"UpdateServer\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	}

private void doEditWsConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

	double laborcost= 0.00;
	double partmult = 0.00;
	double labmult = 0.00;
	double markupdiv = 0.00;
	double gptolabor = 0.00;
	String propprice = null;
	double crewbillable = 0.00;

	laborcost = doGetLaborCost();
	partmult = doGetPartMult();
	labmult = doGetLabMult();
	markupdiv  = doGetMarkUpDiv();
	gptolabor = doGetGpToLabor();
	propprice = doGetPropPrice();
	crewbillable = doGetCrewBillable();	

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit WorkSheet Config</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatewsconfig\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Labor Cost        :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"laborcost\" size=\"40\" value=\""+ laborcost+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Part Multiplier  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"partmult\" size=\"40\" value=\""+partmult +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Labor Multiplier  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"labmult\" size=\"40\" value=\""+labmult +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Mark Up Diviser  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"markupdiv\" size=\"40\" value=\""+markupdiv +"\">");

	out.println("</td></tr><tr><td>");
	out.println("Gross Profit to Labor Check  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"gptolabor\" size=\"40\" value=\""+gptolabor +"\">");


	out.println("</td></tr><tr><td>");
	out.println("Billing Per Crew Day  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"crewbillable\" size=\"40\" value=\""+crewbillable +"\">");

	out.println("</td></tr><tr><td>");
	out.println("Print Price on Proposal  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"propprice\" size=\"40\" value=\""+propprice +"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	}
	
private void doUploadRateServer(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String slaborrate= req.getParameter("slaborrate");
	String spartmult = req.getParameter("spartmult");
	String stotalmult = req.getParameter("stotalmult");
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);	
	UniRateInfo.SyncServer(conu,con);
	res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
	}

private void doDownloadRateServer(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String slaborrate= req.getParameter("slaborrate");
	String spartmult = req.getParameter("spartmult");
	String stotalmult = req.getParameter("stotalmult");
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);	
	UniRateInfo.SyncServer(con,conu);
	res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
	}

	
private void doSaveRateConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

	String slaborrate= req.getParameter("slaborrate");
	String spartmult = req.getParameter("spartmult");
	String stotalmult = req.getParameter("stotalmult");
	UniRateInfo.UpdateItem(con,spartmult,slaborrate,stotalmult);
	res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
	}
	
private void doEditRateConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

	String slaborrate= "0.00";
	String spartmult = "0.00";
	String stotalmult = "0.00";
	Vector v;
        v = UniRateInfo.getAllItems(con);
	int counter=0;
        for (int i = 0 ; i < v.size(); i++)
                {
                UniRateInfo t = (UniRateInfo) v.elementAt(i);
		slaborrate=t.getLaborRate();
		spartmult=t.getPartMult();
		stotalmult=t.getTotalMult();
                }

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Rate Config</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updaterateconfig\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Labor Rate        :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"slaborrate\" size=\"40\" value=\""+ slaborrate+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Part Multiplier  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"spartmult\" size=\"40\" value=\""+ spartmult +"\">");
	out.println("Total Multuplier  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"stotalmult\" size=\"40\" value=\""+ stotalmult +"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	String thismainserver=doGetThisMainServer();
	if (!thismainserver.equalsIgnoreCase("yes")) {	
	out.println("<br><table border=1>");
	out.println("<tr><td>Labor Rate</td><td>"+slaborrate+"</td></tr>");
	out.println("<tr><td>Part Multiplier</td><td>"+slaborrate+"</td></tr>");
	out.println("<tr><td>Total Multiplier</td><td>"+stotalmult+"</td></tr>");
	out.println("</table>");
	out.println("<br><a href="+classdir+"UniCash?action=updaterateserver&slaborrate="+slaborrate+"&spartmult="+spartmult+"&stotalmult="+stotalmult+">Upload to Server  - MUST HAVE INTERNET CONNECT</a>");
	out.println("");
	}
	}

	
	

//ADMIN FUNCTION
//
private void doEditEmailInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String lusername=req.getParameter("tsid");
	String tech_email=null;
	String smtpserver=null;
	String smtpuser=null;
	String smtppassword=null;
	String time_email=null;
	String svc_email=null;
	String ins_email=null;
	String prop_email=null;
	String stock_email=null;
	String stock_mail_cat = doGetStockMailCat(lusername);
	tech_email = doGetTech_Email(lusername);
	time_email = doGetTime_Email(lusername);
	svc_email = doGetSvc_Email(lusername);
	ins_email = doGetIns_Email(lusername);
	prop_email = doGetProp_Email(lusername);
	stock_email = doGetStock_Email(lusername);
	smtpserver = doGetSmtpServer(lusername);
	smtpuser = doGetSmtpUser(lusername);
	smtppassword = doGetSmtpPassword(lusername);

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Email Information</title>");
	out.println("</head>");

	if (tech_email!=null) {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateemailinfo\" name=\"addcust\">");
			} else {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveemailinfo\" name=\"addcust\">");
			}
	out.println("<INPUT TYPE=hidden name=stock_mail_cat value=\""+stock_mail_cat+"\" ");
	out.println("<table><tr><td>");
	out.println("Technician Email        :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"tech_email\" size=\"40\" value=\""+ tech_email+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Time Email  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"time_email\" size=\"40\" value=\""+time_email +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Service Email  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"svc_email\" size=\"40\" value=\""+svc_email +"\">");

	out.println("</td></tr><tr><td>");
	out.println("Inspection Email  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"ins_email\" size=\"40\" value=\""+ins_email +"\">");

	out.println("</td></tr><tr><td>");
	out.println("Stock Request Email  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"stock_email\" size=\"40\" value=\""+stock_email +"\">");

	out.println("</td></tr><tr><td>");
	out.println("Proposal Email  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"prop_email\" size=\"40\" value=\""+prop_email +"\">");
	out.println("</td></tr><tr><td>");
	out.println("SMTP Server  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"smtpserver\" size=\"40\" value=\""+smtpserver +"\">");
	out.println("</td></tr><tr><td>");
	out.println("SMTP Server User ID :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"smtpuser\" size=\"40\" value=\""+smtpuser +"\">");
	out.println("</td></tr><tr><td>");
	out.println("SMTP Server Password :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"smtppassword\" size=\"40\" value=\""+smtppassword +"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"hidden\" NAME=\"lusername\" VALUE=\""+lusername+"\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	}

//ADMIN FUNCTION
//
private void doEditCompInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String imagename=null;
		String imagewidth=null;
		String imagehight=null;
		String compname=null;
		String complogo=null;
		String compaddress=null;
		String compphone=null;
		String useletterhead=null;
		String enabcustomer=null;
		String reportemail=null;
		String yearenddate=null;
		String laptopretentiontime=null;
		String nocustonlaptop=null;
                Vector v;
                v = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCompConfig t = (UniCompConfig) v.elementAt(i);
			imagename=t.getImage();
			imagewidth=t.getImageWidth();
			imagehight=t.getImageHight();
			compname=t.getCoName();
			complogo=t.getCoLogo();
			compaddress=t.getCoAddress();
			compphone=t.getCoPhone();
			useletterhead=t.getUseLetterHead();
			enabcustomer=t.getEnabCustomer();
			reportemail=t.getReportEmail();
			yearenddate=t.getYearEndDate();
			laptopretentiontime=t.getLaptopRetentionTime();
			nocustonlaptop=t.getNoCustOnLaptop();
		}

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Company Information</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatecompinfo\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Company Logo Location  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"imagename\" size=\"40\" value=\""+imagename +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Image Width  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"imagewidth\" size=\"40\" value=\""+imagewidth +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Image Height  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"imagehight\" size=\"40\" value=\""+imagehight +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Customers on Laptops (yes or no):");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"nocustonlaptop\" size=\"40\" value=\""+nocustonlaptop+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Laptop Retention Time  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"laptopretentiontime\" size=\"40\" value=\""+laptopretentiontime+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Report Email Address  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"reportemail\" size=\"80\" value=\""+reportemail +"\">");
	out.println("</td></tr><tr>");
	out.println("<td>Use Letterhead:</td>");
	out.println("<td align=\"left\"><select width=\"50\" name=\"useletterhead\">");
               v = SupYesNo.getAllItems(con);
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupYesNo t = (SupYesNo) v.elementAt(i);
		out.println("<option value="+t.getAnswer()+">"+t.getAnswer()+"</option>");

		}
		out.println("<option selected>"+useletterhead+"</option>");
		out.println("</select></td></tr>");
	out.println("<tr>");
	out.println("<td>Allow Customer Access:</td>");
	out.println("<td align=\"left\"><select width=\"50\" name=\"enabcustomer\">");
               v = SupYesNo.getAllItems(con);
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupYesNo t = (SupYesNo) v.elementAt(i);
		out.println("<option value="+t.getAnswer()+">"+t.getAnswer()+"</option>");

		}
		out.println("<option selected>"+enabcustomer+"</option>");
		out.println("</select></td></tr>");
		
	out.println("<tr><td>");
	out.println("Company Phone  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"compphone\" size=\"40\" value=\""+compphone +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Company Name        :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"compname\" size=\"40\" value=\""+ compname+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Company Logo  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"complogo\" size=\"40\" value=\""+complogo +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Company Address  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"compaddress\" size=\"40\" value=\""+compaddress +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Company Year End Date  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"yearenddate\" size=\"40\" value=\""+doFormatDate(getDate(yearenddate)) +"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	}
//ADMIN FUNCTION
//
private void doEditResPsForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String psform=null;
                Vector v;
                v = ResPsForm.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	ResPsForm t = (ResPsForm) v.elementAt(i);
			psform=t.getResPsForm();
		}

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Residential Planned Service Form</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updaterespsform\" name=\"updateform\">");
	out.println("<table><tr><td>");
	out.println("PS Form</td></tr><tr><td>");
	out.println("<textarea name=\"psform\" cols=\"70\" rows=\"50\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+psform+"</textarea>");
		
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	}

//ADMIN FUNCTION LOGIN
//
private void doLoginAdminUser(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String next_page, String username)
                throws Exception
        {
	/* out.println("<html>");
	out.println("<head>");
	out.println("<title>Login Admin User</title>");
	out.println("</head>");
	out.println("<h4>All admin user access is logged. You must enter valid password to procede</h4><br>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=checkadminuser\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Password        :");
	out.println("</td><td>");
	out.println("<input type=\"password\" name=\"apasswd\" size=\"40\" >");
	out.println("</td></tr><tr><td>");
	out.println("</td></tr></table>");
	out.println("<input type=\"hidden\" name=\"next_page\" size=\"40\" value=\""+ next_page+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Login\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	*/

        res.sendRedirect(""+classdir+"UniCash?action=checkadminuser&next_page="+next_page+"");
	}

private void doCustomerRequest(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		doVersionInfo_VNumber();
		String action = req.getParameter("action");
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Customer Service Request</title>");
	out.println("</head><table border=0><tr><td valign=\"top\" width=\"50%\">");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=checkcustomer\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Last Name<br>Business Name:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"lname\" size=\"20\" >");
	out.println("</td></tr><tr><td>");
	out.println("First Name:<br>(Leave blank if business)");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"fname\" size=\"20\" >");
	out.println("</td></tr><tr><td>");
	out.println("Phone Number (example: 508-555-1212)    :");
	out.println("</td><td>");
	out.println("<input type=\"phone\" name=\"phonenumber\" size=\"20\" >");
	out.println("</td></tr><tr><td>");
	out.println("Zip Code (example: 06279)    :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"zipcode\" size=\"5\" >");
	out.println("</td></tr><tr><td>");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Login\">");
	out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
	out.println("</form></td><td>");

		String imagename=null;
		String imagewidth=null;
		String imagehight=null;
		String compname=null;
		String complogo=null;
		String compaddress=null;
		String compphone=null;

                Vector v;
                v = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCompConfig t = (UniCompConfig) v.elementAt(i);
			imagename=t.getImage();
			imagewidth=t.getImageWidth();
			imagehight=t.getImageHight();
			compname=t.getCoName();
			complogo=t.getCoLogo();
			compaddress=t.getCoAddress();
			compphone=t.getCoPhone();
		}
            
    out.println("<HTML>");
out.println("<HEAD>");
out.println("        <META HTTP-EQUIV=\"CONTENT-TYPE\" CONTENT=\"text/html; charset=iso-8859-1\">");
 out.println("       <TITLE>Servsys Login</TITLE>");
out.println("</HEAD>");
out.println("<BODY TEXT=\"#000000\" LINK=\"#0000ff\" VLINK=\"#000080\" BGCOLOR=\"#ffffff\">");

out.println("<TABLE WIDTH=100% BORDER=0 CELLPADDING=4 CELLSPACING=0>");
	out.println("<THEAD>");
		out.println("<TR>");
			out.println("</TD>");
			out.println("<TD WIDTH=30% VALIGN=TOP>");
				out.println("<P><IMG SRC=\""+imagename+"\" NAME=\"Graphic1\" ALIGN=CENTER WIDTH="+imagewidth+" HEIGHT="+imagehight+" BORDER=0><BR CLEAR=LEFT><BR>");
				out.println("</P>");
			out.println("</TD>");
			out.println("<TD WIDTH=50% ALIGN=LEFT>");
			//out.println("<h2><i>Service Entry and Reporting System</i></h2>");
			out.println("</TD>");
		out.println("</TR>");
	out.println("</THEAD>");
out.println("</TABLE>");
out.println("</BODY>");
out.println("</HTML>");
out.println("<br><br><br><br><CENTER>");
out.println("(C) Copyright 2002-2010 - Our World Services, LLC<br>");
//out.println("<br>Version: "+doVersionInfo_VNumber()+" - Compiled: "+doFormatDate(getDate(doVersionInfo_VDate()))+"<br>");
//out.println("<br>Software Expire Date: "+doFormatDate(getDate(doGetExpireDate()))+"<br>");
//out.println("<br>Software Expire Date has been removed for GPL version.<br>");
//out.println("<br>Source code per the GPL can be found on sourceforge.net or at servsys.org<br>");
out.println("<br><br><br>For assistance with this product please contact:<br>Chris Molnar<br>860-798-7032<br>molnarc@mac.com");
//out.println("<br><br><br><P><IMG SRC=\""+Gwebhome+"MacOS_Pnthr_Vert_v1.gif\" NAME=\"Graphic1\" ALIGN=CENTER WIDTH=50 HEIGHT=60 BORDER=0><BR CLEAR=LEFT><BR>");
//out.println("Developed on Mac OS/X for all platforms<br>");
/* #system("uptime"); */

	out.println("</CENTER>");
		con.close();
	}

private void doCheckCustomer(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		
		String action = req.getParameter("action");
		String lname = req.getParameter("lname");
		String fname = req.getParameter("fname");
		String phonenumber = req.getParameter("phonenumber");
		String zipcode=req.getParameter("zipcode");
		String cname1=null;
		String address1=null;
		String address2=null;
		String city=null;
		String state=null;
		String zip=null;
		String homephone=null;
		String altphone=null;
		String custsite=null;
		String sitenum=null;
		String crecnum=null;
		
		String cname = "";
		if (fname.length() > 1 ) {
		cname = combinestring(cname, lname+", ");
		cname = combinestring(cname, fname);
		} else {
		cname = combinestring(cname, lname);
		}
		
		Vector v;
                v = UniCustomer.getAllItems(con, cname, phonenumber, zipcode);
		
		if (v.size() == 0) {
		// put form for no customer found - enter remainder of information
		out.println("No Information found<br>");
		// send to a new customer form.
		  res.sendRedirect(""+classdir+"UniCash?action=custaddform");
		
		} else {
		
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			address1=t.getAddress1();
			address2=t.getAddress2();
			crecnum=t.getCusNum();
			custsite=t.getCustSite();
			sitenum=t.getSiteNum();
		}
		
		// show customer information found - ask if correct
		out.println("<html><body><h2>I believe we have serviced this location before.</h2><br><br>");
		out.println("<h2>I have your address as: "+address1+" "+address2+"<br><br></h2>");
		out.println("<h2>Is this correct?<h2><br>");
		out.println("<h2><a href="+classdir+"UniCash?action=addservicerequest&custsite="+custsite+"&sitenum="+sitenum+"&crecnum="+crecnum+">Yes</a></h2><br>");
		out.println("<h2><a href="+classdir+"UniCash?action=custaddform>No</a></h2><br>");
		}
		
	}
	
 private void doCustAddForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Customer</title>");
	out.println("</head>");
	out.println("<h2>Please complete the following form. Make sure the address and phone number are correct and then press save.</h2>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savecustaddform\" name=\"custform\">");
	out.println("<table><tr><td>");
	out.println("Customer Name<br>   (Business or Last, First)    :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"cname\" size=\"40\">");
	out.println("</td></tr><tr><td>");
	out.println("Address  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"address1\" size=\"40\">");
	out.println("</td></tr><tr><td>");
	out.println("Address  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"address2\" size=\"40\">");
	out.println("</td></tr><tr><td>");
	out.println("City     :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"city\" size=\"40\">");
	out.println("</td></tr><tr><td>");
	out.println("State    :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"state\" size=\"3\">");
	out.println("</td></tr><tr><td>");
	out.println("Zip Code :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"zip\" size=\"10\">");
	out.println("</td></tr><tr><td>");
	out.println("Primary Phone:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"homephone\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Alt Phone :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"altphone\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Email Address :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"cemail\" size=\"50\">");
	//out.println("</td></tr><tr><td>");
	//out.println("Customer Number :");
	//out.println("</td><td>");
	//out.println("<input type=\"text\" name=\"custsite\" size=\"15\">");
	//out.println("</td></tr><tr><td>");
	//out.println("Site Number :");
	//out.println("</td><td>");
	//out.println("<input type=\"text\" name=\"sitenum\" size=\"15\">");
	//out.println("</td></tr><tr><td>");
	//out.println("Customer Type (T=T/M, F=Full) :");
	//out.println("</td><td>");
	//out.println("<input type=\"text\" name=\"custtype\" size=\"15\">");
	//out.println("</td></tr><tr><td>");
	//out.println("Customer Notes :");
	//out.println("</td><td>");
	//out.println("<input type=\"text\" name=\"cust_notes\" size=\"80\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	con.close();
	}
		

private void doSaveCustAddForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String custstart = req.getParameter("custstart");
                String custstop = req.getParameter("custstop");
                String cname = req.getParameter("cname");
                String address1 = req.getParameter("address1");
                String address2 = req.getParameter("address2");
                String city = req.getParameter("city");
                String custtype = req.getParameter("custtype");
		custtype="T";
                String state = req.getParameter("state");
                String zip = req.getParameter("zip");
                String homephone = req.getParameter("homephone");
                String altphone = req.getParameter("altphone");
                String cust_notes = req.getParameter("cust_notes");
		cust_notes="Added from a customer request";
                String cemail = req.getParameter("cemail");
                //String custsite = req.getParameter("custsite");
                //String sitenum = req.getParameter("sitenum");
		// get date in YYYYMMDD format
		if ((cname.length()<=1)||(address1.length()<=1)||(homephone.length()<=7)) {
			out.println("<h2>You either did not complete<br>1) Name<br>2) Address<br>3)Phone Number<br><br>Please use your back key on the browser and correct problem.<br>");
		} else {
		Format formatter;	
		Calendar now = Calendar.getInstance();
		Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyyMMdd");
		String s = formatter.format(date);
		// get max customer number and add 1
		int highrecnum = UniCustomer.getMaxID(con);
		highrecnum++;
		// String combine the max customer number and date to get custsite
		String custsite=combinestring(s,""+highrecnum+"");
		String sitenum="001";
		out.println("Custsite: "+custsite+"<br>Sitenum: "+sitenum+"<br>");
                UniCustomer.addCustomer(con, cname, address1, address2, city, state, zip, homephone, altphone, cust_notes,cemail,custsite,sitenum,custtype);
                // Now get new max customer record and this is crecnum
		int newcustrec = UniCustomer.getMaxID(con);
		out.println("Your item has been added to the database");
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=addservicerequest&custsite="+custsite+"&sitenum="+sitenum+"&crecnum="+newcustrec+"");
		}
            }

private void doAddServiceRequest(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String custsite=req.getParameter("custsite");
	String sitenum=req.getParameter("sitenum");
	String tcustnum=req.getParameter("crecnum");
		Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String collected="0.00";
	String charges="0.00";
        int custnum = Integer.parseInt(tcustnum);
        int eenum=0;
        int ecustnum=0;
        String brand=null;
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Customer Request</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savecustcallslip&custnum="+custnum+"\" name=\"addcat\">");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>"+s+"");
	out.println("<input type=\"hidden\" name=\"cdate\" value="+s+"></td>");
	out.println("</tr>");
	out.println("<tr><td>Please Enter Your Initials</td><td>");
	out.println("<input type=\"text\" name=\"custinits\" ></td>");
	out.println("</tr>");
	out.println("<tr><td>Reason</td><td>");
	out.println("<SELECT  name=\"reason\">");
	out.println("<OPTION>Air Conditioning - System Down");
	out.println("<OPTION>Air Conditioning - Maintenance Needed");
	out.println("<OPTION>Heating - System Down");
	out.println("<OPTION>Heating - Maintenance Needed");
	out.println("<OPTION>Refrigeration - System Down");
	out.println("<OPTION>Refrigeration - Maintenance Needed");
	out.println("<OPTION>Sales Quote - New Equipment");
	out.println("<OPTION>Sales Quote - Equipment Replacement");
	out.println("<OPTION>Indoor Air Quality - Inspection");
	out.println("<OPTION>Indoor Air Quality - Problem");
	out.println("<OPTION>Other - Please call");	
	out.println("</SELECT></td></tr>");
	out.println("<tr><td>Please describe problem or request with as much detail as possible:</td><td>");
	out.println("<textarea name=\"services\" cols=\"60\" rows=\"8\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea></td></tr>");
	out.println("<input type=\"hidden\" name=\"custsite\" value=\""+custsite+"\">");
	out.println("<input type=\"hidden\" name=\"sitenum\" value=\""+sitenum+"\">");
	out.println("<input type=\"hidden\" name=\"custnum\" value=\""+custnum+"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");	
	out.println("</form>");	
	}

private void doSaveCustCallslip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custsite = req.getParameter("custsite");
		String sitenum = req.getParameter("sitenum");
       		 int custnum = Integer.parseInt(tcustnum);
		 Format formatter;	
		Calendar now = Calendar.getInstance();
		Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyyMMdd");
		String s = formatter.format(date);
		String custinits=req.getParameter("custinits");
                String callslip ="";
		callslip=combinestring(s,custinits);
                String reason= req.getParameter("reason");
                String services= req.getParameter("services");
                String cdate= req.getParameter("cdate");
                String recommendations="Needs Attention - Entered by Customer Request";
                String rscheduled="";
                String charges="0.00";
                String collected= "0.00";
                String notes= "-";
                String equip1="0";
		String equip2="0";
                String equip3="0";
		String equip4="0";
		String crectype="C";
		String tfollowup= req.getParameter("followup");
       		//int followup = Integer.parseInt(tfollowup);
		String tservices = services.replaceAll("\n","<br>");	
		String trecommendations = recommendations.replaceAll("\n","<br>");	
		String parts="-";
		String address1="";
		String address2="";
		int followup=5;
		String cname="";
		String city="";
		String homephone="";
		String altphone="";
		String crecnum="";
		String state="";
		String email="";
		String zip="";
                UniCallslip.AddItem(con, custnum, callslip, doFormatDateDb(getDateDb(cdate)), equip1, equip2,equip3, equip4, reason, services, recommendations, rscheduled, charges, collected, notes, followup, custsite, sitenum, crectype, username,parts);
		String mbody="";
		mbody=combinestring(mbody,"A Call was just entered on the system by a customer. The information is as follows:<br>");
		Vector v;
                v = UniCustomer.getCustNumSite(con, custsite, sitenum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			address1=t.getAddress1();
			address2=t.getAddress2();
			crecnum=t.getCusNum();
			custsite=t.getCustSite();
			sitenum=t.getSiteNum();
			cname = t.getCustomerName();
			city=t.getCity();
			state=t.getState();
			homephone=t.getHomePhone();
			altphone=t.getAltPhone();
			email=t.getCEmail();
			zip=t.getZip();
		}
		mbody=combinestring(mbody,"Customer Name: "+cname+"<br>");
		mbody=combinestring(mbody,"Address: "+address1+"<br>");
		mbody=combinestring(mbody,"Address: "+address2+"<br>");
		mbody=combinestring(mbody,"Phone: "+homephone+"<br>");
		mbody=combinestring(mbody,"Phone 2: "+altphone+"<br>");
		mbody=combinestring(mbody,"City, State  Zip:"+city+", "+state+"  "+zip+"<br>");
		mbody=combinestring(mbody,"<br>");
		mbody=combinestring(mbody,"Date:"+cdate+"<br>");
		mbody=combinestring(mbody,"Callslip Number: "+callslip+"<br>");
		mbody=combinestring(mbody,"Reason: "+reason+"<br>");
		mbody=combinestring(mbody,"<br>Description of Problem:<br>"+services+"<br>"+recommendations+"<br>");
                out.println("Your item has been added to the database.<br><br>");
		out.println("Your request was entered on: "+cdate+"<br>");
		out.println("Your record number is: "+callslip+"<br><br>");
		out.println("Your request has been emailed out to the appropriate technician who will confirm call with you<br>within 30 minutes<br>");
		out.println("Please print or write down this confirmation for your reference.<br>");
		out.println("Thank you for helping us save you money by using our automated system.<br><br><br>--------------------------------------<br>"+mbody+"");
		
		// put email routine in here

	String emailserver = doGetSmtpServer("servsys");
	//emailsendaddress=doGetIns_Email(username);
	String emailsendaddress=doGetCompanyReportEmail();
	String techemailaddress=doGetTech_Email("servsys");	
	String smtpuser = doGetSmtpUser("servsys");
      	String smtppassword = doGetSmtpPassword("servsys");
       doMailSend(emailserver, emailsendaddress, techemailaddress, "Customer Service Request: Callslip: "+callslip+"" , mbody, smtpuser, smtppassword);
		
		con.close();
            }
	       
private void doLoginUser(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		doVersionInfo_VNumber();
		String action = req.getParameter("action");
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Session Login</title>");
	out.println("</head><table border=0><tr><td valign=\"top\" width=\"40%\">");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=checklogin\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Login:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"login\" size=\"20\" >");
	out.println("</td></tr><tr><td>");
	out.println("Password        :");
	out.println("</td><td>");
	out.println("<input type=\"password\" name=\"apasswd\" size=\"20\" >");
	out.println("</td></tr><tr><td>");
	out.println("</td></tr></table>");
	out.println("<input type=\"hidden\" name=\"next_page\" value=\""+ action+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Login\">");
	out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
	out.println("</form></td><td>");

		String imagename=null;
		String imagewidth=null;
		String imagehight=null;
		String compname=null;
		String complogo=null;
		String compaddress=null;
		String compphone=null;

                Vector v;
                v = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCompConfig t = (UniCompConfig) v.elementAt(i);
			imagename=t.getImage();
			imagewidth=t.getImageWidth();
			imagehight=t.getImageHight();
			compname=t.getCoName();
			complogo=t.getCoLogo();
			compaddress=t.getCoAddress();
			compphone=t.getCoPhone();
		}
            
    out.println("<HTML>");
out.println("<HEAD>");
out.println("        <META HTTP-EQUIV=\"CONTENT-TYPE\" CONTENT=\"text/html; charset=iso-8859-1\">");
 out.println("       <TITLE>P&M Services</TITLE>");
out.println("</HEAD>");
out.println("<BODY TEXT=\"#000000\" LINK=\"#0000ff\" VLINK=\"#000080\" BGCOLOR=\"#ffffff\">");

out.println("<TABLE WIDTH=100% BORDER=0 CELLPADDING=4 CELLSPACING=0>");
	out.println("<THEAD>");
		out.println("<TR>");
			out.println("</TD>");
			out.println("<TD WIDTH=30% VALIGN=TOP>");
				out.println("<P><IMG SRC=\""+imagename+"\" NAME=\"Graphic1\" ALIGN=CENTER WIDTH="+imagewidth+" HEIGHT="+imagehight+" BORDER=0><BR CLEAR=LEFT><BR>");
				out.println("</P>");
			out.println("</TD>");
			out.println("<TD WIDTH=50% ALIGN=LEFT>");
			out.println("<h2><i>Service Entry and Reporting System</i></h2>");
			out.println("</TD>");
		out.println("</TR>");
	out.println("</THEAD>");
out.println("</TABLE>");
out.println("</BODY>");
out.println("</HTML>");
out.println("<br><br><br><br><CENTER>");
out.println("(C) Copyright 2002-2010 - Our World Services, LLC<br>");
out.println("<br>Version: "+doVersionInfo_VNumber()+" - Compiled: "+doFormatDate(getDate(doVersionInfo_VDate()))+"<br>");
//out.println("<br>Software Expire Date: "+doFormatDate(getDate(doGetExpireDate()))+"<br>");
//out.println("<br>Software Expire Date has been removed for GPL version.<br>");
//out.println("<br>Source code per the GPL can be found on sourceforge.net or at servsys.org<br>");
out.println("<br><br><br>For assistance with this product please contact:<br>Chris Molnar<br>860-798-7032<br>molnarc@mac.com");
out.println("<br><br><br><P><IMG SRC=\""+Gwebhome+"MacOS_Pnthr_Vert_v1.gif\" NAME=\"Graphic1\" ALIGN=CENTER WIDTH=50 HEIGHT=60 BORDER=0><BR CLEAR=LEFT><BR>");
out.println("Developed on Mac OS/X for all platforms<br>");
/* #system("uptime"); */

	out.println("</CENTER>");
		con.close();
	}

private void doLogoutUser(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
                                      session.removeAttribute("login");
                                      session.removeAttribute("role");
                                      session.removeAttribute("idcode");
					out.println("<br><a href="+apphome+" target=_top >Home - click here or close your browser to continue</a><br>");
	}

private void doCheckUserLogin(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String next_page = req.getParameter("next_page");
		String adminok = "0";
		String parmpasswd = req.getParameter("apasswd");
		String parmlogin = req.getParameter("login");
	        if (parmlogin!=null) {

        if (parmlogin == null || parmlogin.length() < 1)
                    {
                    out.println("Login field blank please use back key and try again");
                    return;
                     }
        if (parmpasswd == null || parmpasswd.length() < 1)
                    {
                    out.println("Password field blank please use back key and try again");
                    return;
                    }
        //Connection con=(Connection)session.getAttribute("con");
        UniLogin t = new UniLogin(con, parmlogin);
        String dbpasswd = t.getPasswd();
        String dbIdCode = t.getIdCode();
        String dbRole = t.getRole();

        if (dbpasswd.equals(parmpasswd))
                                       {
                                      out.println("<p>Authentication APPROVED");
				      session.setMaxInactiveInterval(36000);
                                      session.setAttribute("login",parmlogin);
                                      session.setAttribute("role",dbRole);
                                      session.setAttribute("idcode",dbIdCode);
                                      String classdir = (String) config.getInitParameter("web.classdir");
				      String apphome = (String) config.getInitParameter("web.apphome");
                                      //res.sendRedirect("../servlet/UniCash?action=top&username="+parmlogin+"");
				      if (next_page==null) {
                                      res.sendRedirect(""+apphome+"");
				      } else {
				       res.sendRedirect(""+classdir+"UniCash?action="+next_page+"");
				      }

                                      //doTop(req, res, out, session, parmlogin);
                                      }
                               else {
                                      //out.println("<p>Authentication DENIED<br>Login: "+parmlogin+"<br>Password: "+dbpasswd+"<br>Role: "+dbRole+"<br>");
                                      out.println("<p>Authentication DENIED");
                                     return;
                                  }
                        }
	
	}

//ADMIN FUNCTION CHECK PASSWORD
//
private void doCheckAdminUser(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String next_page = req.getParameter("next_page");
		String adminok = "0";
		String apass = req.getParameter("apasswd");
		String role =(String)session.getAttribute("role");
		
                if (role.equalsIgnoreCase("admin"))
	                        {
               	res.sendRedirect(""+classdir+"UniCash?action="+next_page+"&adminok=1");
				}
                //if (pass.equalsIgnoreCase(apass))
	        //                {
               	//res.sendRedirect(""+classdir+"UniCash?action="+next_page+"&adminok=1");
		//		}
		else
		{
                res.sendRedirect(""+classdir+"UniCash?action=showhomepage");
		}
	out.println("Password Typed: "+apass+"<br>Password Expected: "+pass+"<br>Next Page: "+next_page+"<br>");
	}
		
//ADMIN FUNCTION
//
 
private void doListUsers(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String tech_init=null;
	String tech_name=null;
	String tech_truck=null;
	String nate_id=null;
	String allow_delete=null;
	String mod_airbal=null;
	String mod_install=null;
	String mod_servadmin=null;
	String serv_update=null;
	String create_worksheet=null;
	String edit_compphonelist=null;
	String servsync=null;
	String lusername=null;
	String password=null;
	String transmit=null;
	String department=null;

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select User</title>");
	out.println("</head>");

	out.println("<table>");
		out.println("<th>Login</th><th>Full Name</th><th>Tech Init</th><th>Truck</th><th>Nate ID</th><th>Allow Delete</th><th>Install</th><th>Air Balance</th><th>Serv. Admin</th><th>Update Server</th><th>Serv Sync</th><th>Edit Phone</th><th>Add Mast.<br>Worksheet</th><th>Transmit</th><th>Department</th><th>E-Mail</th><th>Del</th>");
                Vector v;
                v = UniTechInfo.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniTechInfo t = (UniTechInfo) v.elementAt(i);
                        tech_init = t.getTechInit();
			lusername = t.getUserName();
			tech_name = t.getTechName();
			tech_truck = t.getTruckNum();
			nate_id = t.getNateID();
			allow_delete = t.getAllowDelete();
			mod_servadmin = t.getModServAdmin();
			mod_airbal = t.getModAirBal();
			mod_install = t.getModInstall();
			serv_update = t.getServUpdate();
			create_worksheet = t.getCreateWorksheet();
			edit_compphonelist = t.getEditCompPhoneList();
			transmit=t.getTransmit();
			department=t.getDepartment();
			servsync = t.getServSync();
			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
		out.println("<td><a href="+classdir+"UniCash?action=edittechinfo&tsid="+lusername+">"+lusername+"</a></td><td>"+tech_name+"</td><td>"+tech_init+"</td><td>"+tech_truck+"</td><td>"+nate_id+"</td><td>"+allow_delete+"</td><td>"+mod_install+"</td><td>"+mod_airbal+"</td><td>"+mod_servadmin+"</td><td>"+serv_update+"</td><td>"+servsync+"</td><td>"+edit_compphonelist+"</td><td>"+create_worksheet+"</td><td>"+transmit+"</td><td>"+department+"</td><td><a href="+classdir+"UniCash?action=editemailinfo&adminok=1&tsid="+lusername+">Email</a></td><td><a href="+classdir+"UniCash?action=deluserrec&adminok=1&tsid="+lusername+">Del</a></td></tr>");
                }
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<a href="+classdir+"UniCash?action=adduser&adminok=1>Add User to Tech Table</a><br><br>");
	String thismainserver=doGetThisMainServer();
		if (thismainserver.equalsIgnoreCase("no")) {
	out.println("<br><a href="+classdir+"UniCash?action=uploaduser&adminok=1>Upload to Main Server</a><br></center>");
		}
	out.println("</html>");
	}
 
private void doAddTechInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String tech_init="-";
	String lusername="-";
	String tech_name="-";
	String tech_truck="-";
	String nate_id="-";
	String allow_delete="0";
	String mod_airbal="0";
	String mod_install="0";
	String mod_servadmin="0";
	String serv_update="0";
	String create_worksheet="0";
	String edit_compphonelist="0";
	String servsync="0";
	String userpassword="-";
	String userrole="user";
	String transmit="1";
	String department="-";
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Tech Information</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savetechinfo\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Login Name:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"lusername\" size=\"40\" value=\""+ lusername+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Password:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"userpassword\" size=\"40\" value=\""+userpassword+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Role (user, admin, manager):");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"userrole\" size=\"40\" value=\""+userrole+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Technician Name        :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"tname\" size=\"40\" value=\""+ tech_name+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Technician Initials  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"tinit\" size=\"40\" value=\""+tech_init +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Truck Number  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"tnum\" size=\"40\" value=\""+tech_truck +"\">");
	out.println("</td></tr><tr><td>");
	out.println("NATE ID (0 if none) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"nate_id\" size=\"40\" value=\""+nate_id +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Allow Delete (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"allow_delete\" size=\"40\" value=\""+allow_delete +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Access Install Module (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mod_install\" size=\"40\" value=\""+mod_install+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Access Air Balancing Module (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mod_airbal\" size=\"40\" value=\""+mod_airbal +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Access Server Admin Module (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mod_servadmin\" size=\"40\" value=\""+mod_servadmin +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Transmits Data (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"transmit\" size=\"40\" value=\""+transmit +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Department:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"department\" size=\"40\" value=\""+department +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Update to Server (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"serv_update\" size=\"40\" value=\""+serv_update+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Allow Server Sync(0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"servsync\" size=\"40\" value=\""+servsync+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Edit Company Phone List (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"edit_compphonelist\" size=\"40\" value=\""+edit_compphonelist+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Create Master Worksheet (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"create_worksheet\" size=\"40\" value=\""+create_worksheet +"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER></form>");
	}
 
private void doEditTechInfo(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String tech_init=null;
	String lusername=req.getParameter("tsid");
	String tech_name=null;
	String tech_truck=null;
	String nate_id=null;
	String allow_delete=null;
	String mod_airbal=null;
	String mod_install=null;
	String mod_servadmin=null;
	String serv_update=null;
	String create_worksheet=null;
	String edit_compphonelist=null;
	String servsync=null;
	String userpassword=null;
	String userrole=null;
	String department=null;
	String transmit=null;
	//lusername=doGetUserName(lusername);
	tech_init = doGetTechInfo_init(lusername);
	transmit=doGetTechInfo_transmit(lusername);
	department=doGetTechInfo_department(lusername);
	userrole = doGetTechInfo_role(lusername);
	userpassword = doGetTechInfo_password(lusername);
	tech_name = doGetTechInfo_name(lusername);
	nate_id = doGetTechInfo_nateid(lusername);
	tech_truck = doGetTechInfo_truck(lusername);
	allow_delete=doGetAllowDelete(lusername);
	mod_airbal=doGetAllowModAirBal(lusername);
	mod_install=doGetAllowModInstall(lusername);
	mod_servadmin=doGetAllowModServAdmin(lusername);
	serv_update=doGetAllowServUpdate(lusername);
	create_worksheet=doGetCreateWorksheet(lusername);
	edit_compphonelist=doGetEditCompPhoneList(lusername);
	servsync=doGetServSync(lusername);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Tech Information</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatetechinfo\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Login Name:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"lusername\" size=\"40\" value=\""+ lusername+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Password:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"userpassword\" size=\"40\" value=\""+userpassword+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Role (user, admin, manager):");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"userrole\" size=\"40\" value=\""+userrole+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Technician Name        :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"tname\" size=\"40\" value=\""+ tech_name+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Technician Initials  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"tinit\" size=\"40\" value=\""+tech_init +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Truck Number  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"tnum\" size=\"40\" value=\""+tech_truck +"\">");
	out.println("</td></tr><tr><td>");
	out.println("NATE ID (0 if none) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"nate_id\" size=\"40\" value=\""+nate_id +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Allow Delete (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"allow_delete\" size=\"40\" value=\""+allow_delete +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Access Install Module (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mod_install\" size=\"40\" value=\""+mod_install+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Access Air Balancing Module (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mod_airbal\" size=\"40\" value=\""+mod_airbal +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Access Server Admin Module (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"mod_servadmin\" size=\"40\" value=\""+mod_servadmin +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Transmits Data (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"transmit\" size=\"40\" value=\""+transmit +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Department:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"department\" size=\"40\" value=\""+department +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Update to Server (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"serv_update\" size=\"40\" value=\""+serv_update+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Allow Server Sync(0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"servsync\" size=\"40\" value=\""+servsync+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Edit Company Phone List (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"edit_compphonelist\" size=\"40\" value=\""+edit_compphonelist+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Create Master Worksheet (0 if no, 1 if Yes) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"create_worksheet\" size=\"40\" value=\""+create_worksheet +"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER></form>");
	}

	public String doGetExpireDate()
	throws Exception
	{
                Vector v;
                v = SystemExpireDate.getAllItems(con);
                int counter=0;
		String expire_date = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        SystemExpireDate t = (SystemExpireDate) v.elementAt(i);
                        expire_date = t.getExpireDate();
		}	
		return expire_date;
	}

	public static String doGetTechInfo_name(String iusername)
	throws Exception
	{
                Vector v;
                v = UniTechInfo.getAllItems(con, iusername);
                int counter=0;
		String tech_name = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniTechInfo t = (UniTechInfo) v.elementAt(i);
                        tech_name = t.getTechName();
		}	
		return tech_name;
	}


	public static String doGetSmtpPassword(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con,lusername);
                int counter=0;
		String smtppassword = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        smtppassword = t.getSmtpPassword();
                }
                        return smtppassword;                       
        }

	public static String doGetSmtpUser(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con,lusername);
                int counter=0;
		String smtpuser = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        smtpuser = t.getSmtpUser();
                }
                        return smtpuser;                       
        }


	public static String doGetSmtpServer(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con,lusername);
                int counter=0;
		String smtpserver = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        smtpserver = t.getSmtpServer();
                }
                        return smtpserver;                       
        }


	public String doGetStockMailCat(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con,lusername);
                int counter=0;
		String stock_mail_cat = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        stock_mail_cat = t.getStockMailCat();
                }
                        return stock_mail_cat;                       
        }

// *********** WS Info starts here
// 	  public double getTmAdditional() { return tmadditional; }
//        public double getPsPrimary() { return psprimary; }
//        public double getPsAdditional() { return psadditional; }

	public String doGetCustType(int custnum)
		throws Exception
		{

                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                int counter=0;
		String custtype = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
                        custtype = t.getCustType();
                }
                        return custtype;                       

		}
	public String doGetCustName(int custnum)
		throws Exception
		{

                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                int counter=0;
		String custname= null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
                        custname = t.getCustomerName();
                }
                        return custname;                       

		}

		
	public double doSitemLowPrice()
        throws Exception
        {
                Vector v;
                v = FlatRateConfig.getAllItems(con);
                int counter=0;
		double sitemlowprice= 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                         sitemlowprice= t.getSitemLowPrice();
                }
                        return sitemlowprice;                       
        }

	public double doSitemHighPrice()
        throws Exception
        {
                Vector v;
                v = FlatRateConfig.getAllItems(con);
                int counter=0;
		double sitemhighprice= 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                         sitemhighprice= t.getSitemHighPrice();
                }
                        return sitemhighprice;                       
        }

	public double doSitemHighHours()
        throws Exception
        {
                Vector v;
                v = FlatRateConfig.getAllItems(con);
                int counter=0;
		double sitemhighhours= 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                         sitemhighhours= t.getSitemHighHours();
                }
                        return sitemhighhours;                       
        }

	public double doSalesTax()
        throws Exception
        {
                Vector v;
                v = FlatRateConfig.getAllItems(con);
                int counter=0;
		double salestax= 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                         salestax= t.getSalesTax();
                }
                        return salestax;                       
        }


	public double doPsDiscount()
        throws Exception
        {
                Vector v;
                v = FlatRateConfig.getAllItems(con);
                int counter=0;
		double psdiscount= 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                        psdiscount = t.getPsDiscount();
                }
                       return psdiscount;                       
        }


	public double doMrDiscount()
        throws Exception
        {
                Vector v;
                v = FlatRateConfig.getAllItems(con);
                int counter=0;
		double mrdiscount= 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                         mrdiscount= t.getMrDiscount();
                }
                        return mrdiscount;                       
        }


	public double doPartMarkUp()
        throws Exception
        {
                Vector v;
                v = FlatRateConfig.getAllItems(con);
                int counter=0;
		double partmarkup= 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                       partmarkup  = t.getPartMarkup();
                }
                        return partmarkup;                       
        }

	public double doComMarkUp()
        throws Exception
        {
                Vector v;
                v = FlatRateConfig.getAllItems(con);
                int counter=0;
		double commarkup= 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                       commarkup  = t.getComMarkup();
                }
                        return commarkup;                       
        }


	public double doLabPerHour()
        throws Exception
        {
                Vector v;
                v = FlatRateConfig.getAllItems(con);
                int counter=0;
		double labperhour = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FlatRateConfig t = (FlatRateConfig) v.elementAt(i);
                      labperhour   = t.getLabPerHour();
                }
                        return labperhour;                       
        }


	public double doPsAdditional()
        throws Exception
        {
                Vector v;
                v = FrConfig.getAllItems(con);
                int counter=0;
		double psadditional = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FrConfig t = (FrConfig) v.elementAt(i);
                        psadditional = t.getPsAdditional();
                }
                        return psadditional;                       
        }

	public double doPsPrimary()
        throws Exception
        {
                Vector v;
                v = FrConfig.getAllItems(con);
                int counter=0;
		double psprimary = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FrConfig t = (FrConfig) v.elementAt(i);
                        psprimary = t.getPsPrimary();
                }
                        return psprimary;                       
        }

	public double doTmAdditional()
        throws Exception
        {
                Vector v;
                v = FrConfig.getAllItems(con);
                int counter=0;
		double tmadditional = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        FrConfig t = (FrConfig) v.elementAt(i);
                        tmadditional = t.getTmAdditional();
                }
                        return tmadditional;                       
        }

	public double doGetLaborCost()
        throws Exception
        {
                Vector v;
                v = UniWsConfig.getAllItems(con);
                int counter=0;
		double laborcost = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniWsConfig t = (UniWsConfig) v.elementAt(i);
                        laborcost = t.getLaborCost();
                }
                        return laborcost;                       
        }


	public double doGetLabMult()
        throws Exception
        {
                Vector v;
                v = UniWsConfig.getAllItems(con);
                int counter=0;
		double labmult = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniWsConfig t = (UniWsConfig) v.elementAt(i);
                        labmult = t.getLabMult();
                }
                        return labmult;                       
        }

	public double doGetPartMult()
        throws Exception
        {
                Vector v;
                v = UniWsConfig.getAllItems(con);
                int counter=0;
		double partmult = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniWsConfig t = (UniWsConfig) v.elementAt(i);
                        partmult = t.getPartMult();
                }
                        return partmult;                       
        }

	public static String doGetPropPrice()
        throws Exception
        {
                Vector v;
                v = UniWsConfig.getAllItems(con);
                int counter=0;
		String propprice = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniWsConfig t = (UniWsConfig) v.elementAt(i);
                        propprice = t.getPropPrice();
                }
                        return propprice;                       
        }

	public double doGetMarkUpDiv()
        throws Exception
        {
                Vector v;
                v = UniWsConfig.getAllItems(con);
                int counter=0;
		double markupdiv = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniWsConfig t = (UniWsConfig) v.elementAt(i);
                        markupdiv = t.getMarkUpDiviser();
                }
                        return markupdiv;                       
        }


	public double doGetGpToLabor()
        throws Exception
        {
                Vector v;
                v = UniWsConfig.getAllItems(con);
                int counter=0;
		double gptolabor = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniWsConfig t = (UniWsConfig) v.elementAt(i);
                        gptolabor = t.getGpToLabor();
                }
                        return gptolabor;                       
        }


	public double doGetCrewBillable()
        throws Exception
        {
                Vector v;
                v = UniWsConfig.getAllItems(con);
                int counter=0;
		double crewbillable = 0.00;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniWsConfig t = (UniWsConfig) v.elementAt(i);
                        crewbillable = t.getCrewBillable();
                }
                        return crewbillable;                       
        }

// *********** WS Info ends  here

	public String doGetFrUpdateDate()
        throws Exception
        {
	
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	String dbserver=doGetDbServer();
	String dbname=doGetDbName();
	String dbpass=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dupdated=null;
	condb = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpass);

                Vector v;
                v = UniFlatDate.getAllItems(condb);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniFlatDate t = (UniFlatDate) v.elementAt(i);
                        dupdated = t.getDateUpdated();
	}
	return dupdated;
	}


	public static String doGetThisMainServer()
        throws Exception
        {
                Vector v;
                v = UniDbServer.getAllItems(con);
                int counter=0;
		String dbserver = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniDbServer t = (UniDbServer) v.elementAt(i);
                        dbserver = t.getThisMainServer();
                }
                        return dbserver;                       
        }


	public static String doGetDbServer()
        throws Exception
        {
                Vector v;
                v = UniDbServer.getAllItems(con);
                int counter=0;
		String dbserver = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniDbServer t = (UniDbServer) v.elementAt(i);
                        dbserver = t.getServerName();
                }
                        return dbserver;                       
        }


	public String doGetMainServer()
        throws Exception
        {
                Vector v;
                v = MainDbServer.getAllItems(con);
                int counter=0;
		String dbserver = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        MainDbServer t = (MainDbServer) v.elementAt(i);
                        dbserver = t.getServerName();
                }
                        return dbserver;                       
        }



	public String doGetDbPassword()
        throws Exception
        {
                Vector v;
                v = UniDbServer.getAllItems(con);
                int counter=0;
		String password = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniDbServer t = (UniDbServer) v.elementAt(i);
                        password = t.getPassword();
                }
                        return password;                       
        }

	public String doGetMainPassword()
        throws Exception
        {
                Vector v;
                v = MainDbServer.getAllItems(con);
                int counter=0;
		String password = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        MainDbServer t = (MainDbServer) v.elementAt(i);
                        password = t.getPassword();
                }
                        return password;                       
        }


	public String doGetDbName()
        throws Exception
        {
                Vector v;
                v = UniDbServer.getAllItems(con);
                int counter=0;
		String dbname = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniDbServer t = (UniDbServer) v.elementAt(i);
                        dbname = t.getDbName();
                }
                        return dbname;                       
        }

	public String doMainDbName()
        throws Exception
        {
                Vector v;
                v = MainDbServer.getAllItems(con);
                int counter=0;
		String dbname = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        MainDbServer t = (MainDbServer) v.elementAt(i);
                        dbname = t.getDbName();
                }
                        return dbname;                       
        }


	public String doGetDbUser()
        throws Exception
        {
                Vector v;
                v = UniDbServer.getAllItems(con);
                int counter=0;
		String username = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniDbServer t = (UniDbServer) v.elementAt(i);
                        username = t.getUserName();
                }
                        return username;                       
        }

	public String doMainDbUser()
        throws Exception
        {
                Vector v;
                v = MainDbServer.getAllItems(con);
                int counter=0;
		String username = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        MainDbServer t = (MainDbServer) v.elementAt(i);
                        username = t.getUserName();
                }
                        return username;                       
        }

	public static String doGetTech_Email(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con, lusername);
                int counter=0;
		String tech_email = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        tech_email = t.getTechEmail();
                }
                        return tech_email;                       
        }


	public String doGetStock_Email(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con, lusername);
                int counter=0;
		String stock_email = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        stock_email = t.getStockEmail();
                }
                        return stock_email;                       
        }

	public String doGetProp_Email(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con, lusername);
                int counter=0;
		String prop_email = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        prop_email = t.getPropEmail();
                }
                        return prop_email;                       
        }

	public static String doGetIns_Email(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con, lusername);
                int counter=0;
		String ins_email = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        ins_email = t.getInsEmail();
                }
                        return ins_email;                       
        }

	public String doGetSvc_Email(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con, lusername);
                int counter=0;
		String svc_email = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        svc_email = t.getSvcEmail();
                }
                        return svc_email;                       
        }

	public static String doVersionInfo_VNumber()
        throws Exception
        {
                Vector v;
                v = UniVersion.getAllItems(con);
                int counter=0;
		String vnumber  = null;
		String dbvnumber  = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniVersion t = (UniVersion) v.elementAt(i);
                        dbvnumber  = t.getVNumber();
                }

//RELEASE_VERSION
			vnumber = "2.51";

			if (dbvnumber.equalsIgnoreCase("2.50")) {
			Statement stmtu2 = con.createStatement();
			int result251z = stmtu2.executeUpdate("UPDATE version set vnumber='2.51';");
			int result251x = stmtu2.executeUpdate("UPDATE version set vdate='2010-01-23';");
			int result251a = stmtu2.executeUpdate("alter table worksheet add wsmultlab decimal(10,2) default 0.00 after techid;");
			int result251b = stmtu2.executeUpdate("alter table worksheet add wsmultsub decimal(10,2) default 0.00 after wsmultlab;");
			int result251c = stmtu2.executeUpdate("alter table masterworksheet add wsmultlab decimal(10,2) default 0.00 after wsmult;");
			int result251d = stmtu2.executeUpdate("alter table masterworksheet add wsmultsub decimal(10,2) default 0.00 after wsmultlab;");
			int result251e = stmtu2.executeUpdate("alter table masterwsitem add subcost decimal(10,2) default 0.00 after shophours;");
			int result251f = stmtu2.executeUpdate("alter table wsitem add subcost decimal(10,2) default 0.00 after techid;");
						}
			if (dbvnumber.equalsIgnoreCase("2.31")) {
			Statement stmtu2 = con.createStatement();
			int result250z = stmtu2.executeUpdate("UPDATE version set vnumber='2.50';");
			int result250x = stmtu2.executeUpdate("UPDATE version set vdate='2010-01-21';");
						}
			if (dbvnumber.equalsIgnoreCase("2.30")) {
			Statement stmtu2 = con.createStatement();
			int result231z = stmtu2.executeUpdate("UPDATE version set vnumber='2.31';");
			int result231x = stmtu2.executeUpdate("UPDATE version set vdate='2009-08-01';");
						}
			if (dbvnumber.equalsIgnoreCase("2.29")) {
			Statement stmtu2 = con.createStatement();
			int result230a = stmtu2.executeUpdate("alter table time_sheet add odostart int default 0 after callcount;");
			int result230b = stmtu2.executeUpdate("alter table time_sheet add odostop int default 0 after odostart;");
			int result230z = stmtu2.executeUpdate("UPDATE version set vnumber='2.30';");
			int result230x = stmtu2.executeUpdate("UPDATE version set vdate='2006-05-24';");
						}
			if (dbvnumber.equalsIgnoreCase("2.28")) {
			Statement stmtu2 = con.createStatement();
			int result225z = stmtu2.executeUpdate("UPDATE version set vnumber='2.29';");
			int result221x = stmtu2.executeUpdate("UPDATE version set vdate='2006-05-23';");
						}
			if (dbvnumber.equalsIgnoreCase("2.27")) {
			Statement stmtu2 = con.createStatement();
			int result225a1 = stmtu2.executeUpdate("alter table inv_use add invloc text after servsync;");
			int result226a1=stmtu2.executeUpdate("update inv_use set invloc='TRUCK';");
			//int result225a2 = stmtu2.executeUpdate("");
			int result225z = stmtu2.executeUpdate("UPDATE version set vnumber='2.28';");
			int result221x = stmtu2.executeUpdate("UPDATE version set vdate='2006-05-23';");
						}
			if (dbvnumber.equalsIgnoreCase("2.26")) {
			Statement stmtu2 = con.createStatement();
			int result225a1 = stmtu2.executeUpdate("alter table time_sheet add callcount int(11) default 1 after servsync;");
			//int result225a2 = stmtu2.executeUpdate("");
			int result225z = stmtu2.executeUpdate("UPDATE version set vnumber='2.27';");
			int result221x = stmtu2.executeUpdate("UPDATE version set vdate='2006-05-14';");
						}
						if (dbvnumber.equalsIgnoreCase("2.25")) {
			Statement stmtu2 = con.createStatement();
			int result225a1 = stmtu2.executeUpdate("drop table if exists locktable;");
			int result225a2 = stmtu2.executeUpdate("create table locktable (recnum int(11) NOT NULL auto_increment,userlogin text, custnum text, sitenum text, callslip text, ndate date, expiredate date,PRIMARY KEY  (recnum), UNIQUE KEY recnum (recnum));");
							int result225z = stmtu2.executeUpdate("UPDATE version set vnumber='2.26';");
						int result221x = stmtu2.executeUpdate("UPDATE version set vdate='2006-05-11';");
						}
			if (dbvnumber.equalsIgnoreCase("2.24")) {
			Statement stmtu2 = con.createStatement();
			int result225a1 = stmtu2.executeUpdate("drop table if exists callnotes;");
			int result225a2 = stmtu2.executeUpdate("create table callnotes (recnum int(11) NOT NULL auto_increment,userlogin text, custnum text, sitenum text, callslip text, ndate date, note text, servsync int(11),PRIMARY KEY  (recnum), UNIQUE KEY recnum (recnum));");
			int result225a3 = stmtu2.executeUpdate("drop table if exists inspectnotes;");
			int result225a4 = stmtu2.executeUpdate("create table inspectnotes (recnum int(11) NOT NULL auto_increment,userlogin text, custnum text, sitenum text, callslip text, ndate date, note text, servsync int(11),PRIMARY KEY  (recnum), UNIQUE KEY recnum (recnum));");
			Statement stmtu3 = con.createStatement();
			ResultSet rsu3 = stmtu3.executeQuery("select custsite, sitenum, techid, cdate, callslip, servsync, rtrim(ltrim(notes)) as notes from callslip where length(callslip.notes)>4;");
					 while(rsu3.next())
					 	{
							String custsite=rsu3.getString("custsite");
							String callslip=rsu3.getString("callslip");
							String sitenum=rsu3.getString("sitenum");
							String techid=rsu3.getString("techid");
							String cdate=rsu3.getString("cdate");
							String notes=rsu3.getString("notes");
							int servsync=rsu3.getInt("servsync");
							int result225a5 = stmtu2.executeUpdate("insert into callnotes (userlogin, custnum, sitenum, callslip, ndate, note, servsync) values ('"+techid+"','"+custsite+"','"+sitenum+"','"+callslip+"','"+cdate+"','"+notes+"','"+servsync+"');");				
						}
						ResultSet rsu4 = stmtu3.executeQuery("select custsite, sitenum, techid, idate, callslip, servsync, rtrim(ltrim(notes)) as notes from inspection where length(inspection.notes)>4;");
					 while(rsu4.next())
					 	{
							String custsite=rsu4.getString("custsite");
							String callslip=rsu4.getString("callslip");
							String sitenum=rsu4.getString("sitenum");
							String techid=rsu4.getString("techid");
							String cdate=rsu4.getString("idate");
							String notes=rsu4.getString("notes");
							int servsync=rsu4.getInt("servsync");
							int result225a6 = stmtu2.executeUpdate("insert into inspectnotes (userlogin, custnum, sitenum, callslip, ndate, note, servsync) values ('"+techid+"','"+custsite+"','"+sitenum+"','"+callslip+"','"+cdate+"','"+notes+"','"+servsync+"');");				
						}
						int result225a7=stmtu2.executeUpdate("alter table configcompany add nocustonlaptop text after enabcustomer;");
						int result225a8=stmtu2.executeUpdate("alter table configcompany add laptopretentiontime int(11) after nocustonlaptop;");
						int result225z = stmtu2.executeUpdate("UPDATE version set vnumber='2.25';");
						int result221x = stmtu2.executeUpdate("UPDATE version set vdate='2006-05-08';");
			}
			if (dbvnumber.equalsIgnoreCase("2.23")) {
			Statement stmtu2 = con.createStatement();
			int result224a=stmtu2.executeUpdate("alter table packcompare add best6 text after desc3;");
			int result224b=stmtu2.executeUpdate("alter table packcompare add best7 text after best6;");
			int result224c=stmtu2.executeUpdate("alter table packcompare add best8 text after best7;");
			
			int result224d=stmtu2.executeUpdate("alter table packcompare add better6 text after best8;");
			int result224e=stmtu2.executeUpdate("alter table packcompare add better7 text after better6;");
			int result224f=stmtu2.executeUpdate("alter table packcompare add better8 text after better7;");
			
			int result224g=stmtu2.executeUpdate("alter table packcompare add good6 text after better8;");
			int result224h=stmtu2.executeUpdate("alter table packcompare add good7 text after good6;");
			int result224i=stmtu2.executeUpdate("alter table packcompare add good8 text after good7;");
			int result221z = stmtu2.executeUpdate("UPDATE version set vnumber='2.24';");
			}
			if (dbvnumber.equalsIgnoreCase("2.22")) {
			Statement stmtu2 = con.createStatement();
			int result213a=stmtu2.executeUpdate("alter table configcompany add reportemail text after enabcustomer;");
			int result221x = stmtu2.executeUpdate("UPDATE version set vdate='2006-07-04';");
			int result221z = stmtu2.executeUpdate("UPDATE version set vnumber='2.23';");
			}
			if (dbvnumber.equalsIgnoreCase("2.21")) {
			Statement stmtu2 = con.createStatement();
			int result221a1 = stmtu2.executeUpdate("drop table if exists dispatch;");
			int result221a2 = stmtu2.executeUpdate("create table dispatch(userlogin text, customer text, ddate date,  dtime text, dstatus text);");
			int result221x = stmtu2.executeUpdate("UPDATE version set vdate='2006-04-04';");
			int result221z = stmtu2.executeUpdate("UPDATE version set vnumber='2.22';");
			}
			if (dbvnumber.equalsIgnoreCase("2.20")) {
			Statement stmtu2 = con.createStatement();
			int result221x = stmtu2.executeUpdate("UPDATE version set vdate='2006-04-03';");
			int result221z = stmtu2.executeUpdate("UPDATE version set vnumber='2.21';");
			}
			if (dbvnumber.equalsIgnoreCase("2.19")) {
			Statement stmtu2 = con.createStatement();
// Fix some database values since I dont have the updates in yet.
//int result220a = stmtu2.executeUpdate(fieldname text, fieldselection text, heatvalue text, coolvalue text)
int result220b = stmtu2.executeUpdate("update heatloadvalues set coolvalue='33', heatvalue='103' where fieldname='nwintype' and fieldselection='Single';");
int result220c = stmtu2.executeUpdate("update heatloadvalues set coolvalue='48',heatvalue='103' where fieldname='swintype' and fieldselection='Single';");
int result220d = stmtu2.executeUpdate("update heatloadvalues set coolvalue='90',heatvalue='103' where fieldname='ewintype' and fieldselection='Single';");
int result220e = stmtu2.executeUpdate("update heatloadvalues set coolvalue='90',heatvalue='103'  where fieldname='wwintype' and fieldselection='Single';");
int result220f = stmtu2.executeUpdate("update heatloadvalues set coolvalue='24',heatvalue='73' where fieldname='nwintype' and fieldselection='Double';");
int result220g = stmtu2.executeUpdate("update heatloadvalues set coolvalue='39',heatvalue='73' where fieldname='swintype' and fieldselection='Double';");
int result220h = stmtu2.executeUpdate("update heatloadvalues set coolvalue='74',heatvalue='73' where fieldname='ewintype' and fieldselection='Double';");
int result220i = stmtu2.executeUpdate("update heatloadvalues set coolvalue='74',heatvalue='73' where fieldname='wwintype' and fieldselection='Double';");
int result220j = stmtu2.executeUpdate("update heatloadvalues set coolvalue='18',heatvalue='42' where fieldname='nwintype' and fieldselection='Triple';");
int result220k = stmtu2.executeUpdate("update heatloadvalues set coolvalue='29',heatvalue='42' where fieldname='swintype' and fieldselection='Triple';");
int result220l = stmtu2.executeUpdate("update heatloadvalues set coolvalue='58',heatvalue='42' where fieldname='ewintype' and fieldselection='Triple';");
int result220m = stmtu2.executeUpdate("update heatloadvalues set coolvalue='58',heatvalue='42' where fieldname='wwintype' and fieldselection='Triple';");

			int result220x = stmtu2.executeUpdate("UPDATE version set vdate='2006-04-02';");
			int result220z = stmtu2.executeUpdate("UPDATE version set vnumber='2.20';");
			}

		if (dbvnumber.equalsIgnoreCase("2.18")) {
			Statement stmtu2 = con.createStatement();
			int result218a = stmtu2.executeUpdate("DROP TABLE IF EXISTS heatloads;");
			int result218a1 = stmtu2.executeUpdate("CREATE TABLE heatloads (recnum int(11) NOT NULL auto_increment, custsitenum text, sitenum text, loaddate date default '2006-01-01',  ceilingsqft int(11), ceiltype text, wallsqft int(11),walltype text, nwinsqft int(11), nwintype text, swinsqft int(11), swintype text, ewinsqft int(11), ewintype text, wwinsqft int(11), wwintype text, nsldoorsqft int(11), nsldoortype text, ssldoorsqft int(11), ssldoortype text, esldoorsqft int(11), esldoortype text, wsldoorsqft int(11), wsldoortype text, doorsqft int(11), doortype text, totglasssqft int(11),nframewall int(11), nframewalltype text, nmasawall int(11), nmasawalltype text, nmasbwall int(11), nmasbwalltype text, basfloorsqft int(11),slabnoperim int(11), slabnoperimtype text, slabwperim int(11), slabwperimtype text, flooruncond int(11), flooruncondtype text, mechvent int(11),numpeople int(11), bldlength int(11), bldwidth int(11), bldheight int(11),PRIMARY KEY  (recnum), UNIQUE KEY recnum (recnum));");
int result218a2 = stmtu2.executeUpdate("drop table if exists wintype;");
int result218a3 = stmtu2.executeUpdate("create table wintype(wintype text not null);");
int result218a4 = stmtu2.executeUpdate("insert into wintype values ('Single');");
int result218a5 = stmtu2.executeUpdate("insert into wintype values ('Double');");
int result218a6 = stmtu2.executeUpdate("insert into wintype values ('Triple');");
int result218a7 = stmtu2.executeUpdate("drop table if exists ceiltype;");
int result218a8 = stmtu2.executeUpdate("create table ceiltype(ceiltype text not null);");
int result218a9 = stmtu2.executeUpdate("insert into ceiltype values ('R11_3inch');");
int result218a10 = stmtu2.executeUpdate("insert into ceiltype values ('R19_6inch');");
int result218a11 = stmtu2.executeUpdate("insert into ceiltype values ('R30_10inch');");
int result218a13 = stmtu2.executeUpdate("drop table if exists sldoortype;");
int result218a14 = stmtu2.executeUpdate("create table sldoortype(sldoortype text not null);");
int result218a15 = stmtu2.executeUpdate("insert into sldoortype values ('Single');");
int result218a16 = stmtu2.executeUpdate("insert into sldoortype values ('Double');");
int result218a17 = stmtu2.executeUpdate("insert into sldoortype values ('Triple');");
int result218a18 = stmtu2.executeUpdate("drop table if exists doortype;");
int result218a19 = stmtu2.executeUpdate("create table doortype(doortype text not null);");
int result218a20 = stmtu2.executeUpdate("insert into doortype values ('Wood');");
int result218a21 = stmtu2.executeUpdate("insert into doortype values ('With_Storm');");
int result218a22 = stmtu2.executeUpdate("insert into doortype values ('Urethane');");
int result218a23 = stmtu2.executeUpdate("drop table if exists fwalltype;");
int result218a24 = stmtu2.executeUpdate("create table fwalltype(fwalltype text not null);");
int result218a25 = stmtu2.executeUpdate("insert into fwalltype values ('R13_3inch');");
int result218a26 = stmtu2.executeUpdate("insert into fwalltype values ('R19_6inch');");
int result218a27 = stmtu2.executeUpdate("drop table if exists masawalltype;");
int result218a28 = stmtu2.executeUpdate("create table masawalltype(masawalltype text not null);");
int result218a29 = stmtu2.executeUpdate("insert into masawalltype values ('0inch_Insulation');");
int result218a30 = stmtu2.executeUpdate("insert into masawalltype values ('1inch_Insulation');");
int result218a31 = stmtu2.executeUpdate("insert into masawalltype values ('3inch_Insulation');");
int result218a32 = stmtu2.executeUpdate("drop table if exists masbwalltype;");
int result218a33 = stmtu2.executeUpdate("create table masbwalltype(masbwalltype text not null);");
int result218a34 = stmtu2.executeUpdate("insert into masbwalltype values ('0inch_Insulation');");
int result218a35 = stmtu2.executeUpdate("insert into masbwalltype values ('1inch_Insulation');");
int result218a36 = stmtu2.executeUpdate("insert into masbwalltype values ('3inch_Insulation');");
int result218a37 = stmtu2.executeUpdate("drop table if exists slabnotype;");
int result218a38 = stmtu2.executeUpdate("create table slabnotype(slabnotype text not null);");
int result218a39 = stmtu2.executeUpdate("insert into slabnotype values ('0inch_Insulation');");
int result218a40 = stmtu2.executeUpdate("insert into slabnotype values ('1inch_Insulation');");
int result218a41 = stmtu2.executeUpdate("insert into slabnotype values ('2inch_Insulation');");
int result218a42 = stmtu2.executeUpdate("drop table if exists slabperimtype;");
int result218a43 = stmtu2.executeUpdate("create table slabperimtype(slabperimtype text not null);");
int result218a44 = stmtu2.executeUpdate("insert into slabperimtype values ('0inch_Insulation');");
int result218a45 = stmtu2.executeUpdate("insert into slabperimtype values ('1inch_Insulation');");
int result218a46 = stmtu2.executeUpdate("insert into slabperimtype values ('2inch_Insulation');");
int result218a47 = stmtu2.executeUpdate("drop table if exists uncondfloortype;");
int result218a48 = stmtu2.executeUpdate("create table uncondfloortype(uncondfloortype text not null);");
int result218a49 = stmtu2.executeUpdate("insert into uncondfloortype values ('0inch_Insulation');");
int result218a50 = stmtu2.executeUpdate("insert into uncondfloortype values ('1inch_Insulation');");
int result218a51 = stmtu2.executeUpdate("insert into uncondfloortype values ('2inch_Insulation');");
int result218a52 = stmtu2.executeUpdate("drop table if exists heatloadvalues;");
int result218a53 = stmtu2.executeUpdate("create table heatloadvalues (fieldname text, fieldselection text, heatvalue text, coolvalue text);");
int result218a54 = stmtu2.executeUpdate("INSERT INTO heatloadvalues VALUES ('ceiltype','R11_3inch','7','3.7'),('ceiltype','R19_6inch','4.2','2.3'),('ceiltype','R30_10inch','2.6','1.5'),('nwintype','Single','33','103'),('swintype','Single','48','103'),('ewintype','Single','90','103'),('wwintype','Single','90','103'),('nwintype','Double','24','73'),('swintype','Double','39','73'),('ewintype','Double','74','73'),('wwintype','Double','74','73'),('nwintype','Triple','18','42'),('swintype','Triple','29','42'),('ewintype','Triple','58','42'),('wwintype','Triple','58','42'),('nsldoor','Single','33','110'),('ssldoor','Single','48','110'),('esldoor','Single','90','110'),('wsldoor','Single','90','110'),('nsldoor','Double','24','59'),('ssldoor','Double','39','59'),('esldoor','Double','74','59'),('wsldoor','Double','74','59'),('nsldoor','Triple','18','77'),('ssldoor','Triple','29','77'),('esldoor','Triple','58','77'),('wsldoor','Triple','58','77'),('nframewall','R13_3inch','5.6','1.9'),('nframewall','R19_6inch','4.4','1.3'),('nmasawall','0inch_Insulation','41','8.3'),('nmasawall','1inch_Insulation','11.5','2.3'),('nmasawall','3inch_Insulation','6.2','1.3'),('nmasbwall','0inch_Insulation','11.8','0'),('nmasbwall','1inch_Insulation','7','0'),('nmasbwall','3inch_Insulation','4.8','0'),('basfloor','All','2.2','0'),('slabnoperim','0inch_Insulation','65','0'),('slabnoperim','1inch_Insulation','33','0'),('slabnoperim','2inch_Insulation','16.8','0'),('slabwperim','0inch_Insulation','152','0'),('slabwperim','1inch_Insulation','91','0'),('slabwperim','2inch_Insulation','75','0'),('flooruncond','0inch_Insulation','25','5.8'),('flooruncond','3inch_Insulation','6.4','1.3'),('flooruncond','6inch_Insulation','4.2','0.8'),('mechventcfm','All','88','22'),('infiltration','All','88','22'),('kitchen','All','0','1200'),('doortype','Wood','82','10.9'),('doortype','With_Storm','47','7.3'),('doortype','Urethane','60','4.5'),('tempdiffs','All','80','20');");

int result219a1 = stmtu2.executeUpdate("alter table inspection add im_cleanbin text after parts");
int result219a2 = stmtu2.executeUpdate("alter table inspection add im_limeaway text after im_cleanbin");
int result219a3 = stmtu2.executeUpdate("alter table inspection add im_bleach text after im_limeaway");
int result219a4 = stmtu2.executeUpdate("alter table inspection add im_watercomp text after im_bleach");
int result219a5 = stmtu2.executeUpdate("alter table inspection add im_icecomp text after im_watercomp");
int result219a6 = stmtu2.executeUpdate("alter table inspection add im_filter text after im_icecomp");
int result219a7 = stmtu2.executeUpdate("alter table inspection add im_float text after im_filter");
int result219a8 = stmtu2.executeUpdate("alter table inspection add im_wpump text after im_float");
int result219a9 = stmtu2.executeUpdate("alter table inspection add im_binsensor text after im_wpump");
int result219a10 = stmtu2.executeUpdate("alter table inspection add im_testdump text after im_binsensor");
int result219a11 = stmtu2.executeUpdate("alter table inspection add im_electrical text after im_testdump");
int result219a12 = stmtu2.executeUpdate("alter table inspection add im_comprated text after im_electrical");
int result219a13 = stmtu2.executeUpdate("alter table inspection add im_compactual text after im_comprated");

int result219b1 = stmtu2.executeUpdate("alter table inspection add ref_condcoilcond text after im_compactual");
int result219b2 = stmtu2.executeUpdate("alter table inspection add ref_condcoilcleaned text after ref_condcoilcond");
int result219b3 = stmtu2.executeUpdate("alter table inspection add ref_evapcoilcond text after ref_condcoilcleaned");
int result219b4 = stmtu2.executeUpdate("alter table inspection add ref_evapcoilcleaned text after ref_evapcoilcond");
int result219b5 = stmtu2.executeUpdate("alter table inspection add ref_fanbladecond text after ref_evapcoilcleaned");
int result219b6 = stmtu2.executeUpdate("alter table inspection add ref_fanbladecleaned text after ref_fanbladecond");
int result219b7 = stmtu2.executeUpdate("alter table inspection add ref_condensateline text after ref_fanbladecleaned");
int result219b8 = stmtu2.executeUpdate("alter table inspection add ref_condfan text after ref_condensateline");
int result219b9 = stmtu2.executeUpdate("alter table inspection add ref_doorgasket text after ref_condfan");
int result219b10 = stmtu2.executeUpdate("alter table inspection add ref_doorsclose text after ref_doorgasket");
int result219b11 = stmtu2.executeUpdate("alter table inspection add ref_productboxcond text after ref_doorsclose");
int result219b12 = stmtu2.executeUpdate("alter table inspection add ref_checkscrews text after ref_productboxcond");
int result219b13 = stmtu2.executeUpdate("alter table inspection add ref_evaptempin text after ref_checkscrews");
int result219b14 = stmtu2.executeUpdate("alter table inspection add ref_evaptempout text after ref_evaptempin");
int result219b15 = stmtu2.executeUpdate("alter table inspection add ref_boxtemp text after ref_evaptempout");
int result219b16 = stmtu2.executeUpdate("alter table inspection add ref_sightglasslevel text after ref_boxtemp");
int result219b17 = stmtu2.executeUpdate("alter table inspection add ref_refrigerant text after ref_sightglasslevel");
int result219b18 = stmtu2.executeUpdate("alter table inspection add ref_defrostclock text after ref_refrigerant");
int result219b19 = stmtu2.executeUpdate("alter table inspection add ref_defrosttimes text after ref_defrostclock");
int result219b20 = stmtu2.executeUpdate("alter table inspection add ref_doorheater text after ref_defrosttimes");
int result219b21 = stmtu2.executeUpdate("alter table inspection add ref_electrical text after ref_doorheater");
int result219b22 = stmtu2.executeUpdate("alter table inspection add ref_compamprated text after ref_electrical");
int result219b23 = stmtu2.executeUpdate("alter table inspection add ref_compampactual text after ref_compamprated");
int result219b24 = stmtu2.executeUpdate("UPDATE inspection SET im_cleanbin='-', im_limeaway='-', im_bleach='-',  im_watercomp='-',  im_icecomp='-',  im_filter='-',  im_float='-',  im_wpump='-',  im_binsensor='-',  im_testdump='-',  im_electrical='-',  im_comprated='-',  im_compactual='-',  ref_condcoilcond='-',  ref_condcoilcleaned='-',  ref_evapcoilcond='-',  ref_evapcoilcleaned='-',  ref_fanbladecond='-',  ref_fanbladecleaned='-',  ref_condensateline='-',  ref_condfan='-',  ref_doorgasket='-',  ref_doorsclose='-',  ref_productboxcond='-',  ref_checkscrews='-',  ref_evaptempin='-',  ref_evaptempout='-',  ref_boxtemp='-',  ref_sightglasslevel='-',  ref_refrigerant='-',  ref_defrostclock='-',  ref_defrosttimes='-',  ref_doorheater='-',  ref_electrical='-',  ref_compamprated='-',  ref_compampactual='-';");
int result219x = stmtu2.executeUpdate("UPDATE version set vdate='2006-03-31';");
int result219z = stmtu2.executeUpdate("UPDATE version set vnumber='2.19';");
		}

			
		if (dbvnumber.equalsIgnoreCase("2.17")) {
			Statement stmtu2 = con.createStatement();
			int result218a = stmtu2.executeUpdate("alter table quotes add combineopts tinyint(4) default 0 after techid");
			int result218b = stmtu2.executeUpdate("UPDATE quotes set combineopts='0';");
			int result218c = stmtu2.executeUpdate("UPDATE version set vnumber='2.18';");
		}
		if (dbvnumber.equalsIgnoreCase("2.16")) {
			Statement stmtu2 = con.createStatement();
			int result217a = stmtu2.executeUpdate("create table packcompare (recnum int(11) not null auto_increment, description text, packdate date default '2001-01-01', custsitenum text, sitenum text, username text, best1 int(11), best2 int(11), best3 int(11), best4 int(11), best5 int(11),better1 int(11), better2 int(11), better3 int(11), better4 int(11), better5 int(11),good1 int(11), good2 int(11), good3 int(11), good4 int(11), good5 int(11), desc1 text, desc2 text, desc3 text, primary key (recnum), unique key recnum(recnum));");
			int result217b = stmtu2.executeUpdate("UPDATE version set vnumber='2.17';");
		}
		if (dbvnumber.equalsIgnoreCase("2.15")) {
			Statement stmtu2 = con.createStatement();
			int result216a = stmtu2.executeUpdate("UPDATE version set vnumber='2.16';");
		}
		if (dbvnumber.equalsIgnoreCase("2.14")) {
			Statement stmtu2 = con.createStatement();
int result215a=stmtu2.executeUpdate("DROP TABLE IF EXISTS custformlist;");
int result215b=stmtu2.executeUpdate("CREATE TABLE custformlist (formnum int(11) NOT NULL auto_increment, custsite text, sitenum text, formdate date default '2001-01-01', formname text, formdescription text, username text,  PRIMARY KEY  (formnum), UNIQUE KEY formnum (formnum));");
int result215c=stmtu2.executeUpdate("DROP TABLE IF EXISTS custformparts;");
int result215d=stmtu2.executeUpdate("CREATE TABLE custformparts (recnum int(11) not null auto_increment, formnum int(11), custsite text, sitenum text,  formquestion text, formanswer text, primary key (recnum), unique key recnum(recnum));");
			int result215e = stmtu2.executeUpdate("alter table custformlist add servsync int(11) after username");
			int result215f = stmtu2.executeUpdate("UPDATE version set vnumber='2.15';");
		}
		if (dbvnumber.equalsIgnoreCase("2.13")) {
			Statement stmtu2 = con.createStatement();
			int result214a=stmtu2.executeUpdate("DROP TABLE IF EXISTS formlist;");
			int result214b=stmtu2.executeUpdate("CREATE TABLE formlist (formnum int(11) NOT NULL auto_increment, formname text, formdescription text, PRIMARY KEY  (formnum), UNIQUE KEY formnum (formnum));");
			int result214c=stmtu2.executeUpdate("DROP TABLE IF EXISTS formparts;");
			int result214d=stmtu2.executeUpdate("CREATE TABLE formparts (recnum int(11) not null auto_increment, formnum int(11), formquestion text, primary key (recnum), unique key recnum(recnum));");
			int result214e = stmtu2.executeUpdate("UPDATE version set vnumber='2.14';");
		}
		if (dbvnumber.equalsIgnoreCase("2.12")) {
			Statement stmtu2 = con.createStatement();
			int result213a=stmtu2.executeUpdate("alter table configcompany add enabcustomer text after yearenddate;");
			int result213b = stmtu2.executeUpdate("UPDATE version set vnumber='2.13';");
		}
		if (dbvnumber.equalsIgnoreCase("2.11")) {
			Statement stmtu2 = con.createStatement();
			int result210a = stmtu2.executeUpdate("UPDATE version set vnumber='2.12';");
		}

                v = UniVersion.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniVersion t = (UniVersion) v.elementAt(i);
                        dbvnumber  = t.getVNumber();
                }
			vnumber=combinestring(vnumber,"/"+dbvnumber);
                        return vnumber;                       
        }

	public static String doGetCompanyName()
	throws Exception
	{
		String imagename=null;
		String imagewidth=null;
		String imagehight=null;
		String compname=null;
		String complogo=null;
		String compaddress=null;
		String compphone=null;
		String enabcustomer=null;
                Vector v;
                v = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCompConfig t = (UniCompConfig) v.elementAt(i);
			imagename=t.getImage();
			imagewidth=t.getImageWidth();
			imagehight=t.getImageHight();
			compname=t.getCoName();
			complogo=t.getCoLogo();
			compaddress=t.getCoAddress();
			compphone=t.getCoPhone();
			enabcustomer = t.getEnabCustomer();
		}
		return compname;
	}

	
	public static int doGetCompanyLaptopRetention()
	throws Exception
	{
		//String laptopretentiontime=null;
		String reportemail=null;
                Vector v;
                v = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCompConfig t = (UniCompConfig) v.elementAt(i);
			
			reportemail=t.getLaptopRetentionTime();
		}
		int laptopretentiontime=Integer.parseInt(reportemail);
		return laptopretentiontime;
	}

		
	public static String doGetCompanyReportEmail()
	throws Exception
	{
		String custonlaptop=null;
                Vector v;
                v = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCompConfig t = (UniCompConfig) v.elementAt(i);
			
			custonlaptop=t.getReportEmail();
		}
		
		return custonlaptop;
	}

	
	public static String doGetCompanyCustOnLaptop()
	throws Exception
	{
		String custonlaptop=null;
                Vector v;
                v = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCompConfig t = (UniCompConfig) v.elementAt(i);
			
			custonlaptop=t.getNoCustOnLaptop();
		}
		
		return custonlaptop;
	}

	public String doVersionInfo_VDate()
        throws Exception
        {
                Vector v;
                v = UniVersion.getAllItems(con);
                int counter=0;
		String vdate  = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniVersion t = (UniVersion) v.elementAt(i);
                        vdate  = t.getVDate();
                }
//RELEASE_DATE			
			//vdate="2006-03-31";

                        return vdate;                       
        }

	public static String doGetTime_Email(String lusername)
        throws Exception
        {
                Vector v;
                v = UniEmailAdd.getAllItems(con,lusername);
                int counter=0;
		String time_email = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniEmailAdd t = (UniEmailAdd) v.elementAt(i);
                        time_email = t.getTimeEmail();
                }
                        return time_email;                       
        }



	public static String doGetTechInfo_nateid(String iusername)
        throws Exception
        {
                Vector v;
                v = UniTechInfo.getAllItems(con, iusername);
                int counter=0;
		String nate_id = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniTechInfo t = (UniTechInfo) v.elementAt(i);
                        nate_id = t.getNateID();
                }

                        return nate_id;                       
        }

	public String doGetTechInfo_password(String iusername)
        throws Exception
        {
	        UniLogin t = new UniLogin(con, iusername);
       		 String dbpasswd = t.getPasswd();
        	String dbIdCode = t.getIdCode();
        	String dbRole = t.getRole();

                        return dbpasswd;                       
        }

	public String doGetTechInfo_role(String iusername)
        throws Exception
        {
	        UniLogin t = new UniLogin(con, iusername);
       		 String dbpasswd = t.getPasswd();
        	String dbIdCode = t.getIdCode();
        	String dbRole = t.getRole();
                        return dbRole;                       
        }

	public String doGetTechInfo_transmit(String iusername)
        throws Exception
        {
                Vector v;
                v = UniTechInfo.getAllItems(con, iusername);
                int counter=0;
		String transmit = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniTechInfo t = (UniTechInfo) v.elementAt(i);
                        transmit = t.getTransmit();
                }
                        return transmit;                       
        }

	public String doGetTechInfo_department(String iusername)
        throws Exception
        {
                Vector v;
                v = UniTechInfo.getAllItems(con, iusername);
                int counter=0;
		String department = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniTechInfo t = (UniTechInfo) v.elementAt(i);
                        department = t.getDepartment();
                }
                        return department;                       
        }

	public static String doGetYearEndDate()
        throws Exception
        {
                Vector v;
                v = UniCompConfig.getAllItems(con);
                int counter=0;
		String yearenddate = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCompConfig t = (UniCompConfig) v.elementAt(i);
                        yearenddate = t.getYearEndDate();
                }
                        return yearenddate;                       
        }

	public String doGetEnabCustomer()
        throws Exception
        {
                Vector v;
                v = UniCompConfig.getAllItems(con);
                int counter=0;
		String enabcustomer = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCompConfig t = (UniCompConfig) v.elementAt(i);
                        enabcustomer = t.getEnabCustomer();
                }
                        return enabcustomer;                       
        }

	public static String doGetTechInfo_init(String iusername)
        throws Exception
        {
                Vector v;
                v = UniTechInfo.getAllItems(con, iusername);
                int counter=0;
		String tech_init = null;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniTechInfo t = (UniTechInfo) v.elementAt(i);
                        tech_init = t.getTechInit();
                }
                        return tech_init;                       
        }

	public String doGetSiteNum(int cusnum)
        throws Exception
        {
		String sitenum="";
                Vector v;
                v = UniCustomer.getIndItem(con,cusnum);
                int counter=0;
		int unmatched=0;
		int matched=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			counter++;
			sitenum=t.getSiteNum();
		}
		return sitenum;
	}

	public String doGetCustSite(int cusnum)
        throws Exception
        {
		String custsite="";
                Vector v;
                v = UniCustomer.getIndItem(con,cusnum);
                int counter=0;
		int unmatched=0;
		int matched=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			counter++;
			custsite=t.getCustSite();
		}
		return custsite;
	}


	public String doGetAllowModInstall(String iusername)
        throws Exception
        {
			Vector v;
			String mod_install = null;
			v = UniTechInfo.getAllItems(con, iusername);
			int counter=0;
			for (int i = 0 ; i < v.size(); i++)
			{
				UniTechInfo t = (UniTechInfo) v.elementAt(i);
				mod_install = t.getModInstall();
			}
			
			return mod_install;                       
        }

	public String doGetAllowDelete(String iusername)
        throws Exception
        {
			Vector v;
			String allow_delete = null;
			v = UniTechInfo.getAllItems(con, iusername);
			int counter=0;
			for (int i = 0 ; i < v.size(); i++)
			{
				UniTechInfo t = (UniTechInfo) v.elementAt(i);
				allow_delete = t.getAllowDelete();
			}
			
			return allow_delete;                       
        }

	public String doGetUserName(String iusername)
        throws Exception
        {
			Vector v;
			String username = null;
			v = UniTechInfo.getAllItems(con, iusername);
			int counter=0;
			for (int i = 0 ; i < v.size(); i++)
			{
				UniTechInfo t = (UniTechInfo) v.elementAt(i);
				username = t.getUserName();
			}
			
			return username;                       
        }


	public String doGetAllowServUpdate(String iusername)
        throws Exception
        {
			Vector v;
			String serv_update = null;
			v = UniTechInfo.getAllItems(con, iusername);
			int counter=0;
			for (int i = 0 ; i < v.size(); i++)
			{
				UniTechInfo t = (UniTechInfo) v.elementAt(i);
				serv_update = t.getServUpdate();
			}
			
			return serv_update;                       
        }


	public String doGetServSync(String iusername)
        throws Exception
        {
			Vector v;
			String servsync = null;
			v = UniTechInfo.getAllItems(con, iusername);
			int counter=0;
			for (int i = 0 ; i < v.size(); i++)
			{
				UniTechInfo t = (UniTechInfo) v.elementAt(i);
				servsync= t.getServSync();
			}
			
			return servsync;                       
        }


	public String doGetEditCompPhoneList(String iusername)
        throws Exception
        {
			Vector v;
			String edit_compphonelist = null;
			v = UniTechInfo.getAllItems(con, iusername);
			int counter=0;
			for (int i = 0 ; i < v.size(); i++)
			{
				UniTechInfo t = (UniTechInfo) v.elementAt(i);
				edit_compphonelist= t.getEditCompPhoneList();
			}
			
			return edit_compphonelist;                       
        }


	public String doGetCreateWorksheet(String iusername)
        throws Exception
        {
			Vector v;
			String create_worksheet = null;
			v = UniTechInfo.getAllItems(con, iusername);
			int counter=0;
			for (int i = 0 ; i < v.size(); i++)
			{
				UniTechInfo t = (UniTechInfo) v.elementAt(i);
				create_worksheet = t.getCreateWorksheet();
			}
			
			return create_worksheet;                       
        }

	public String doGetAllowModServAdmin(String iusername)
        throws Exception
        {
			Vector v;
			String mod_servadmin = null;
			v = UniTechInfo.getAllItems(con, iusername);
			int counter=0;
			for (int i = 0 ; i < v.size(); i++)
			{
				UniTechInfo t = (UniTechInfo) v.elementAt(i);
				mod_servadmin = t.getModServAdmin();
			}
			
			return mod_servadmin;                       
        }

	public String doGetAllowModAirBal(String iusername)
        throws Exception
        {
			Vector v;
			String mod_airbal = null;
			v = UniTechInfo.getAllItems(con, iusername);
			int counter=0;
			for (int i = 0 ; i < v.size(); i++)
			{
				UniTechInfo t = (UniTechInfo) v.elementAt(i);
				mod_airbal = t.getModAirBal();
			}
			
			return mod_airbal;                       
        }



	public static String doGetTechInfo_truck(String iusername)
        throws Exception
        {
                Vector v;
		String truck_num = null;
                v = UniTechInfo.getAllItems(con, iusername);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniTechInfo t = (UniTechInfo) v.elementAt(i);
                        truck_num = t.getTruckNum();
                }

                        return truck_num;                       
        }

	public static double getRandomNumber (double maxValue)
	{
		return Math.random() * maxValue;

	}

	private void doListEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
	{
        Statement stmt = con.createStatement();
	String aid = req.getParameter("trans");
	Vector v;
	v=UniEntry.getAllItems(con, aid);
	printHeader(req, res, out, username);
	String aguid = null;
	String classdir = (String) config.getInitParameter("web.classdir");
	out.println("<p>");
	out.println("<table BORDER COLS=5 WIDTH=\"100%\" BGCOLOR=\"#FFFFFF\" NOSAVE >");
	out.println("<tbody>");
	out.println("<tr>");
	out.println("<th>Posted Date</th><th>Number</th><th>Description</th><th>Account</th><th>Amount</th>");
	out.println("</tr>");
	for (int i=0; i < v.size(); i++) {
		UniEntry b = (UniEntry) v.elementAt(i);
		String aname = b.getAccountName();
		out.println("<tr>");
		aguid= b.getAccountGuId();
		out.println("<td>");
		String tguid = b.getTransGuId();
		String tdate = b.getTDatePosted();
		out.println(tdate);
		out.println("</td>");
		out.println("<td>");
		out.println(b.getTNum() );
		out.println("</td>");
		out.println("<td>");
		out.println(b.getDescription());
		out.println("</td>");
		out.println("<td>");
		out.println(aname);
		out.println("</td>");
		out.println("<td>");
		double amntnum = b.getAmountNum();
		double amntden = b.getAmountDenom();
		double tranamount = amntnum/amntden;
		String balString = NumberFormat.getCurrencyInstance().format(tranamount);
		out.println(balString);
		out.println("</td>");
		out.println("</tr>");
		}
		out.println("</tbody>");
		out.println("</table>");
		out.println("<p ALIGN=left>");
		out.println("<a href=\""+classdir+"UniCash?action=listtrans&account="+aguid+"\">Continue</a></p>");
		printFooter(req, res, out, username);
		con.close();
	}


	private void doConfigMenu(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
	{


		printHeader(req, res, out, username);
		String classdir = (String) config.getInitParameter("web.classdir");

		out.println("<p>");
		out.println("<table COLS=2 WIDTH=\"50%\" BGCOLOR=\"#FFFFFF\" NOSAVE >");


		out.println("<center><h2>Configuration Menu</h2></center>");
		//this is main table outline
		out.println("<tbody>");

		out.println("<tr>");
		out.println("<td>");
		out.println("<a href=\""+classdir+"UniCash?action=listaccount\">List Accounts</a>");
		out.println("</td>");
		out.println("<td>");
		out.println("<a href=\""+classdir+"UniCash?action=addaccount\">Add Account</a>");
		out.println("</td>");
		out.println("</tr>");

		out.println("<tr>");
		out.println("<td>");
		out.println("<a href=\""+classdir+"UniCash?action=listusers\">List Users</a>");
		out.println("</td>");
		out.println("<td>");
		out.println("<a href=\""+classdir+"UniCash?action=loginadd\">Add User</a>");
		out.println("</td>");
		out.println("</tr>");

		out.println("<tr>");
		out.println("<td>");
		out.println("</td>");
		out.println("<td>");
		out.println("<a href=\""+classdir+"UniCash?action=addtype\">Add Account Type</a>");
		out.println("</td>");
		out.println("</tr>");

		out.println("</tbody>");
		out.println("</table>");

		printFooter(req, res, out, username);
		con.close();

	}


private void doAddTypeFrm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
            printHeader(req, res, out, username);
            String classhome = (String) config.getInitParameter("web.classdir");
            out.println("<p><form action= " + classhome + "UniCash?action=savetype method=POST> ");
            out.println("<table COLS=2 WIDTH=\"50%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>NAME:</td>");
            out.println("<td><input type=\"text\" name=\"typecd\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>Description</td>");
            out.println("<td><input type=\"text\" name=\"desc\"></td>");

            out.println("<tr>");
            out.println("<td>Submit</td>");

            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
	    printFooter(req, res, out, username);
		con.close();
        }

private void doSaveType(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String description = req.getParameter("desc");
                String itemIdString = req.getParameter("typecd");

                if (itemIdString  == null || itemIdString.length() < 1)
                  {
                      out.println("Item name is missing - Use back key on your browser");
                      return;
                  }
		 printHeader(req, res, out, username);
                 UniType.addTypeItem(con, description, itemIdString);
                 out.println("Your item has been added to the database");
                 printFooter(req, res, out, username);
		con.close();
            }



private void doAddComplCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		printHeader(req, res, out, username);
            out.println("   <center>");
            out.println("<p><br>(Enter New Catagory)</center>");
            out.println("<p><form action= " + classdir + "UniCash?action=savecomplcat method=POST> ");
            out.println("<br>&nbsp;");
            out.println("<br>&nbsp; ");
            out.println("<table BORDER COLS=2 WIDTH=\"50%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>Category:</td>");
            out.println("<td><input type=\"text\" name=\"catname\"></td>");
            out.println("</tr> ");
            out.println("<td>Submit</td>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
		con.close();
        }

private void doDownloadTimeCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		int catnum=0;
                String  category="";
                String  code="";
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			Statement stmtu = con.createStatement();
			int result=stmtu.executeUpdate("DROP TABLE IF EXISTS time_cats;");
			int result2=stmtu.executeUpdate("CREATE TABLE time_cats ( catnum int(11) not null auto_increment, category text not null, code text, primary key (catnum), unique key catnum (catnum), key catnum_2 (catnum));");
	printHeader(req, res, out, username);
                Vector v;
                v = TimeCat.getAllItems(conu);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	TimeCat t = (TimeCat) v.elementAt(i);
                      	catnum = t.getCatnum();
                        category = t.Category();
			code = t.Code();
		TimeCat.addTimeCat(con, category, code);
                }
		out.println("Time Sheet Categories Updated<br><a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		con.close();
		conu.close();
            }

private void doDownloadCompConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String  psform="";
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
                Vector v;
                v = ResPsForm.getAllItems(conu);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	ResPsForm t = (ResPsForm) v.elementAt(i);
                      	psform = t.getResPsForm();
		ResPsForm.AddItem(con, psform);
                }
		out.println("Res Prev Form Updated</p>");
		
				String imagename=null;
		String imagewidth=null;
		String imagehight=null;
		String compname=null;
		String complogo=null;
		String compaddress=null;
		String compphone=null;
		String useletterhead=null;
		String enabcustomer=null;
		String reportemail=null;
		String yearenddate=null;
                Vector vc;
                vc = UniCompConfig.getAllItems(conu);
		int counter=0;
                for (int i = 0 ; i < vc.size(); i++)
                {
                       	UniCompConfig tc = (UniCompConfig) vc.elementAt(i);
			imagename=tc.getImage();
			imagewidth=tc.getImageWidth();
			imagehight=tc.getImageHight();
			compname=tc.getCoName();
			complogo=tc.getCoLogo();
			compaddress=tc.getCoAddress();
			compphone=tc.getCoPhone();
			useletterhead=tc.getUseLetterHead();
			enabcustomer=tc.getEnabCustomer();
			reportemail=tc.getReportEmail();
			yearenddate=tc.getYearEndDate();
			UniCompConfig.AddItem(con, imagename, imagewidth, imagehight, compname, complogo, compaddress, compphone, useletterhead, enabcustomer, reportemail, yearenddate);
		}
		
		out.println("Company Configuration Updated<br><a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		con.close();
		conu.close();
            }

private void doUploadCompConfig(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String  psform="";
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
                Vector v;
                v = ResPsForm.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	ResPsForm t = (ResPsForm) v.elementAt(i);
                      	psform = t.getResPsForm();
		ResPsForm.AddItem(conu, psform);
                }
		out.println("Res Prev Form Updated<br></p>");
		String imagename=null;
		String imagewidth=null;
		String imagehight=null;
		String compname=null;
		String complogo=null;
		String compaddress=null;
		String compphone=null;
		String useletterhead=null;
		String enabcustomer=null;
		String reportemail=null;
		String yearenddate=null;
                Vector vc;
                vc = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < vc.size(); i++)
                {
                       	UniCompConfig tc = (UniCompConfig) vc.elementAt(i);
			imagename=tc.getImage();
			imagewidth=tc.getImageWidth();
			imagehight=tc.getImageHight();
			compname=tc.getCoName();
			complogo=tc.getCoLogo();
			compaddress=tc.getCoAddress();
			compphone=tc.getCoPhone();
			useletterhead=tc.getUseLetterHead();
			enabcustomer=tc.getEnabCustomer();
			reportemail=tc.getReportEmail();
			yearenddate=tc.getYearEndDate();
			UniCompConfig.AddItem(conu, imagename, imagewidth, imagehight, compname, complogo, compaddress, compphone, useletterhead, enabcustomer, reportemail, yearenddate);		
		}
		out.println("Company Configuration Updated<br><a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
		con.close();
		conu.close();
            }

private void doUploadTimeCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
				int catnum=0;
                String  category= "";
                String  code= "";
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
			Statement stmtu = conu.createStatement();
			int result=stmtu.executeUpdate("DROP TABLE IF EXISTS time_cats;");
			int result2=stmtu.executeUpdate("CREATE TABLE time_cats ( catnum int(11) not null auto_increment, category text not null, code text, PRIMARY KEY  (catnum),UNIQUE KEY catnum (catnum),KEY catnum_2 (catnum));");
	printHeader(req, res, out, username);
                Vector v;
                v = TimeCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	TimeCat t = (TimeCat) v.elementAt(i);
                      	catnum = t.getCatnum();
                        category = t.Category();
			code = t.Code();
		TimeCat.addTimeCat(conu, category, code);
                }
		con.close();
		conu.close();
                 res.sendRedirect(""+classdir+"UniCash?action=edittimecats");
            }

private void doSyncDbServer(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		String dbserver=doGetDbServer();
		String dbpasswd=doGetDbPassword();
		String dbuser=doGetDbUser();
		String dbname=doGetDbName();
		String localdate=null;
		String remotedate=null;
		String protocol = (String) config.getInitParameter("db.protocol");
		String subProtocol = (String) config.getInitParameter("db.subprotocol");
		conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
		UniDbServer.SyncTable(conu, con,"No");
		con.close();
		conu.close();
		out.println("DbServer Config Updated<br><a href=\""+classdir+"UniCash?action=showhomepage\">Continue</a></p>");
                //res.sendRedirect(""+classdir+"UniCash?action=top");
            }


private void doUpdateTimeCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String  catnum= req.getParameter("catnum");
                String  category= req.getParameter("description");
                String  code= req.getParameter("code");
                 TimeCat.UpdateItem(con, catnum, category, code);
		con.close();
                 res.sendRedirect(""+classdir+"UniCash?action=edittimecats");
            }


private void doSaveComplCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String CatName = req.getParameter("catname");
                if (CatName  == null || CatName.length() < 1)
                  {
                      out.println("Category Name is missing - Use back key on your browser");
                      return;
                  }
                 UniComplCat.addCompCat(con, CatName);
		con.close();
                 res.sendRedirect(""+classdir+"UniCash?action=ecompletioncodes&adminok=1");
            }

private void doSaveDocCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String CatName = req.getParameter("catname");
                if (CatName  == null || CatName.length() < 1)
                  {
                      out.println("Category Name is missing - Use back key on your browser");
                      return;
                  }
                 DocCat.addCompCat(con, CatName);
		con.close();
                 res.sendRedirect(""+classdir+"UniCash?action=showdoccatlist&adminok=1");
            }


private void doSaveDoc(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String tcatnum = req.getParameter("catnum");
		String docdesc = req.getParameter("description");
		String filepath = req.getParameter("filepath");
		String docdate=req.getParameter("docdate");
                if (docdesc == null || docdesc.length() < 1||filepath==null ||filepath.length()< 1 )
                  {
                      out.println("Document Description or File Path is missing - Use back key on your browser");
                      return;
                  }
                 Docs.addItem(con, tcatnum, filepath, doFormatDateDb(getDateDb(docdate)),"","","",docdesc);
			con.close();
                 res.sendRedirect(""+classdir+"UniCash?action=showdoccatlist&adminok=1");
            }

private void doAddDocFrm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
                String catnum = req.getParameter("catnum");
		String filepath="";
		String description="";
		String action=req.getParameter("action");
		String tdocid=req.getParameter("docid");
			if (action.equalsIgnoreCase("editdoc"))
			{
			// add routine to get document info here
			}

		printHeader(req, res, out, username);
            out.println("   <center>");
            out.println("<p><br>(Enter New Catagory)</center>");
            out.println("<p><form action= " + classdir + "UniCash?action=savedoc method=POST> ");
            out.println("<br>&nbsp;");
            out.println("<br>&nbsp; ");
            out.println("<table BORDER COLS=2 WIDTH=\"50%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>DocDate:</td>");
            out.println("<td><input type=\"text\" name=\"docdate\" value=\""+s+"\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>FilePath:</td>");
            out.println("<td><input type=\"text\" name=\"filepath\" value=\""+filepath+"\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>Description:</td>");
            out.println("<td><input type=\"text\" name=\"description\" value=\""+description+"\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<input type=\"hidden\" name=\"catnum\" value=\""+catnum+"\"></td>");
            out.println("<td>Submit</td>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
		con.close();
        }

private void doAddDocCatFrm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		printHeader(req, res, out, username);
            out.println("   <center>");
            out.println("<p><br>(Enter New Catagory)</center>");
            out.println("<p><form action= " + classdir + "UniCash?action=savedoccat method=POST> ");
            out.println("<br>&nbsp;");
            out.println("<br>&nbsp; ");
            out.println("<table BORDER COLS=2 WIDTH=\"50%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>Category:</td>");
            out.println("<td><input type=\"text\" name=\"catname\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>Submit</td>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
		con.close();
        }

private void doAddCatFrm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String action = req.getParameter("action");
                String tcatnum = req.getParameter("catnum");
                        String description = "-";
                        String category = "-";
			String keyprefix= "-";
			int catnum=0;
		printHeader(req, res, out, username);
			if (action.equalsIgnoreCase("addcat"))
			{
			description="-";
			category="-";
			keyprefix="-";
            out.println("<p><form action= " + classdir + "UniCash?action=savecat method=POST> ");
			} else 
			if (action.equalsIgnoreCase("editcat"))
			{
                Vector v;
                v = UniInvCat.getIndItem(con, tcatnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniInvCat t = (UniInvCat) v.elementAt(i);
                      	catnum = t.getCatnum();
                        description = t.Description();
                        category = t.Category();
			keyprefix= t.KeyPrefix();
			}
            out.println("<p><form action= " + classdir + "UniCash?action=updatecat method=POST> ");
            out.println("<input type=\"hidden\" name=\"catnum\" value=\""+catnum+"\">");
		}
            out.println("<br>&nbsp;");
            out.println("<br>&nbsp; ");
            out.println("<table BORDER COLS=2 WIDTH=\"75%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>Category:</td>");
            out.println("<td><input type=\"text\" name=\"catname\" value=\""+category+"\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>Description</td>");
            out.println("<td><input type=\"text\" name=\"desc\" value=\""+description+"\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>Key Code Prefix</td>");
            out.println("<td><input type=\"text\" name=\"keyprefix\" value=\""+keyprefix+"\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>Submit</td>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");



		con.close();
        }

private void doAddPackageCatFrm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		printHeader(req, res, out, username);
            out.println("   <center>");
            out.println("<p><br>(Enter New Catagory)</center>");
            out.println("<p><form action= " + classdir + "UniCash?action=savepackagecat method=POST> ");
            out.println("<br>&nbsp;");
            out.println("<br>&nbsp; ");
            out.println("<table BORDER COLS=2 WIDTH=\"50%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>Description</td>");
            out.println("<td><input type=\"text\" name=\"description\"></td></tr>");
            out.println("<tr>");
            out.println("<td>Material Discount Percentage</td>");
            out.println("<td><input type=\"text\" name=\"adjper\"></td></tr>");
            out.println("<tr>");
            out.println("<td>Submit</td>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
		con.close();
        }


private void doAddQuoteCatFrm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		printHeader(req, res, out, username);
            out.println("   <center>");
            out.println("<p><br>(Enter New Catagory)</center>");
            out.println("<p><form action= " + classdir + "UniCash?action=savequotecat method=POST> ");
            out.println("<br>&nbsp;");
            out.println("<br>&nbsp; ");
            out.println("<table BORDER COLS=2 WIDTH=\"50%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>Category:</td>");
            out.println("<td><input type=\"text\" name=\"catname\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>Description</td>");
            out.println("<td><input type=\"text\" name=\"desc\"></td>");
            out.println("<tr>");
            out.println("<td>Submit</td>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
		con.close();
        }

private void doUpdateCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String catnum = req.getParameter("catnum");
                String description = req.getParameter("desc");
                String CatName = req.getParameter("catname");
		String keyprefix = req.getParameter("keyprefix");
                if (keyprefix == null || keyprefix.length() < 3)
	               {
                         out.println("Keycode Prefix is missing or under 3 digits long - Use the back key on your browser");
                         return;
	                 }
                if (description == null || description.length() < 1)
	               {
                         out.println("Item description is missing - Use the back key on your browser");
                         return;
	                 }
                if (CatName  == null || CatName.length() < 1)
                  {
                      out.println("Category Name is missing - Use back key on your browser");
                      return;
                  }
		 printHeader(req, res, out, username);
                 UniInvCat.UpdateItem(con, catnum, CatName, description, keyprefix);
                 out.println("Your item has been updated in the database<br>");
		doShowCatList(req, res, out, username);		
		con.close();
            }

private void doSaveCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String description = req.getParameter("desc");
                String CatName = req.getParameter("catname");
		String keyprefix = req.getParameter("keyprefix");
                if (keyprefix == null || keyprefix.length() < 3)
	               {
                         out.println("Keycode Prefix is missing or under 3 digits long - Use the back key on your browser");
                         return;
	                 }
                if (description == null || description.length() < 1)
	               {
                         out.println("Item description is missing - Use the back key on your browser");
                         return;
	                 }
                if (CatName  == null || CatName.length() < 1)
                  {
                      out.println("Category Name is missing - Use back key on your browser");
                      return;
                  }
		 printHeader(req, res, out, username);
                 UniInvCat.addInvCat(con, CatName, description, keyprefix);
                 out.println("Your item has been added to the database<br>");
		doShowCatList(req, res, out, username);		
		con.close();
            }


private void doSavePackageCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String description = req.getParameter("description");
                String adjper = req.getParameter("adjper");

                if (description == null || description.length() < 1)
	               {
                         out.println("Item description is missing - Use the back key on your browser");
                         return;
	                 }

		 printHeader(req, res, out, username);
                 UniPkgCats.addPkgCat(con, description,adjper);
                 out.println("Your item has been added to the database<br>");
		res.sendRedirect(""+classdir+"UniCash?action=showpackagecatlist");
		con.close();
            }

private void doSaveQuoteCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                // this action expects that the item description is sent in
                String description = req.getParameter("desc");
                String CatName = req.getParameter("catname");

                if (description == null || description.length() < 1)
	               {
                         out.println("Item description is missing - Use the back key on your browser");
                         return;
	                 }

                if (CatName  == null || CatName.length() < 1)
                  {
                      out.println("Category Name is missing - Use back key on your browser");
                      return;
                  }
		 printHeader(req, res, out, username);
                 UniQuoteClass.addInvCat(con, CatName, description);
                 out.println("Your item has been added to the database<br>");
		res.sendRedirect(""+classdir+"UniCash?action=showquotecatlist");
		con.close();
            }

private void doAddAcctFrm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
            printHeader(req, res, out, username);
            String classhome = (String) config.getInitParameter("web.classdir");
            out.println("<p><form action= " + classhome + "UniCash?action=saveaccount method=POST> ");
            out.println("<table COLS=2 WIDTH=\"50%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>Account Name:</td>");
            out.println("<td><input type=\"text\" name=\"acctname\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>Description</td>");
            out.println("<td><input type=\"text\" name=\"desc\"></td>");

            out.println("<tr>");
            out.println("<td>Type:</td>");
            out.println("<td><input type=\"text\" name=\"type\"></td>");
            out.println("</tr> ");
            out.println("<tr>");
            out.println("<td>Submit</td>");

            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
	    printFooter(req, res, out, username);
		con.close();
        }

private void doSelectAccount(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		{

        printHeader(req, res, out, username);
            String classdir = (String) config.getInitParameter("web.classdir");
	String billid=req.getParameter("billid");
	String action = req.getParameter("action");
    	Vector v;
    	v=UniAcct.getAllItems(con);
        out.println("<p><form action= " + classdir + "UniCash?action=paybillform&billid="+billid+" method=POST> ");
        out.println("<table BORDER COLS=2 WIDTH=\"100%\" NOSAVE > ");
	out.println("Select account to pay bill from: ");    
        out.println("<td WIDTH=200 ALIGN=CENTER><SELECT  name=\"transcat\">");
	for (int i=0; i < v.size(); i++)
			{
			UniAcct b = (UniAcct) v.elementAt(i);
			String aname = b.getAccountName();
			String atype = b.getAType();
			if (atype.equals("BANK")||atype.equals("CREDIT")) 
			{
			out.println("<OPTION>"+aname);
			}
			}
        out.println("</SELECT>");

        out.println("</td>");
	    
	out.println("<tr>");
        out.println("<td><input type=\"submit\" name=\"submit\"></td>");
        out.println("</tr>");
        out.println("</table>");
	out.println("</form> ");
	printFooter(req, res, out, username);
	con.close();

	}


private void doBankTransForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
	    String aguid="";
	    String inputid="";
	    String bbillguid="";
	    String bmemo="";
	    String bpayee="";
	    String bpaydate="";
	    String bduedate="";
	    double bamount=0.0;
	    String action = req.getParameter("action");
	    if (action.equals("paybillform")){
	    String taname=req.getParameter("transcat");
	    aguid=UniTrans.getAccountID(con, taname);
	    	inputid = req.getParameter("billid");
                Vector j;
                j = UniBills.getAllItems(con);

                for (int i = 0 ; i < j.size(); i++)
                {
                       	UniBills t = (UniBills) j.elementAt(i);
			if (inputid.equals(t.getBillguid()))
			{
				bbillguid=t.getBillguid();
				bmemo=t.getMemo();
				bpayee=t.getPayee();
				bpaydate=t.getPaydate();
				bduedate=t.getDuedate();
				bamount=t.getAmount();
			}	
		}
	    } else {
	    aguid=req.getParameter("aguid");
	    }
	    String account = null;
	    Vector v;
	    v=UniAcct.getAllItems(con);
	    String actype = null;
	    for (int i=0; i < v.size(); i++)
			{
			UniAcct b = (UniAcct) v.elementAt(i);
			if (aguid.equals(b.getAGuId()))
			{
			account = b.getAccountName();
			actype = b.getAType();
			}
			}
            printHeader(req, res, out, username);
            String classdir = (String) config.getInitParameter("web.classdir");
            out.println("   <center>");
            out.println("<p><br>New Transaction for \""+account+"\"</center>");
	    if (action.equals("paybillform")){
            out.println("<p><form action= " + classdir + "UniCash?action=savetrans&from=bill&billid="+inputid+"&auid="+aguid+" method=POST> ");
	    } else {
            out.println("<p><form action= " + classdir + "UniCash?action=savetrans&&from=new&auid="+aguid+" method=POST> ");
	    }
            out.println("<br>&nbsp;");
            out.println("<br>&nbsp; ");
            out.println("<table BORDER COLS=1 NOSAVE > ");
	    out.println("<tr><td><table border cols=6 NOSAVE> "); 
		if (actype.equals("BANK"))
			{	
            out.println("<th WIDTH=100>Date</th><th WIDTH=40>Number</th><th WIDTH=360>Description</th><th width=200>Category</th><th WIDTH=110>Credit<br>(+)</th><th WIDTH=100>Debit<br>(-)</th></table>");
			}
		
		if (actype.equals("CREDIT"))
			{	
            out.println("<th WIDTH=100>Date</th><th WIDTH=40>Number</th><th WIDTH=360>Description</th><th width=200>Category</th><th WIDTH=110>Payment<br>(+)</th><th WIDTH=100>Charge<br>(-)</th></table>");
			}
	    out.println("</tr>");
            out.println("<tr>");
	    out.println("<td><table boder cols=6 NOSAVE> ");
            out.println("<td WIDTH=60 ALIGN=CENTER><input type=\"text\" name=\"postdate\" size=10></td>");
            out.println("<td WIDTH=60 ALIGN=CENTER><input type=\"text\" name=\"trannum\" size=5></td>");
            out.println("<td WIDTH=300 ALIGN=CENTER><input type=\"text\" name=\"transdesc\" value=\""+bpayee+"\" size=38></td>");
            out.println("<td WIDTH=200 ALIGN=CENTER><SELECT  name=\"transcat\">");
	    for (int i=0; i < v.size(); i++)
			{
			UniAcct b = (UniAcct) v.elementAt(i);
			String aname = b.getAccountName();
		out.println("<OPTION>"+aname);
				}
	    out.println("</SELECT>");

	    out.println("</td>");
            out.println("<td WIDTH=65 ALIGN=CENTER><input type=\"text\" name=\"transcredit\" size=10></td>");
            out.println("<td WIDTH=65 ALIGN=CENTER><input type=\"text\" name=\"transdebit\" value=\""+bamount+"\" size=10></td>");
	    out.println("</tr>");
	    out.println("</table>");
            out.println("Memo<br><input type=\"text\" name=\"tranmemo\" size=70 value=\""+bmemo+"\"></td>");
            
            out.println("</tr>");

	    out.println("<tr>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
	    printFooter(req, res, out, username);
		con.close();
        }

private void doSaveAccount(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                // this action expects that the item description is sent in
                String description = req.getParameter("desc");
                String TypeIdString = req.getParameter("type");
                String AccountNameString = req.getParameter("acctname");

                if (description == null || description.length() < 1)
	               {
                         // missing description parameter
                         out.println("Item description is missing - Use the back key on your browser");
                         return;
	                 }

                if (TypeIdString  == null || TypeIdString.length() < 1)
                  {
                      out.println("Type is missing - Use back key on your browser");
                      return;
                  }
                if (AccountNameString  == null || AccountNameString.length() < 1)
                  {
                      out.println("Account Name is missing - Use back key on your browser");
                      return;
                  }
                 
		 printHeader(req, res, out, username);
                 //int itemId = Integer.parseInt(itemIdString);
                 UniAcct.addAccntItem(con, description, AccountNameString, TypeIdString);
                 out.println("Your item has been added to the database");

                 printFooter(req, res, out, username);
			con.close();
            }

private void doDeleteCharge(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception, NumberFormatException
		        {
                            

                        String custnum = req.getParameter("custnum");
                        String callslip = req.getParameter("callslip");
			String psource = req.getParameter("psource");
                        String trecnum = req.getParameter("crecnum");
                        int crecnum = Integer.parseInt(trecnum);
                        String tsrecnum = req.getParameter("chargerec");
                        int srecnum = Integer.parseInt(tsrecnum);
                        String custstart = req.getParameter("custstart");
	                String custstop = req.getParameter("custstop");
                        
                        UniSvcCharges.deleteItem(con,srecnum);
                        res.sendRedirect(""+classdir+"UniCash?action="+psource+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip);
			con.close();
	}

private void doEditCharge(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String custnum = req.getParameter("custnum");
                        String callslip = req.getParameter("callslip");
                        String tchargerec = req.getParameter("chargerec");
                        int chargerec = Integer.parseInt(tchargerec);
                        String trecnum = req.getParameter("crecnum");
			String psource = req.getParameter("psource");
                        int crecnum = Integer.parseInt(trecnum);
			String description=null;
			int frcode = 0;
			double quant=0;
			double price=0;
			double total=0;
                        String tsrecnum = req.getParameter("chargerec");
                        int srecnum = Integer.parseInt(tsrecnum);
                        String custstart = req.getParameter("custstart");
	                String custstop = req.getParameter("custstop");
                        
        		Vector v;
        		v = UniSvcCharges.getIndItem(con, chargerec);
		
                	for (int i = 0 ; i < v.size(); i++)
                		{
                		UniSvcCharges t = (UniSvcCharges) v.elementAt(i);
				chargerec=t.getRecnum();
				callslip=t.getCallslip();
				description=t.getDescript();
				quant=t.getQuant();
				price=t.getPrice();
				total=t.getTotal();
				frcode = t.getFrcode();
				}

                        out.println("<html>");
                        out.println("<head>");
                        out.println("<title>Edit Charges</title>");
                        out.println("</head>");
                        out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateedcharge\" name=\"addcall\">");
                        out.println("<table size=100% border=1>");
                        out.println("<tr><td>Description</td><td>");
                        out.println("<input type=\"text\" name=\"service\" value=\""+description+"\"></td>");
                        out.println("</tr>");
                 
                        out.println("<tr><td>Price</td><td>");
                        out.println("<input type=\"text\" name=\"charge\" value=\""+price+"\"></td>");
                        out.println("</tr>");
                        out.println("<tr><td>Quantity</td><td>");
                        out.println("<input type=\"text\" name=\"quantity\" value=\""+quant+"\"></td></tr>");
                        out.println("</table>");
                        out.println("<CENTER>");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"servicestart\" VALUE=\""+custstart+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"callslip\" VALUE=\""+callslip+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"servicestop\" VALUE=\""+custstop+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"crecnum\" VALUE=\""+crecnum+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"custnum\" VALUE=\""+custnum+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"chargerec\" VALUE=\""+chargerec+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"frcode\" VALUE=\""+frcode+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"psource\" VALUE=\""+psource+"\">");
                        out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
                        out.println("<INPUT TYPE=\"reset\">");
                        out.println("</CENTER>");
			con.close();
}          



private void doEditCharge2(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String custnum = req.getParameter("custnum");
                        String callslip = req.getParameter("callslip");
                        String tchargerec = req.getParameter("chargerec");
                        int chargerec = Integer.parseInt(tchargerec);
                        String trecnum = req.getParameter("crecnum");
                        int crecnum = Integer.parseInt(trecnum);
			String description=null;
			double quant=0;
			double price=0;
			double total=0;
			int frcode=0;
                        String tsrecnum = req.getParameter("chargerec");
                        int srecnum = Integer.parseInt(tsrecnum);
                        String custstart = req.getParameter("custstart");
	                String custstop = req.getParameter("custstop");
                        
        		Vector v;
        		v = UniSvcCharges.getIndItem(con, chargerec);
		
                	for (int i = 0 ; i < v.size(); i++)
                		{
                		UniSvcCharges t = (UniSvcCharges) v.elementAt(i);
				chargerec=t.getRecnum();
				callslip=t.getCallslip();
				description=t.getDescript();
				quant=t.getQuant();
				price=t.getPrice();
				total=t.getTotal();
				frcode=t.getFrcode();
				}

                        out.println("<html>");
                        out.println("<head>");
                        out.println("<title>Edit Charges</title>");
                        out.println("</head>");
                        out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateedcharge2\" name=\"addcall\">");
                        out.println("<table size=100% border=1>");
                        out.println("<tr><td>Description</td><td>");
                        out.println("<input type=\"text\" name=\"service\" value=\""+description+"\"></td>");
                        out.println("</tr>");
                 
                        out.println("<tr><td>Price</td><td>");
                        out.println("<input type=\"text\" name=\"charge\" value=\""+price+"\"></td>");
                        out.println("</tr>");
                        out.println("<tr><td>Quantity</td><td>");
                        out.println("<input type=\"text\" name=\"quantity\" value=\""+quant+"\"></td></tr>");
                        out.println("</table>");
                        out.println("<CENTER>");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"servicestart\" VALUE=\""+custstart+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"callslip\" VALUE=\""+callslip+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"servicestop\" VALUE=\""+custstop+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"crecnum\" VALUE=\""+crecnum+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"custnum\" VALUE=\""+custnum+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"frcode\" VALUE=\""+frcode+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"chargerec\" VALUE=\""+chargerec+"\">");
                        out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
                        out.println("<INPUT TYPE=\"reset\">");
                        out.println("</CENTER>");
			con.close();
}          

private void doDeleteReminder(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception, NumberFormatException
		        {
                        String reminderid = req.getParameter("reminderid");
                        UniRemind.deleteItem(con,reminderid);
                        res.sendRedirect(""+classdir+"UniCash?action=reminders");
			con.close();
	}

private void doDeleteInvTrans(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception, NumberFormatException
		        {
		String ttransnum = req.getParameter("transnum");
		String psource=req.getParameter("psource");
		int transnum=Integer.parseInt(ttransnum);
		String keycode = req.getParameter("keycode");
		String callslip = req.getParameter("callslip");
		String crecnum=req.getParameter("crecnum");
		String custnum=req.getParameter("custnum");
		String keyprefix = req.getParameter("keyprefix");
                        InvUse.deleteItem(con,transnum);
			con.close();
			if (psource.equalsIgnoreCase("showinvdetail"))
			{
                        res.sendRedirect(""+classdir+"UniCash?action=showinvdetail&keycode="+keycode+"&keyprefix="+keyprefix+"");
			}
			else if (psource.equalsIgnoreCase("editcallslip")||psource.equalsIgnoreCase("editinspection"))
			{
                res.sendRedirect(""+classdir+"UniCash?action="+psource+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum);
			}
	}

private void doSaveTrans(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception, NumberFormatException
		        {
                String tfrom = req.getParameter("from");
                String description = req.getParameter("transdesc");
                String TranAName = req.getParameter("transcat");
                String TranMemo = req.getParameter("tranmemo");
                String FAccountIdString = req.getParameter("auid");
                String TranPdate = req.getParameter("postdate");
                String TransCredit = req.getParameter("transcredit");
                String TranNum = req.getParameter("trannum");
		 if (TransCredit==null|| TransCredit.length() <1)
			{
			TransCredit="0";
			}
                String TransDebit  = req.getParameter("transdebit");
		 if (TransDebit==null|| TransDebit.length() <1)
			{
			TransDebit="0";
			}
		String RemoteHost = req.getRemoteAddr();
		Double tcredit = Double.valueOf(TransCredit);
		Double tdebit = Double.valueOf(TransDebit);

                if (description == null || description.length() < 1)
	               {
                         // missing description parameter
                         out.println("Item description is missing - Use the back key on your browser");
                         return;
	                 }

                if (TranAName  == null || TranAName.length() < 1)
                  {
                      out.println("You must select an Account - Use back key on your browser");
                      return;
                  }
                if (FAccountIdString  == null || FAccountIdString.length() < 1)
                  {
                      out.println("Account ID  number is missing - Use back key on your browser");
                      return;
                  }
                 
		 printHeader(req, res, out, username);
		double tdebval = 0 - tdebit.doubleValue();
		double tcredval = 0 + tcredit.doubleValue();
		double transtot = tcredval + tdebval;
		String transguid=UniMD5.doMakeMD5(RemoteHost+getRandomNumber(transtot));
                 UniTrans.addBankTrans(con, transguid, TranPdate, TranNum, description, FAccountIdString, TranMemo, transtot, TranAName);
	    	if (tfrom.equals("bill")){
                	String billid = req.getParameter("billid");
			UniBills.deleteItem(con,billid);
	    	} 
		
                 out.println("Your item has been added to the database");
		
			con.close();
		res.sendRedirect(classdir+"UniCash?action=listentry&trans="+transguid);
            }

  private void doShowCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
                out.println("<html><head><title>Inventory System</title></head><body><table width=60% border=1>");
                out.println("<tr>");
                out.println("<th>Category</th><th>Description</th><th>Key Code Prefix</th>");
                out.println("</tr>");
                Vector v;
                v = UniInvCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniInvCat t = (UniInvCat) v.elementAt(i);
                      	int CatNum = t.getCatnum();
                        String description = t.Description();
                        String category = t.Category();
			String keyprefix= t.KeyPrefix();
                        out.println("<tr><td>");
                        out.println("<a href="+classdir+"UniCash?action=showcatitems&catnum="+CatNum+"&keyprefix="+keyprefix+">"+category+"</a></td>");
                        out.println("</td>");
                        out.println("<td>" + description + "</td>");
                        out.println("</td>");
                        out.println("<td>" + keyprefix + "</td>");
                        out.println("<td><a href="+classdir+"UniCash?action=editcat&catnum="+CatNum+">Edit</a></td>");
                        out.println("</tr>");
                }
                out.println("</table>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addcat>Add a Category</a></body></html>");
		int phonelistperm=Integer.parseInt(doGetAllowModServAdmin(username));
		if (phonelistperm==1) 
			{
out.println("<p><br><a href="+classdir+"UniCash?action=uploadinvcats>Update Server (MUST HAVE INTERNET CONNECT)</a><br><br>");
			}

			con.close();
        }

  
private void doShowInvItems(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		String custnum=req.getParameter("custnum");
		String callslip=req.getParameter("callslip");
		String cdate=req.getParameter("cdate");
		String crecnum=req.getParameter("crecnum");
		String keyprefix=req.getParameter("keyprefix");
		String psource=req.getParameter("psource");

		String tquant=null;
		String itemname=null;
		String descript=null;
		String minquant=null;
		String partnumber=null;
		String catnum=req.getParameter("catnum");


        	out.println("<table border=1 width=100%>");
                out.println("<th>Item Name</th><th>KeyCode</th><th>Current Count</th>");
		int counter=0;
		Vector v;
		v = InvKeyCodes.getPrefixItems(con, keyprefix);
		for (int i = 0 ; i < v.size(); i++)
                {
		InvKeyCodes t = (InvKeyCodes) v.elementAt(i);
               	int itemnum = t.getCatID();        
		itemname=t.getDescription();
		String keycode = t.getKeycodep();           // THIS IS KEYCODE
		partnumber = t.getPartNumber();
		//minquant=t.getMinQuant();
		//tquant=t.getTQuant();

		out.println("<tr><td><a href="+classdir+"UniCash?action=addinvrecord&custnum="+custnum+"&itemnum="+itemnum+"&keyprefix="+keyprefix+"&psource="+psource+"&callslip="+callslip+"&crecnum="+crecnum+"&cdate="+cdate+"&keycode="+keycode+">"+itemname+"</a></td><td>"+keycode+"</td><td>"+tquant+"</td><tr>");
		}

	out.println("</table><br><br>");

	Vector ci;
	ci = InvUse.getAllCallslipItems(con, callslip, cdate);
	if (ci.size()>0) {
	out.println("<table width=\"100%\" align=\"center\" border=1>");
	out.println("<font size=1>");
	out.println("<th>Key</th><th>Part</th><th>Quantity</th><th>Date</th><th>Location</th>");
	for (int cc = 0 ; cc < ci.size(); cc++)
	{
		InvUse ti = (InvUse) ci.elementAt(cc);
		String keycode = ti.getKeyCode();
		String nitemname = ti.getItemName();
		String pquant = ti.getQuantity();
		String invloc = ti.getInvLoc();
		String idate = doFormatDate(getDate(ti.getTDate()));
		int transnum = ti.getItemnum();
		out.println("<tr><td>"+keycode+"</td><td>"+nitemname+"</td><td>"+pquant+"</td><td>"+idate+"</td><td>"+invloc+"</td></tr>");
	}
	out.println("</font>");
	out.println("</table>");
	}

	out.println("<br><br><a href="+classdir+"UniCash?action=addinvmenu&custnum="+custnum+"&psource="+psource+"&callslip="+callslip+"&crecnum="+crecnum+"&cdate="+cdate+">Return To Categories</a>");
			con.close();
	}


private void doDeleteInvTrans2(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception, NumberFormatException
		        {
		String custnum=req.getParameter("custnum");
		String callslip=req.getParameter("callslip");
		String itemname=req.getParameter("itemname");
		String cdate=req.getParameter("cdate");
		String crecnum=req.getParameter("crecnum");
		String psource=req.getParameter("psource");
		String ttransnum = req.getParameter("transnum");
		int transnum=Integer.parseInt(ttransnum);
                        UniInvDetail.deleteItem(con,transnum);
			con.close();
                res.sendRedirect(""+classdir+"UniCash?action="+psource+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum);
	}

private void doSaveInvTransEntry2(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String callslip = req.getParameter("callslip");
                String quantity = req.getParameter("quantity");
		String keycode = req.getParameter("keycode");
                String tdate = req.getParameter("tdate");
                String notes = req.getParameter("notes");
		String custnum=req.getParameter("custnum");
		String description=req.getParameter("description");
		String crecnum=req.getParameter("crecnum");
		String psource=req.getParameter("psource");
		String invloc=req.getParameter("invloc");
               //Vector v;
                //v = InvKeyCodes.getSingleKeyCode(con, keycode);
                //for (int i = 0 ; i < v.size(); i++)
                //{
                //InvKeyCodes t = (InvKeyCodes) v.elementAt(i);
                //description=t.getDescription();
		//}
		username=(String)session.getAttribute("login");
		InvUse.addInvTrans(con, callslip, doFormatDateDb(getDateDb(tdate)), quantity, keycode, description, notes, username, 0, invloc);
			con.close();
                res.sendRedirect(""+classdir+"UniCash?action="+psource+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum);
            }


private void doSaveTimeCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String code = req.getParameter("code");
                String category = req.getParameter("description");
		TimeCat.addTimeCat(con, category, code);
                res.sendRedirect(""+classdir+"UniCash?action=edittimecats");
            }

  private void doAddTimeCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String description="";
	String code="";
	int catnum=0;
	String action=req.getParameter("action");

	if (action.equalsIgnoreCase("edittimecode")) 
			{
		code=req.getParameter("catnum");
                Vector v;
                v = TimeCat.getIndItem(con, code);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	TimeCat t = (TimeCat) v.elementAt(i);
                      	catnum = t.getCatnum();
                        description = t.Category();
                        code = t.Code();
		}
			}
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Time Category</title>");
	out.println("</head>");
	if (action.equalsIgnoreCase("edittimecode")) 
			{
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatetimecat\" name=\"addtimecat\">");
			} else {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savetimecat\" name=\"addtimecat\">");
			}
	out.println("<p>Code         :");
	out.println("<input type=\"text\" name=\"code\" value=\""+code+"\" > ");
	out.println("</p>");
	out.println("<p>Description   :");
	out.println("<input type=\"text\" name=\"description\" value=\""+description+"\" >");
	out.println("</p>");
	out.println("<input type=\"hidden\" name=\"catnum\" value=\""+catnum+"\">");
	out.println("<p> <CENTER>");
	if (action.equalsIgnoreCase("edittimecode")) 
			{
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Update\">");
			} else {
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
			}
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	out.println("<br><br><a href="+classdir+"UniCash?action=edittimecats>Return To Time Categories</a>");
			con.close();
	}

  private void doAddInvRecord(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String custnum=req.getParameter("custnum");
		String callslip=req.getParameter("callslip");
		String itemname=req.getParameter("itemname");
		String keycode=req.getParameter("keycode");
		String keyprefix=req.getParameter("keyprefix");
		String cdate=req.getParameter("cdate");
		String crecnum=req.getParameter("crecnum");
		String psource=req.getParameter("psource");
		String description="";

		String itemnum = req.getParameter("itemnum");
		//int itemnum=Integer.parseInt(titemnum);
		String catnum = req.getParameter("catnum");
		//int catnum=Integer.parseInt(tcatnum);
		Vector v;
                v = InvKeyCodes.getSingleKeyCode(con, keycode);
                for (int i = 0 ; i < v.size(); i++)
                {
                InvKeyCodes t = (InvKeyCodes) v.elementAt(i);
                description=t.getDescription();
		}
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Inventory Transaction</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveinvtrans2&catnum="+catnum+" \" name=\"addtime\">");
	out.println("<table><tr><td>Key Code       :</td><td>");
	out.println("<input type=\"text\" name=\"keycode\" value=\""+keycode+"\" ></td></tr> ");
	out.println("<tr><td>Description    :</td><td>");
	out.println("<input type=\"text\" name=\"description\" value=\""+description+"\" ></td> ");
	out.println("<tr><td>Callslip        :</td><td>");
	out.println("<input type=\"hidden\" name=\"callslip\" value=\""+callslip+"\" ></td></tr>  ");
	out.println("<tr><td>Date         :</td><td>");
	out.println("<input type=\"text\" name=\"tdate\" value=\""+doFormatDate(getDate(cdate))+"\" ></td></tr>  ");
	out.println("<tr><td>Quantity      :</td><td>");
	out.println("<input type=\"text\" name=\"quantity\"></td></tr> ");
	out.println("<tr><td>Notes      :</td><td>");
	out.println("<input type=\"text\" name=\"notes\"></td></tr> ");
	out.println("<tr><td>Stock From        :</td>");
	out.println("<td align=\"left\"><select width=\"50\" name=\"invloc\">");
	out.println("<option value=\"TRUCK\">Truck Stock</option>");
	out.println("<option value=\"STOCK\">Stock Room</option>");
	out.println("<option value=\"POORDER\">Purchase Order</option>");
	out.println("</select></td></tr>");
	out.println("<input type=\"hidden\" name=\"keyprefix\" value=\""+keyprefix+"\">");
	out.println("<input type=\"hidden\" name=\"psource\" value=\""+psource+"\">");
	out.println("<input type=\"hidden\" name=\"crecnum\" value=\""+crecnum+"\">");
	out.println("<input type=\"hidden\" name=\"custnum\" value=\""+custnum+"\">");
	out.println("<input type=\"hidden\" name=\"cdate\" value=\""+cdate+"\"></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	out.println("<br><br><a href="+classdir+"UniCash?action=addinvmenu&custnum="+custnum+"&psource="+psource+"&callslip="+callslip+"&crecnum="+crecnum+"&cdate="+cdate+">Return To Categories</a>");
			con.close();
	}

  private void doInvMenu(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		String custnum=req.getParameter("custnum");
		String callslip=req.getParameter("callslip");
		String cdate=req.getParameter("cdate");
		String crecnum=req.getParameter("crecnum");
		String psource=req.getParameter("psource");

                out.println("<html><head><title>AddInventory Item to "+callslip+"</title></head><body><table width=60% border=1>");
                out.println("<tr>");
                out.println("<th>Category</th><th>Description</th><th>KeyCode Prefix</th>");
                out.println("</tr>");
                Vector v;
                v = UniInvCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniInvCat t = (UniInvCat) v.elementAt(i);
                      	int CatNum = t.getCatnum();
                        String description = t.Description();
			String keyprefix=t.KeyPrefix();
                        String category = t.Category();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=showinvitems&catnum="+CatNum+"&custnum="+custnum+"&callslip="+callslip+"&cdate="+cdate+"&crecnum="+crecnum+"&keyprefix="+keyprefix+"&psource="+psource+">"+category+"</a></td>");
                        out.println("</td>");
                        out.println("<td>" + description + "</td>");
			out.println("<td>"+keyprefix+"</td>");
                        out.println("</tr>");
                }
                out.println("</table>");
		out.println("<br><br>");

	out.println("<h3>Inventory Used</h3>");

	Vector ci;
	ci = InvUse.getAllCallslipItems(con, callslip, cdate);
	if (ci.size()>0) {
	out.println("<table width=\"100%\" align=\"center\" border=1>");
	out.println("<font size=1>");
	out.println("<th>Key</th><th>Part</th><th>Quantity</th><th>Date</th><th>Location</th>");
	for (int cc = 0 ; cc < ci.size(); cc++)
	{
		InvUse ti = (InvUse) ci.elementAt(cc);
		String keycode = ti.getKeyCode();
		String itemname = ti.getItemName();
		String pquant = ti.getQuantity();
		String idate = doFormatDate(getDate(ti.getTDate()));
		int transnum = ti.getItemnum();
		String invloc = ti.getInvLoc();
		out.println("<tr><td>"+keycode+"</td><td>"+itemname+"</td><td>"+pquant+"</td><td>"+idate+"</td><td>"+invloc+"</td></tr>");
		}
	out.println("</font>");
	out.println("</table>");
	}
                out.println("<br><br><a href="+classdir+"UniCash?action="+psource+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+" target=phpmain>Return To Call Slip</a><br>");
		out.println("</body></html>");
			con.close();
        }


  private void doQuoteCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
                out.println("<html><head><title>Proposal  System</title></head><body><table width=60% border=1>");
                out.println("<tr>");
                out.println("<th>Category</th><th>Description</th>");
                out.println("</tr>");
                Vector v;
                v = UniQuoteClass.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniQuoteClass t = (UniQuoteClass) v.elementAt(i);
                      	int CatNum = t.getCatnum();
                        String description = t.Description();
                        String category = t.Category();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=showquotecatitems&catnum="+CatNum+">"+category+"</a></td>");
                        out.println("</td>");
                        out.println("<td>" + description + "</td>");
                        out.println("</tr>");
                }
                out.println("</table>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addquoteclass>Add a Category</a></body></html>");
			con.close();
        }

  private void doWsPackageCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		String custnum=req.getParameter("custnum");
		String wsnum=req.getParameter("wsnum");
                out.println("<html><head><title>Proposal  System</title></head><body><table width=60% border=1>");

		out.println("<br><br><br><a href="+classdir+"UniCash?action=editws&custnum="+custnum+"&wsnum="+wsnum+">Back to Worksheet</a></body></html>");
                out.println("<tr>");
                out.println("<th>Category</th>");
                out.println("</tr>");
                Vector v;
                v = UniPkgCats.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniPkgCats t = (UniPkgCats) v.elementAt(i);
                      	int CatID = t.getCatID();
                        String CatDesc = t.getCatDesc();
                        String adjper = t.getAdjPer();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=showwspackageitems&catnum="+CatID+"&adjper="+adjper+"&custnum="+custnum+"&wsnum="+wsnum+">"+CatDesc+"</a></td>");
                        out.println("</td>");
                        out.println("</tr>");
                }
                out.println("</table>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=editws&custnum="+custnum+"&wsnum="+wsnum+">Back to Worksheet</a></body></html>");
			con.close();
        }

//Htg Load


private void doSaveHtgLoadMult(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String description = req.getParameter("description");
                String tdesigntemp = req.getParameter("designtemp");
                String tcatnum = req.getParameter("catnum");
                String htgloadmult = req.getParameter("ht_trans_mult");
                 int designtemp = Integer.parseInt(tdesigntemp);
                 int catnum = Integer.parseInt(tcatnum);
		 printHeader(req, res, out, username);
                 HtgLoadMults.addPkgMult(con, catnum, description, designtemp, htgloadmult);
                 out.println("Your item has been added to the database<br>");
			con.close();
		res.sendRedirect(classdir+"UniCash?action=confightgloadmultlist&catnum="+catnum+"");
            }

private void doSaveHtgLoadCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String description = req.getParameter("description");
                String tdisplayorder = req.getParameter("displayorder");
                String unitofm = req.getParameter("unitofm");
                 int displayorder = Integer.parseInt(tdisplayorder);
		 printHeader(req, res, out, username);
                 HtgLoadCats.addPkgCat(con, displayorder, description, unitofm);
                 out.println("Your item has been added to the database<br>");
			con.close();
		res.sendRedirect(""+classdir+"UniCash?action=confightgloadcatlist");
            }

private void doAddHtgLoadMultFrm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		printHeader(req, res, out, username);
		String tcatnum = req.getParameter("catnum");
		int catnum=Integer.parseInt(tcatnum);
            out.println("   <center>");
            out.println("<p><br>(Enter New Multiplier)</center>");
            out.println("<p><form action= " + classdir + "UniCash?action=savehtgloadmult method=POST> ");
            out.println("<br>&nbsp;");
            out.println("<input type=\"hidden\" name=\"catnum\" value=\""+catnum+"\"></td>");
            out.println("<br>&nbsp; ");
            out.println("<table BORDER COLS=2 WIDTH=\"50%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>Description</td>");
            out.println("<td><input type=\"text\" name=\"description\"></td>");
            out.println("<tr>");
            out.println("<td>Design Temp</td>");
            out.println("<td><input type=\"text\" name=\"designtemp\"></td>");
            out.println("<tr>");
            out.println("<td>Heat Transfer Mult</td>");
            out.println("<td><input type=\"text\" name=\"ht_trans_mult\"></td>");
            out.println("<tr>");
            out.println("<td>Submit</td>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
			con.close();
        }

private void doAddHtgLoadCatFrm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		printHeader(req, res, out, username);
            out.println("   <center>");
            out.println("<p><br>(Enter New Catagory)</center>");
            out.println("<p><form action= " + classdir + "UniCash?action=savehtgloadcat method=POST> ");
            out.println("<br>&nbsp;");
            out.println("<br>&nbsp; ");
            out.println("<table BORDER COLS=2 WIDTH=\"50%\" NOSAVE > ");
            out.println("<tr>");
            out.println("<td>Description</td>");
            out.println("<td><input type=\"text\" name=\"description\"></td>");
            out.println("<tr>");
            out.println("<td>Display Order</td>");
            out.println("<td><input type=\"text\" name=\"displayorder\"></td>");
            out.println("<tr>");
            out.println("<td>Unit of Measure</td>");
            out.println("<td><input type=\"text\" name=\"unitofm\"></td>");
            out.println("<tr>");
            out.println("<td>Submit</td>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
			con.close();
        }

  private void doConfigHtgLoadCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
                out.println("<html><head><title>Heating Load Calc Cats</title></head><body>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addhtgloadclass>Add a Category</a></body></html>");
		out.println("<table width=60% border=1>");
                out.println("<tr>");
                out.println("<th>Category</th><th>Display Order</th><th>Unit of Measure</th>");
                out.println("</tr>");
                Vector v;
                v = HtgLoadCats.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	HtgLoadCats t = (HtgLoadCats) v.elementAt(i);
                      	int CatID = t.getCatID();
                        String CatDesc = t.getCatDesc();
                      	int CatOrder = t.getCatOrder();
			String UnitOfM = t.getUnitOfM();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=confightgloadmultlist&catnum="+CatID+">"+CatDesc+"</a></td><td>"+CatOrder+"</td><td>"+UnitOfM+"</td><td><a href="+classdir+"UniCash?action=edithtgloadclass&catnum="+CatID+">Edit</a></td>");
                        out.println("</tr>");
                }
                out.println("</table>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addhtgloadclass>Add a Category</a></body></html>");
			con.close();
        }

//

  private void doConfigHtgLoadMultList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		String tcatnum = req.getParameter("catnum");
		int catnum=Integer.parseInt(tcatnum);
                out.println("<html><head><title>Heating Load Calc Mults</title></head><body>");
		out.println("<br><a href="+classdir+"UniCash?action=confightgloadcatlist>Return To Categories</a></body></html>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addhtgloadmult&catnum="+catnum+">Add a Multiplier</a></body></html>");
		out.println("<table width=60% border=1>");
                out.println("<tr>");
                out.println("<th>Description</th><th>Design Temp</th><th>Heat Transfer<br>Multiplier</th>");
                out.println("</tr>");
                Vector v;
                v = HtgLoadMults.getAllItems(con,catnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	HtgLoadMults t = (HtgLoadMults) v.elementAt(i);
                        String CatDesc = t.getCatDesc();
			int recnum=t.getRecNum();
			catnum=t.getCatID();
                      	int design_temp = t.getDesignTemp();
			String htg_load_mult = t.getHtTransMult();
                        out.println("<tr><td>");
                        out.println(""+CatDesc+"</a></td><td>"+design_temp+"</td><td>"+htg_load_mult+"</td><td><a href="+classdir+"UniCash?action=edithtgloadmultconfig&catnum="+catnum+"&recnum="+recnum+">Edit</a>");
                        out.println("</td></tr>");
                }
                out.println("</table>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addhtgloadmult&catnum="+catnum+">Add a Multiplier</a></body></html>");
		out.println("<br><a href="+classdir+"UniCash?action=confightgloadcatlist>Return To Categories</a></body></html>");
			con.close();
        }


	private void doEditHtgLoadMult(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String tcatnum = req.getParameter("catnum");
		int catnum=Integer.parseInt(tcatnum);
		String trecnum = req.getParameter("recnum");
		int recnum=Integer.parseInt(trecnum);
                Vector v;
                v = HtgLoadMults.getIndividualtems(con,recnum);
                for (int i = 0 ; i < v.size(); i++)
               {
                       	HtgLoadMults t = (HtgLoadMults) v.elementAt(i);
                        String CatDesc = t.getCatDesc();
			recnum=t.getRecNum();
			catnum=t.getCatID();
                      	int design_temp = t.getDesignTemp();
			String htg_load_mult = t.getHtTransMult();

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Heat Transfer Multiplier</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatehtgloadmult&catnum="+catnum+" \" name=\"addcode\">");
	out.println("<table><tr>");
	out.println("<td>Description:        :</td>");
	out.println("<td><input type=\"text\" name=\"description\" value=\""+CatDesc+"\"></td></tr>");
	out.println("<tr><td>Design Temp         :</td>");
	out.println("<td><input type=\"text\" name=\"designtemp\" value=\""+design_temp+"\"></td></tr>");
	out.println("<tr><td>Heat Transfer Multiplier:</td>");
	out.println("<td><input type=\"text\" name=\"htg_load_mult\" value=\""+htg_load_mult+"\"></td></tr>");
	out.println("</table>");
	out.println("<input type=\"hidden\" name=\"catnum\" value=\""+catnum+"\">");
	out.println("<input type=\"hidden\" name=\"recnum\" value=\""+recnum+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Update\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		}
			con.close();
	}

	private void doEditHtgLoadClass(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String tcatnum = req.getParameter("catnum");
		int catnum=Integer.parseInt(tcatnum);
                Vector v;
                v = HtgLoadCats.getIndividualtems(con,catnum);
                for (int i = 0 ; i < v.size(); i++)
               {
                       	HtgLoadCats t = (HtgLoadCats) v.elementAt(i);
                      	int CatID = t.getCatID();
                        String CatDesc = t.getCatDesc();
                      	int CatOrder = t.getCatOrder();
			String UnitOfM = t.getUnitOfM();

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Heating Load Cat</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatehtgloadclass&catnum="+catnum+" \" name=\"addcode\">");
	out.println("<table><tr>");
	out.println("<td>Description:        :</td>");
	out.println("<td><input type=\"text\" name=\"description\" value=\""+CatDesc+"\"></td></tr>");
	out.println("<tr><td>Display Order         :</td>");
	out.println("<td><input type=\"text\" name=\"displayorder\" value=\""+CatOrder+"\"></td></tr>");
	out.println("<tr><td>Unit of Measurement:</td>");
	out.println("<td><input type=\"text\" name=\"unitofm\" value=\""+UnitOfM+"\"></td></tr>");
	out.println("</table>");
	out.println("<input type=\"hidden\" name=\"catnum\" value=\""+CatID+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Update\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		}
			con.close();
	}


private void doUpdateHtgLoadMult(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String tcatid = req.getParameter("catnum");
                        int catnum = Integer.parseInt(tcatid);
                        String trecnum = req.getParameter("recnum");
                        int recnum = Integer.parseInt(trecnum);
                        String description = req.getParameter("description");
                        String tdesigntemp = req.getParameter("designtemp");
                        int designtemp = Integer.parseInt(tdesigntemp);
                        String ht_trans_mult = req.getParameter("htg_load_mult");
                       HtgLoadMults.UpdateItem(con, recnum, catnum, description,designtemp, ht_trans_mult); 
                        out.println("Your item has been added to the database<br>");
			con.close();
		res.sendRedirect(classdir+"UniCash?action=confightgloadmultlist&catnum="+catnum+"");
}

private void doUpdateHtgLoadClass(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String tcatid = req.getParameter("catnum");
                        int catid = Integer.parseInt(tcatid);
                        String description = req.getParameter("description");
                        String tdisplayorder = req.getParameter("displayorder");
                        int displayorder = Integer.parseInt(tdisplayorder);
                        String unitofm = req.getParameter("unitofm");
                       HtgLoadCats.UpdateItem(con, catid, displayorder, description, unitofm); 
                        out.println("Your item has been added to the database<br>");
			con.close();
                res.sendRedirect(""+classdir+"UniCash?action=confightgloadcatlist");
}

  private void doPackageCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		int phonelistperm=Integer.parseInt(doGetAllowModServAdmin(username));
                out.println("<html><head><title>Proposal  System</title></head><body>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addpackageclass>Add a Category</a></body></html>");
		out.println("<table width=60% border=1>");
                out.println("<tr>");
                out.println("<th>Category</th><th>Discount</th>");
                out.println("</tr>");
                Vector v;
                v = UniPkgCats.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniPkgCats t = (UniPkgCats) v.elementAt(i);
                      	int CatID = t.getCatID();
			String adjper = t.getAdjPer();
                        String CatDesc = t.getCatDesc();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=showpackageitems&catnum="+CatID+"&adjper="+adjper+">"+CatDesc+"</a></td><td>"+adjper+"</td>");
                        out.println("</tr>");
                }
                out.println("</table>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addpackageclass>Add a Category</a></body></html>");
		if (phonelistperm==1) 
			{
out.println("<p><br><a href="+classdir+"UniCash?action=uploadpackagelist>Update Server (MUST HAVE INTERNET CONNECT)</a><br><br>");
			}
			con.close();
        }


private void doUpdateForms(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		Connection con2 = null;
		String dbserver=doGetMainServer();
		String dbpasswd=doGetMainPassword();
		String dbuser=doMainDbUser();
		String dbname=doMainDbName();
		String protocol = (String) config.getInitParameter("db.protocol");
		String subProtocol = (String) config.getInitParameter("db.subprotocol");
		con2 = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);

// Check Connectivity
			Statement stmtu = con.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM users");
// Drop Remote Tables
			Statement stmt = con2.createStatement();
			int result=stmtu.executeUpdate("DROP TABLE IF EXISTS formlist;");
			result=stmtu.executeUpdate("DROP TABLE IF EXISTS formparts;");
// Rebuild Remote Tables
			result=stmtu.executeUpdate("DROP TABLE IF EXISTS formlist;");
			result=stmtu.executeUpdate("CREATE TABLE formlist (formnum int(11) NOT NULL auto_increment, formname text, formdescription text, PRIMARY KEY  (formnum), UNIQUE KEY formnum (formnum));");
			result=stmtu.executeUpdate("DROP TABLE IF EXISTS formparts;");
			result=stmtu.executeUpdate("CREATE TABLE formparts (recnum int(11) not null auto_increment, formnum int(11), formquestion text, primary key (recnum), unique key recnum(recnum));");


                Vector v;
                v = FormList.getAllItems(con2);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	FormList t = (FormList) v.elementAt(i);
                      	int formnum = t.getFormNum();
                        String formname = t.getFormName();
			String formdesc = t.getFormDesc();

			FormList.AddItem(con, formname, formdesc);

		Vector vp;
                vp = FormParts.getAllItems(con2,""+formnum+"");
                for (int j = 0 ; j < vp.size(); j++)
                {
                FormParts tp = (FormParts) vp.elementAt(j);
			formnum=tp.getFormNum();
			String formquestion=tp.getFormQuestion();
			FormParts.AddItem(con, ""+formnum+"", formquestion);
			}

                }
        res.sendRedirect(""+classdir+"UniCash?action=showhomepage");

	}

private void doCopyFormToCust(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String formdate = formatter.format(date);
	String action = req.getParameter("action");
	String custnum = req.getParameter("custnum");
	String sitenum = req.getParameter("sitenum");
	String custsite=req.getParameter("custsite");
	String Sformnum=req.getParameter("formnum");
	String formanswer=req.getParameter("formanswer");
	int newformnum=0;

                Vector v;
                v = FormList.getIndItem(con, Sformnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	FormList t = (FormList) v.elementAt(i);
                      	int formnum = t.getFormNum();
                        String formname = t.getFormName();
			String formdesc = t.getFormDesc();

			CustFormList.AddItem(con, custsite,sitenum,formdate,username,formname,formdesc);
			Vector vm;
			vm = CustFormList.getMaxItem(con);
			for (int im = 0 ; im < vm.size(); im++)
				{
				CustFormList tm = (CustFormList) vm.elementAt(im);
				newformnum=tm.getFormNum();
				}



		Vector vp;
                vp = FormParts.getAllItems(con,""+formnum+"");
                for (int j = 0 ; j < vp.size(); j++)
                {
                FormParts tp = (FormParts) vp.elementAt(j);
			formnum=tp.getFormNum();
			String formquestion=tp.getFormQuestion();
			CustFormParts.AddItem(con, custsite, sitenum, ""+newformnum+"", formquestion, formanswer);
			}

                }

        res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&custnum="+custnum+"&csection=7");
	}

private void doUploadForms(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		Connection con2 = null;
		String dbserver=doGetMainServer();
		String dbpasswd=doGetMainPassword();
		String dbuser=doMainDbUser();
		String dbname=doMainDbName();
		String protocol = (String) config.getInitParameter("db.protocol");
		String subProtocol = (String) config.getInitParameter("db.subprotocol");
		con2 = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);

// Check Connectivity
			Statement stmtu = con2.createStatement();
			ResultSet rsu = stmtu.executeQuery("SELECT * FROM users");
// Drop Remote Tables
			Statement stmt = con.createStatement();
			int result=stmtu.executeUpdate("DROP TABLE IF EXISTS formlist;");
			result=stmtu.executeUpdate("DROP TABLE IF EXISTS formparts;");
// Rebuild Remote Tables
			result=stmtu.executeUpdate("DROP TABLE IF EXISTS formlist;");
			result=stmtu.executeUpdate("CREATE TABLE formlist (formnum int(11) NOT NULL auto_increment, formname text, formdescription text, PRIMARY KEY  (formnum), UNIQUE KEY formnum (formnum));");
			result=stmtu.executeUpdate("DROP TABLE IF EXISTS formparts;");
			result=stmtu.executeUpdate("CREATE TABLE formparts (recnum int(11) not null auto_increment, formnum int(11), formquestion text, primary key (recnum), unique key recnum(recnum));");


                Vector v;
                v = FormList.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	FormList t = (FormList) v.elementAt(i);
                      	int formnum = t.getFormNum();
                        String formname = t.getFormName();
			String formdesc = t.getFormDesc();

			FormList.AddItem(con2, formname, formdesc);

		Vector vp;
                vp = FormParts.getAllItems(con,""+formnum+"");
                for (int j = 0 ; j < vp.size(); j++)
                {
                FormParts tp = (FormParts) vp.elementAt(j);
			formnum=tp.getFormNum();
			String formquestion=tp.getFormQuestion();
			FormParts.AddItem(con2, ""+formnum+"", formquestion);
			}

                }

        res.sendRedirect(""+classdir+"UniCash?action=configforms");
	}

private void doSaveFormQuestion(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
             {
	String action = req.getParameter("action");
	String recnum = req.getParameter("recnum");
	String formnum = req.getParameter("formnum");
        String formquestion = req.getParameter("formquestion");
	if (action.equalsIgnoreCase("saveformquestion")) {
        FormParts.AddItem(con, formnum, formquestion);
	}
	if (action.equalsIgnoreCase("updateformquestion")) {
        FormParts.UpdateItem(con, recnum, formnum, formquestion);
		}
		con.close();
        out.println("Your item has been updated in the database<br>");
        res.sendRedirect(""+classdir+"UniCash?action=editform&formnum="+formnum+"");
            }

private void doSaveForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
             {
	String action = req.getParameter("action");
	String formname = req.getParameter("formname");
	String formnum = req.getParameter("formnum");
        String formdescription = req.getParameter("formdesc");
	if (action.equalsIgnoreCase("saveform")) {
        FormList.AddItem(con, formname, formdescription);
	}
	if (action.equalsIgnoreCase("updateform")) {
        FormList.UpdateItem(con, formnum, formname, formdescription);
		}
		con.close();
        out.println("Your item has been updated in the database<br>");
        res.sendRedirect(""+classdir+"UniCash?action=configforms");
            }

private void doAddFormQuestion(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			String action = req.getParameter("action");
			String formnum = req.getParameter("formnum");
			int c=0;
			String formquestion=null;
			String recnum=req.getParameter("formquestion");
			if (action.equalsIgnoreCase("addformquestion"))
                        {
				formquestion="-";
			}
			if (action.equalsIgnoreCase("editformquestion"))
			{
				formnum=req.getParameter("formnum");
				recnum=req.getParameter("formquestion");
                		Vector v;
                		v = FormParts.getIndItem(con, recnum);
                		for (int i = 0 ; i < v.size(); i++)
                			{
                       			FormParts t = (FormParts) v.elementAt(i);
                        		formquestion = t.getFormQuestion();
					}
			}
			
				
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Form Question or Edit Form Question</title>");
	out.println("</head>");
	if (action.equalsIgnoreCase("addformquestion")) {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveformquestion\" name=\"addform\">");
						}
	if (action.equalsIgnoreCase("editformquestion")) {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateformquestion\" name=\"addform\">");
						}
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Form Question</td><td>");
	out.println("<input type=\"text\" name=\"formquestion\" value=\""+formquestion+"\" size=\"60\"></td></tr>");
	out.println("</table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"hidden\" NAME=\"formnum\" VALUE=\""+formnum+"\">");
	out.println("<INPUT TYPE=\"hidden\" NAME=\"recnum\" VALUE=\""+recnum+"\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");

		con.close();
	}

private void doAddForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			String action = req.getParameter("action");
			String formname=null;
			String formdesc=null;
			int c=0;
			String formnum=null;
			if (action.equalsIgnoreCase("addform"))
                        {
				formname="-";
				formdesc="-";
			}
			if (action.equalsIgnoreCase("editform"))
			{
				formnum=req.getParameter("formnum");
                		Vector v;
                		v = FormList.getIndItem(con, formnum);
                		for (int i = 0 ; i < v.size(); i++)
                			{
                       			FormList t = (FormList) v.elementAt(i);
                        		formname = t.getFormName();
					formdesc = t.getFormDesc();
					}
			}
			
				
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Form or Edit Form</title>");
	out.println("</head>");
	if (action.equalsIgnoreCase("addform")) {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveform\" name=\"addform\">");
						}
	if (action.equalsIgnoreCase("editform")) {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateform\" name=\"addform\">");
						}
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Form Name</td><td>");
	out.println("<input type=\"text\" name=\"formname\" value=\""+formname+"\"></td>");
	out.println("</tr>");
	out.println("<tr><td>Form Description</td><td>");
	out.println("<input type=\"text\" name=\"formdesc\" value=\""+formdesc+"\" size=\"60\"></td></tr>");
	out.println("</table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"hidden\" NAME=\"formnum\" VALUE=\""+formnum+"\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");

			if (action.equalsIgnoreCase("editform"))
			{
	out.println("<br><br><br><table border=\"1\" width=\"100%\">");
	out.println("<tr><th>Question #</th><th>Question</th></tr>");
		c=1;
		Vector vp;
                vp = FormParts.getAllItems(con,formnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                FormParts tp = (FormParts) vp.elementAt(j);
		out.println("<tr><td><a href="+classdir+"UniCash?action=editformquestion&formnum="+formnum+"&formquestion="+tp.getRecNum()+">"+c+"</a></td><td>"+tp.getFormQuestion()+"</td><td><a href="+classdir+"UniCash?action=delformquestion&formnum="+formnum+"&formquestion="+tp.getRecNum()+">Delete</a></tr>");
		c++;
			}
		out.println("</table><br><br><br><a href="+classdir+"UniCash?action=addformquestion&formnum="+formnum+">Add a Question</a></body></html>");
		}
		con.close();
	}

  private void doDeleteCustForm (HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
	String formnum = req.getParameter("formnum");
	String custnum = req.getParameter("custnum");
        CustFormParts.DeleteAllItems(con, formnum);
	CustFormList.DeleteItem(con,formnum);
		con.close();
        res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&custnum="+custnum+"&csection=7");
	}

  private void doDeleteForm (HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
	String formnum = req.getParameter("formnum");
        FormParts.DeleteAllItems(con, formnum);
	FormList.DeleteItem(con,formnum);
		con.close();
        res.sendRedirect(""+classdir+"UniCash?action=configforms");
	}

  private void doDeleteFormQuestion (HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
	String recnum = req.getParameter("formquestion");
	String formnum = req.getParameter("formnum");
        String formquestion = req.getParameter("formquestion");
        FormParts.DeleteItem(con, recnum);
		con.close();
        res.sendRedirect(""+classdir+"UniCash?action=editform&formnum="+formnum+"");
	}


private void doPrintCustForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
	String formnum = req.getParameter("formnum");
        int custnum = Integer.parseInt(tcustnum);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String etype="";
		
	String tech_init = doGetTechInfo_init(username);
	String tech_name = doGetTechInfo_name(username);
	String tech_truck = doGetTechInfo_truck(username);

	out.println("<html><basefont size=-1>");
	out.println("<html><head><title>AC Cover Disclaimer</title></head>");
	doMHeader(req, res, out, session, username);

 	Statement stmt = con.createStatement();
	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
                {
	cname=rs.getString("cname");
	address1=rs.getString("address1");
	address2=rs.getString("address2");
	city =rs.getString("city");
	state=rs.getString("state");
	zip=rs.getString("zip");
	homephone=rs.getString("homephone");
	altphone=rs.getString("altphone");
	cust_notes=rs.getString("cust_notes");
	}	
	out.println("<table width=\"100%\"><tr>");
	out.println("<td width=\"50%\">");
	out.println("<b>Customer:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;"+cname+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+address1+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+city+","+state+" ");
	out.println("</td>");
	out.println("<td>Dated: "+s+"</td></tr>");
	out.println("</table>");

                		Vector vf;
                		vf = CustFormList.getIndItem(con, formnum);
                       			CustFormList tf = (CustFormList) vf.elementAt(0);
                        		String formname = tf.getFormName();
					String userid = tf.getUserName();

	tech_name = doGetTechInfo_name(userid);
	out.println("<h4><ul>"+formname+"</ul></h4><br>");


		Vector vp;
                vp = CustFormParts.getAllItems(con,formnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                CustFormParts tp = (CustFormParts) vp.elementAt(j);
	out.println("<table width=\"75%\"><tr><td>"+tp.getFormQuestion());
	out.println("</td></tr>");
	out.println("<tr><td>"+tp.getFormAnswer());
	out.println("</td></tr></table>");
		}


	out.println("<P></p><br><br>");
	out.println("<table border=0><tr><td>Completed By:</td><td>"+tech_name+"</td>");
	out.println("</tr></font></table>");
	out.println("</body>");
	out.println("</html>");
		con.close();
}
  private void doShowForms (HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		String action = req.getParameter("action");
		String custsite=req.getParameter("custsite");
		String sitenum=req.getParameter("sitenum");
		String custnum=req.getParameter("custnum");

                out.println("<html><head><title>Show Forms</title></head><body><h1>Available Forms</h1><table width=95% border=0><br><br><br>");
                out.println("<br>action called: "+action+"<br><tr>");
                out.println("<th align=\"left\">FormName</th><th align=\"left\">Form Description</th><th align=\"left\">");
                out.println("</tr>");

                Vector v;
                v = FormList.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	FormList t = (FormList) v.elementAt(i);
                      	int formnum = t.getFormNum();
                        String formname = t.getFormName();
			String formdesc = t.getFormDesc();
                        out.println("<td>");
			if (action.equalsIgnoreCase("configforms"))
			{
                        out.println("<a href="+classdir+"UniCash?action=editform&formnum="+formnum+">"+formname+"</a></td><td>"+formdesc+"</td><td><a href="+classdir+"UniCash?action=deleteform&formnum="+formnum+">Delete</a></td>");
			} else if (action.equalsIgnoreCase("addcustform"))
			{
                        out.println("<a href="+classdir+"UniCash?action=copyformtocust&formnum="+formnum+"&custsite="+custsite+"&sitenum="+sitenum+"&custnum="+custnum+">"+formname+"</a></td><td>"+formdesc+"</td>");
			}
                        out.println("</tr>");
                }

                out.println("</table><br><br>");
			if (action.equalsIgnoreCase("configforms"))
			{
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addform>Add a Form</a></body></html>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=uploadallforms>Upload to Main Server (NEED INTERNET CONNECT)</a></body></html>");
			}
			con.close();
        }

  private void doShowTimeCats(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
                out.println("<html><head><title>Show Time Sheet Category Codes</title></head><body><table width=60% border=0>");
                out.println("<tr>");
                out.println("<th>Code</th>");
                out.println("</tr>");

                Vector v;
                v = TimeCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	TimeCat t = (TimeCat) v.elementAt(i);
                      	int catnum = t.getCatnum();
                        String category = t.Category();
			String code = t.Code();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=edittimecode&catnum="+code+">"+code+"</a></td><td>"+category+"</td>");
                        out.println("</tr>");
                }

                out.println("</table>");
		
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addtimecat>Add a Category</a></body></html>");
		String thismainserver=doGetThisMainServer();
		if (!thismainserver.equalsIgnoreCase("yes")) {
		out.println("<br><br><br><a href="+classdir+"UniCash?action=uploadtimecat>Upload to Main Server (NEED INTERNET CONNECT)</a></body></html>");
		}
			con.close();
        }

  private void doShowCompletionCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
                out.println("<html><head><title>Show Completion Codes</title></head><body><table width=60% border=0>");
                out.println("<tr>");
                out.println("<th>Category</th>");
                out.println("</tr>");

                Vector v;
                v = UniComplCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniComplCat t = (UniComplCat) v.elementAt(i);
                      	int CatNum = t.getCatnum();
                        String category = t.Category();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=showcomplcatcodes&catnum="+CatNum+">"+category+"</a></td>");
                        out.println("</td>");
                        out.println("</tr>");
                }

                out.println("</table>");
		out.println("<br><br><br><a href="+classdir+"UniCash?action=addcomplcat>Add a Category</a></body></html>");
			con.close();
        }

  
private void doShowComplCatCodes(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		String tquant=null;
		String itemname=null;
		String descript=null;
		String minquant=null;
		String catnum=req.getParameter("catnum");
                out.println("<a  href=\""+classdir+"UniCash?action=addcomplcode&catnum="+catnum+" \">Add an item in this category</a><br>");
		out.println("<a href=\""+ classdir + "UniCash?action=ecompletioncodes&adminok=1\">Return To Category List</a><br>");
        	out.println("<br><table border=1 width=100%>");
                out.println("<th>Completion<br>Code</th><th>Completion Text</th><th>  </th>");
		int counter=0;
                Vector v;
                v = UniComplCodes.getAllItems(con,catnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniComplCodes t = (UniComplCodes) v.elementAt(i);
                      	int CatNum = t.getCatNum();
			int transnum = t.getCodeNum();
                        String complcode = t.getComplCode();
                        String compltext = t.getComplText();
                        out.println("<td>");
                        out.println("<tr><td><a href="+classdir+"UniCash?action=editcomplcatcode&catnum="+CatNum+"&transnum="+transnum+">"+complcode+"</a></td><td>"+compltext+"<td><a href="+classdir+"UniCash?action=deletecomplcatcode&catnum="+CatNum+"&transnum="+transnum+">Delete</td>");
                        out.println("</td>");
                        out.println("</tr>");
                }

	out.println("</table><br><br>");
	out.println("<a  href=\""+classdir+"UniCash?action=addcomplcode&catnum="+catnum+" \">Add an item in this category</a>");
		out.println("<br><br><a href=\""+ classdir + "UniCash?action=ecompletioncodes&adminok=1\">Return To Category List</a>");
			con.close();
	}



private void doDeleteComplCode(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception, NumberFormatException
		        {
                String catnum = req.getParameter("catnum");
                String reminderid = req.getParameter("transnum");
                UniComplCodes.deleteItem(con,reminderid);
			con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showcomplcatcodes&catnum="+catnum);
	}

	private void doAddComplCode(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String tcatnum = req.getParameter("catnum");
		int catnum=Integer.parseInt(tcatnum);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Completion Code</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveaddcomplcode&catnum="+catnum+" \" name=\"addcode\">");
	out.println("<table><tr>");
	out.println("<td>Completion Code:        :</td>");
	out.println("<td><input type=\"text\" name=\"complcode\"></td></tr>");
	out.println("<tr><td>Code Text         :</td>");
	out.println("<td><textarea name=\"compltext\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width:500px\"> </textarea></td></tr>");
	out.println("</table>");
	out.println("<input type=\"hidden\" name=\"catnum\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
			con.close();
	}


//ADMIN FUNCTION
//
	private void doEditComplCode(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String tcatnum = req.getParameter("catnum");
		int catnum=Integer.parseInt(tcatnum);
                String tcomplnum = req.getParameter("transnum");
		int complnum=Integer.parseInt(tcomplnum);
                Vector v;
                v = UniComplCodes.getIndividualItems(con,complnum);
                for (int i = 0 ; i < v.size(); i++)
               {
                       	UniComplCodes t = (UniComplCodes) v.elementAt(i);
                      	int CatNum = t.getCatNum();
			int transnum = t.getCodeNum();
                        String complcode = t.getComplCode();
                        String compltext = t.getComplText();

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Completion Code</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatecomplcode&catnum="+catnum+" \" name=\"addcode\">");
	out.println("<table><tr>");
	out.println("<td>Completion Code:        :</td>");
	out.println("<td><input type=\"text\" name=\"complcode\" value=\""+complcode+"\"></td></tr>");
	out.println("<tr><td>Code Text         :</td>");
	out.println("<td><textarea name=\"compltext\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width:500px\">"+compltext+" </textarea></td></tr>");
	out.println("</table>");
	out.println("<input type=\"hidden\" name=\"catnum\" value=\""+CatNum+"\">");
	out.println("<input type=\"hidden\" name=\"transnum\" value=\""+transnum+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Update\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		}
			con.close();
	}

private void doSaveComplCode(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String tcatnum = req.getParameter("catnum");
		int catnum = Integer.parseInt(tcatnum);
                String complcode = req.getParameter("complcode");
                String compltext = req.getParameter("compltext");
                UniComplCodes.SaveItem(con, catnum, complcode, compltext);
                out.println("Your item has been added to the database<br>");
			con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showcomplcatcodes&catnum="+catnum);
            }


private void doUpdateComplCode(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String tcatnum = req.getParameter("catnum");
		int catnum = Integer.parseInt(tcatnum);
                String ttransnum = req.getParameter("transnum");
		int transnum = Integer.parseInt(ttransnum);
                String complcode = req.getParameter("complcode");
                String compltext = req.getParameter("compltext");
                UniComplCodes.UpdateItem(con,transnum, catnum, complcode, compltext);
                out.println("Your item has been added to the database<br>");
			con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showcomplcatcodes&catnum="+catnum);
            }


  private void doShowTransList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String keycode = req.getParameter("keycode");
		String titemnum = req.getParameter("itemnum");
		//int itemnum=Integer.parseInt(titemnum);
		int itemnum=0;
		int catnum=0;
		String tcatnum = req.getParameter("invcat");
		String keyprefix = req.getParameter("keyprefix");
		//int catnum=Integer.parseInt(tcatnum);
		out.println("<a href="+classdir+"UniCash?action=addinvtrans&keycode="+keycode+"&keyprefix="+keyprefix+">Add a Transaction</a><br><br>");
		out.println("<a href=\""+ classdir + "UniCash?action=showcatitems&catnum="+tcatnum+"&keyprefix="+keyprefix+"\">Return Item List</a>");

                out.println("<table width=75% border=1>");
                out.println("<tr>");
                out.println("<th>Date</th><th>Callslip</th><th>Quantity</th><th>Notes</th>");
                out.println("</tr>");
                Vector v;
                v = InvUse.getAllItems(con, keycode);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	InvUse t = (InvUse) v.elementAt(i);
                      	int transnum = t.getTransnum();
                        String callslip = t.getCallslip();
                        String tdate = t.getTDate();
                        String quantity = t.getQuantity();
                        String notes = t.getNotes();
                        String keycodep = t.getKeyCode();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=editinvtrans&transnum="+transnum+"&keyprefix="+keyprefix+"&keycode="+keycode+">"+doFormatDate(getDate(tdate))+"</a></td>");
                        out.println("</td>");
                        out.println("<td>" + callslip + "</td>");
                        out.println("<td>" + quantity + "</td>");
                        out.println("<td>" + notes + "</td>");
			out.println("<td><a href="+classdir+"UniCash?action=delinvtrans&transnum="+transnum+"&keyprefix="+keyprefix+"&keycode="+keycode+"&psource=showinvdetail>Delete</a></td>");
                        out.println("</tr>");
                }

                out.println("</table>");

		out.println("<a href="+classdir+"UniCash?action=addinvtrans&keycode="+keycode+"&keyprefix="+keyprefix+">Add a Transaction</a><br><br>");
		out.println("<a href=\""+ classdir + "UniCash?action=showcatitems&catnum="+catnum+"&keyprefix="+keyprefix+"\">Return Item List</a>");
			con.close();
        }
  private void doAddCustomerEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
	String reqsource = req.getParameter("reqsource");


	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Customer</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savecustomerentry&custstart="+custstart+"&custstop="+custstop+"&reqsource="+reqsource+"\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Customer Name        :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"cname\" size=\"40\">");
	out.println("</td></tr><tr><td>");
	out.println("Address  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"address1\" size=\"40\">");
	out.println("</td></tr><tr><td>");
	out.println("Address  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"address2\" size=\"40\">");
	out.println("</td></tr><tr><td>");
	out.println("City     :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"city\" size=\"40\">");
	out.println("</td></tr><tr><td>");
	out.println("State    :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"state\" size=\"3\">");
	out.println("</td></tr><tr><td>");
	out.println("Zip Code :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"zip\" size=\"10\">");
	out.println("</td></tr><tr><td>");
	out.println("Home Phone:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"homephone\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Alt Phone :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"altphone\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Email Address :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"cemail\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Customer Number :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"custsite\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Site Number :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"sitenum\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Customer Type (T=T/M, F=Full) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"custtype\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Customer Notes :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"cust_notes\" size=\"80\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	con.close();
	}
	
  private void doSearchCustomerServer(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String reqsource = req.getParameter("reqsource");
		String custsite=req.getParameter("custsite");
		String remotecrecnum=null;
		String sitenum=req.getParameter("sitenum");
		String dbserver=doGetDbServer();
			String dbpasswd=doGetDbPassword();
			String dbuser=doGetDbUser();
			String dbname=doGetDbName();
			String thismainserver=doGetThisMainServer();
			String protocol = (String) config.getInitParameter("db.protocol");
			String subProtocol = (String) config.getInitParameter("db.subprotocol");
			conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);		

// CHECK LOCAL MACHINE FOR CUSTOMER		
		Vector vcl;
                vcl = UniCustomer.getCustNumSite(con,custsite,sitenum);
                	if (vcl.size()>0) {
                				for (int icl = 0 ; icl < vcl.size(); icl++)
                				{
// CUSTOMER IS LOCAL
                        			UniCustomer tcl = (UniCustomer) vcl.elementAt(icl);
                				}
                         		} else {
			Vector vcs;
			vcs = UniCustomer.getCustNumSite(conu,custsite,sitenum);
			if (vcs.size()>0) {
			for (int ics=0 ; ics< vcs.size(); ics++)
			{
			UniCustomer tcs = (UniCustomer) vcs.elementAt(ics);
                  	String custtype = tcs.getCustType();
			String custname=tcs.getCustomerName();
			String address1=tcs.getAddress1();
			String address2=tcs.getAddress2();
			String city =tcs.getCity();
			String state=tcs.getState();
			String zip=tcs.getZip();
			String homephone=tcs.getHomePhone();
			String altphone=tcs.getAltPhone();
			String custnotes=tcs.getCustomerNotes();
			custsite=tcs.getCustSite();
			sitenum=tcs.getSiteNum();
			String cemail=tcs.getCEmail();
			
			
				String tcustnotes="";
				if (custnotes!=null) {
				tcustnotes = custnotes.replaceAll("'","''");
						}
				String tcustname="";
				if (custname!=null) {
				tcustname = custname.replaceAll("'","''");
						}
				String tcaddress1="";
				if (address1!=null) {
				tcaddress1 = address1.replaceAll("'","''");
						}
				String tcaddress2="";
				if (address2!=null) {
				tcaddress2 = address2.replaceAll("'","''");
						}
			    UniCustomer.addCustomer(con, tcustname, tcaddress1, tcaddress2, city, state, zip, homephone, altphone, custnotes, cemail, custsite, sitenum, custtype);
			    	int servsync=0;
	int equipnum=0;
	String brand="";
	String modelnum="";
	String serialnum="";
	String filter="";
	String enoutes="";
	String type="";
	String seer="";
	String btuout="";
	String notes="";
	
	int eremote = 0;
	int esynced = 0;

                Vector v;
        	v = UniEquip.getCustomerItems(conu, custsite, sitenum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniEquip t = (UniEquip) v.elementAt(i);
			servsync=t.getServSync();
			equipnum=t.getId();
			custsite=t.getCustSite();
			sitenum=t.getSiteNum();
			brand=t.getBrand();
			modelnum=t.getModelnum();
			serialnum=t.getSerialnum();
			filter=t.getFilter();
			notes=t.getNotes();
			type=t.getEtype();
			seer=t.getCSeer();
			btuout=t.getBtuOut();
			eremote++;
			// Now we have remote - now let's check the local database for an exact match
			// 
			String tserialnum="";
			if (serialnum!=null) {                                
				tserialnum = serialnum.replaceAll("'","''");
			}
			Statement stmt = con.createStatement();
			ResultSet rsu = stmt.executeQuery("SELECT enum  FROM equipment where brand='"+brand+"' and modelnum like '"+modelnum+"' and serialnum like '"+tserialnum+"' and notes like '"+notes+"' and etype='"+type+"' ORDER BY enum;");
			if (!rsu.first()) {
				//////////////////////////////////////////////
				// Not on server - find customer number on localmachine
				/////////////////////////////////////////////
				Vector vc;
				vc = UniCustomer.getCustNumSite(con,custsite,sitenum);
				if (vc.size()>0) {
					for (int ic = 0 ; ic < vc.size(); ic++)
					{
						UniCustomer tc = (UniCustomer) vc.elementAt(ic);
						remotecrecnum = tc.getCusNum();
					}
					//////////////////////////////////////////////
					// No Match - Add to local machine
					/////////////////////////////////////////////
					String tmodelnum="";
					if (modelnum!=null) {
						tmodelnum = modelnum.replaceAll("'","''");
							}
							String ttserialnum="";
							if (serialnum!=null) {
								ttserialnum = serialnum.replaceAll("'","''");
							}
							UniEquip.AddItem(con,Integer.parseInt(remotecrecnum),brand,tmodelnum,ttserialnum, filter, notes, type, seer, btuout, custsite, sitenum, 2);
							esynced++;
				}
			}
		}
			    
			    
			    SyncCustCallslip slc = new SyncCustCallslip(con, conu, custsite, sitenum);
			    SyncCustInspection sli = new SyncCustInspection(con, conu, custsite, sitenum);
			    out.println ("<br><br>Customer Added - Continue");
                			}
			} else {
			// no server records found
			out.println("<br><br>No server record found - Add customer manually <br><br>");
			
			}
					}
					
	}

  private void doAddCustomerServer(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
	String reqsource = req.getParameter("reqsource");


	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Customer</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=searchcustserver&custstart="+custstart+"&custstop="+custstop+"&reqsource="+reqsource+"\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Customer Number :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"custsite\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Site Number :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"sitenum\" size=\"15\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	
	con.close();
	}


  private void doAddCustomerUnlock(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

	String custnum = req.getParameter("custnum");
	String custsite = req.getParameter("custsite");
	String sitenum = req.getParameter("sitenum");

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Customer Unlock</title>");
	out.println("</head>");
	Format formatter;
	Date texpiredate;
	Date tunlockdate;
	String expiredate="";
	String unlockdate="";
	Calendar calendar = Calendar.getInstance();
	tunlockdate=calendar.getTime();
	calendar.add(Calendar.DATE,doGetCompanyLaptopRetention());
	texpiredate=calendar.getTime();

	SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	expiredate = formatter.format(texpiredate);
	unlockdate = formatter.format(tunlockdate);
	out.println("Unlock Date: "+unlockdate+"<br>");
	out.println("Expire Date: "+expiredate+"<br>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savecustunlock\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Callslip :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"callslip\" size=\"15\">");
	out.println("</td></tr><tr><td>");
	out.println("Tech ID :");
	out.println("</td>");
out.println("<td align=\"left\"><select width=\"50\" name=\"techid\">");
                Vector vp = UniTechInfo.getAllItems(con);
		out.println("<option value=\"-\">-</option>");
                for (int i = 0 ; i < vp.size(); i++)
                {
                UniTechInfo t = (UniTechInfo) vp.elementAt(i);
		out.println("<option value="+t.getUserName()+">"+t.getUserName()+"</option>");
		}
		out.println("</select></td></tr>");
	
	out.println("</table>");
	out.println("<input type=\"hidden\" name=\"custsite\" value=\""+custsite+"\">");
	out.println("<input type=\"hidden\" name=\"sitenum\" value=\""+sitenum+"\">");
	out.println("<input type=\"hidden\" name=\"custnum\" value=\""+custnum+"\">");
	out.println("<input type=\"hidden\" name=\"expiredate\" value=\""+expiredate+"\">");
	out.println("<input type=\"hidden\" name=\"unlockdate\" value=\""+unlockdate+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	con.close();
	}

 private void doSaveCustUnlock(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

	String custnum = req.getParameter("custnum");
	String custsite = req.getParameter("custsite");
	String sitenum = req.getParameter("sitenum");
	String callslip = req.getParameter("callslip");
	String techid=req.getParameter("techid");
	String expiredate=req.getParameter("expiredate");
	String unlockdate=req.getParameter("unlockdate");

	//Format formatter;
	//Date texpiredate;
	//Date tunlockdate;
	//String expiredate="";
	//String unlockdate="";
	//Calendar calendar = Calendar.getInstance();
	//tunlockdate=calendar.getTime();
	//calendar.add(Calendar.DATE,2);
	//texpiredate=calendar.getTime();

	//SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
	//formatter = new SimpleDateFormat("yyyy-MM-dd");
	//expiredate = doFormatDate(texpiredate);
	//unlockdate = doFormatDate(tunlockdate);
	
	CustUnlock.AddItem(con, username, custsite, sitenum, callslip, unlockdate, expiredate);
	//out.println("
	con.close();
	res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=1&custnum="+custnum+"");
	}
	
 private void doUpdateLocalCustUnlock(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
	Date texpiredate;
	Date tunlockdate;
	String expiredate="";
	String unlockdate="";
	String todaydate="";
	Calendar calendar = Calendar.getInstance();
	tunlockdate=calendar.getTime();
	calendar.add(Calendar.DATE,doGetCompanyLaptopRetention());
	texpiredate=calendar.getTime();
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String nocustonlaptop=doGetCompanyCustOnLaptop();
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
	
	SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	UniCallslip.SyncCallSlipFollowup(con, conu, username);
	todaydate = formatter.format(tunlockdate);
	CustUnlock.CustUnlockDownloadInfo(con, conu, username, todaydate);
	out.println ("Customer Lock Table is now Downloaded and Updated.<br>Next comes the delete all customers without customer numbers.<br>");
	
	//Add IF statement here to make sure this is NEVER run on main server.
	
	//In this spot make sure we add a IF statement based on user record to allow some users to save the database on the laptops.
	
	//Now select customers from local base without customer numbers.
	
	     Vector v;
                v = UniCustomer.getNoSiteNum(con);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
                        int crecnum  = Integer.parseInt(t.getCusNum());
			String sitenum=t.getSiteNum();
			String custsite=t.getCustSite();
			counter++;
	// Select all callslip - delete inventory and charges and completion codes from each.
		
		CustUnlock.deleteCustomerInfo(con, custsite, sitenum, crecnum);
		}
	out.println(counter+" Customer's Deleted because of no customer number<br>");
	
	out.println("Now Select All Customers and delete those not in unlock list<br>");
	
	        v = UniCustomer.getAllItems(con);
                counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
                        int crecnum  = Integer.parseInt(t.getCusNum());
			String sitenum=t.getSiteNum();
			String custsite=t.getCustSite();
			counter++;
	
			// check unlock list
			
		Vector vl;
		vl = CustUnlock.getSingleItem(con, custsite, sitenum);
		if (vl.size()==0) {
			// here is anything that does not appear in unlock list.
			// now check for follow-ups in callslips and inspections.
			Vector vcf;
			vcf=UniCallslip.getFollowupItems(con, custsite, sitenum);
			
			Vector vci;
			vci=UniInspection.getCustInspectionFollowup(con, custsite, sitenum);
			
			if ((vcf.size()==0) && (vci.size()==0))	
			{
			// record deleted - not in lock
			//out.println("Record with custsite of "+custsite+" and sitenum of "+sitenum+" has been deleted from database.<br>");
	
	     Vector v2;
                v2 = UniCustomer.getCustNumSite(con, custsite, sitenum);
                int counter2=0;
                for (int i2 = 0 ; i2 < v2.size(); i2++)
                {
                        UniCustomer t2 = (UniCustomer) v2.elementAt(i2);
                        int crecnum2  = Integer.parseInt(t2.getCusNum());
			sitenum=t2.getSiteNum();
			custsite=t2.getCustSite();
			counter2++;
	
			// put if statement here to only allow if Delete laptop is Yes and if user record allows it.
			if (nocustonlaptop.equalsIgnoreCase("no")) {
	CustUnlock.deleteCustomerInfo(con, custsite, sitenum, crecnum2);
			}

	}

			
			} else {
			// record saved - some followup exists	
			out.println("Record with custsite of "+custsite+" and sitenum of "+sitenum+" has been saved = followup present.<br>");
			}
		} else {
		// Unlock record exists
		out.println("Record with custsite of "+custsite+" and sitenum of "+sitenum+" has been saved = Unlock Record present.<br>");
		
		}
		}		
		
		out.println("Now need to download customers that are on the unlocktable and not on local machine.<br>");
		String remotecrecnum="";
		Vector vl;
		vl = CustUnlock.getAllItems(con);
		for (int i4 = 0; i4 < vl.size(); i4++)
		{
		CustUnlock t3 = (CustUnlock) vl.elementAt(i4);
		String custsite=t3.getCustNum();
		String sitenum=t3.getSiteNum();
		
		Vector vc;
		vc=UniCustomer.getCustNumSite(con, custsite, sitenum);
		if (vc.size()==0) {
		// get server information here - customer not on local database

			Vector vcs;
			vcs = UniCustomer.getCustNumSite(conu,custsite,sitenum);
			if (vcs.size()>0) {
			for (int ics=0 ; ics< vcs.size(); ics++)
			{
			UniCustomer tcs = (UniCustomer) vcs.elementAt(ics);
                  	String custtype = tcs.getCustType();
			String custname=tcs.getCustomerName();
			String address1=tcs.getAddress1();
			String address2=tcs.getAddress2();
			String city =tcs.getCity();
			String state=tcs.getState();
			String zip=tcs.getZip();
			String homephone=tcs.getHomePhone();
			String altphone=tcs.getAltPhone();
			String custnotes=tcs.getCustomerNotes();
			custsite=tcs.getCustSite();
			sitenum=tcs.getSiteNum();
			String cemail=tcs.getCEmail();
			
			
				String tcustnotes="";
				if (custnotes!=null) {
				tcustnotes = custnotes.replaceAll("'","''");
						}
				String tcustname="";
				if (custname!=null) {
				tcustname = custname.replaceAll("'","''");
						}
				String tcaddress1="";
				if (address1!=null) {
				tcaddress1 = address1.replaceAll("'","''");
						}
				String tcaddress2="";
				if (address2!=null) {
				tcaddress2 = address2.replaceAll("'","''");
						}
			    UniCustomer.addCustomer(con, tcustname, tcaddress1, tcaddress2, city, state, zip, homephone, altphone, custnotes, cemail, custsite, sitenum, custtype);
			    	int servsync=0;
	int equipnum=0;
	String brand="";
	String modelnum="";
	String serialnum="";
	String filter="";
	String enoutes="";
	String type="";
	String seer="";
	String btuout="";
	String notes="";
	
	int eremote = 0;
	int esynced = 0;

                Vector ve;
        	ve = UniEquip.getCustomerItems(conu, custsite, sitenum);
                for (int i = 0 ; i < ve.size(); i++)
                {
                       	UniEquip t = (UniEquip) ve.elementAt(i);
			servsync=t.getServSync();
			equipnum=t.getId();
			custsite=t.getCustSite();
			sitenum=t.getSiteNum();
			brand=t.getBrand();
			modelnum=t.getModelnum();
			serialnum=t.getSerialnum();
			filter=t.getFilter();
			notes=t.getNotes();
			type=t.getEtype();
			seer=t.getCSeer();
			btuout=t.getBtuOut();
			eremote++;
			// Now we have remote - now let's check the local database for an exact match
			// 
			String tserialnum="";
			if (serialnum!=null) {                                
				tserialnum = serialnum.replaceAll("'","''");
			}
			Statement stmt = con.createStatement();
			ResultSet rsu = stmt.executeQuery("SELECT enum  FROM equipment where brand='"+brand+"' and modelnum like '"+modelnum+"' and serialnum like '"+tserialnum+"' and notes like '"+notes+"' and etype='"+type+"' ORDER BY enum;");
			if (!rsu.first()) {
				//////////////////////////////////////////////
				// Not on server - find customer number on localmachine
				/////////////////////////////////////////////
				Vector vc1;
				vc1 = UniCustomer.getCustNumSite(con,custsite,sitenum);
				if (vc1.size()>0) {
					for (int ic = 0 ; ic < vc1.size(); ic++)
					{
						UniCustomer tc = (UniCustomer) vc1.elementAt(ic);
						remotecrecnum = tc.getCusNum();
					}
					//////////////////////////////////////////////
					// No Match - Add to local machine
					/////////////////////////////////////////////
					String tmodelnum="";
					if (modelnum!=null) {
						tmodelnum = modelnum.replaceAll("'","''");
							}
							String ttserialnum="";
							if (serialnum!=null) {
								ttserialnum = serialnum.replaceAll("'","''");
							}
							UniEquip.AddItem(con,Integer.parseInt(remotecrecnum),brand,tmodelnum,ttserialnum, filter, notes, type, seer, btuout, custsite, sitenum, 2);
							esynced++;
				}
			}
		}
			    
			    
			    SyncCustCallslip slc = new SyncCustCallslip(con, conu, custsite, sitenum);
			    SyncCustInspection sli = new SyncCustInspection(con, conu, custsite, sitenum);
			    SyncCustPagreement slp = new SyncCustPagreement(conu, con, custsite, sitenum);
			    SyncCustWorksheets slw = new SyncCustWorksheets(conu, con, custsite, sitenum);
			    SyncCustQuotes slq = new SyncCustQuotes(conu, con, custsite, sitenum);
			    
			    out.println ("<br><br>Customer Added - Continue");
			}}
		}
		}
	con.close();	
	//res.sendRedirect(""+classdir+"UniCash?action=top");
	}	
		
 private void doUploadInvCSVFile(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Upload CSV File</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=importinvcsv\" name=\"importcsv\" enctype=\"multipart/form-data\">");
	out.println("<p>File  :");
	out.println("<input type=\"file\" name=\"csvfile\">");
	out.println("</p>");
	//out.println("<p>File Name:");
	out.println("<input type=\"hidden\" name=\"cvsfilename\" value=\"dsaa.csv\">");
	out.println("</p>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Import\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	con.close();
	}
	

 private void doImportInvCSVFile(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		Format formatter;	
		Calendar now = Calendar.getInstance();
		Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");
		String s = formatter.format(date);		
		boolean isMultipart = FileUpload.isMultipartContent(req);
		// Create a new file upload handler
		DiskFileUpload upload = new DiskFileUpload();
		// parse this request by the handler
		// this gives us a list of items from the request
		List items = null;

		try {
			items = upload.parseRequest(req);
		} catch (FileUploadException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			out.println("Problem at Parse Request line 10326<br>");
		}

		Iterator itr = items.iterator();
		
		while(itr.hasNext()) {
			FileItem item = (FileItem) itr.next();
			
			// check if the current item is a form field or an uploaded file
			if(item.isFormField()) {
				
				// get the name of the field
				String fieldName = item.getFieldName();

				// if it is name, we can set it in request to thank the user
				if(fieldName.equals("filename")) {
					req.setAttribute("msg", "Thank You: " + item.getString());
					// later you can use it like this:	
					out.println(req.getAttribute("msg")+"<br>");
				}

				out.println(item.getFieldName() + " = " + item.getString() + "<br>");
				}

				else {

					// the item must be an uploaded file save it to disk. Note that there
					// seems to be a bug in item.getName() as it returns the full path on
					// the client's machine for the uploaded file name, instead of the file
					// name only. To overcome that, I have used a workaround using
					// fullFile.getName().
					File fullFile = new File(item.getName());
					//File savedFile = new File(getServletContext().getRealPath("/"), fullFile.getName());
					File savedFile = new File("/tmp/", fullFile.getName());
					try {
						item.write(savedFile);
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
						out.println(e1+"<br>");
						//out.println("Exception in the file save portion of rountine<br>");
					}
					out.println("<br>saved file = " + fullFile.getName()+"<br>");
					
					// here is where we do the csv sql stuff.
					try
						{
								// load the driver into memory
								Class.forName("org.relique.jdbc.csv.CsvDriver");
								// create a connection. The first command line parameter is assumed to
								//  be the directory in which the .csv files are held
								Connection conn = DriverManager.getConnection("jdbc:relique:csv:/tmp");
								// create a Statement object to execute the query with
								Statement stmt = conn.createStatement();
								Statement stmt2 = con.createStatement();
								// Select the ID and NAME columns from sample.csv
								ResultSet results = stmt.executeQuery("SELECT * FROM dsaa");
								// dump out the results
														
								int result1=stmt2.executeUpdate("DROP TABLE IF EXISTS inv_keycodes;");
								int result2=stmt2.executeUpdate("CREATE TABLE inv_keycodes (ID int(11) NOT NULL auto_increment,keycodep text,part_number text,sort_desc text,description text,manu text,location text,oh_qty double,qty_opt double,part_cost double,extended_cost double,sell_price text,stocknum text,orderuom text,conversion double,peak_oh text,off_peak_oh text,PRIMARY KEY (ID),UNIQUE ID (ID),KEY ID_2 (ID));");
								int counter=0;
								while (results.next())
								{
									
									//----------------------------------------------------------
									
			String keycodep=results.getString("Keycode");
			String part_number=results.getString("Part Number");
			String sort_desc=results.getString("Sort Description");
			String description=results.getString("Description");
			String manu=results.getString("Manufacturer");
			String location=results.getString("Location");
			String oh_qty=results.getString("Qty OH");
			String qty_opt=results.getString("Opt Qty");
			String part_cost=results.getString("ACTUAL COST");
			String extended_cost=results.getString("Extended Cost");
			String sell_price=results.getString("Sell Price");
			String stocknum=results.getString("Stock UOM");
			String orderuom=results.getString("Order UOM");
			String conversion=results.getString("Conversion");
			String peak_oh=results.getString("Peak Qty");
			String off_peak_oh=results.getString("Off-Peak Qty");
			if ((oh_qty==null)||(oh_qty.equalsIgnoreCase(""))) oh_qty="0";
			if ((qty_opt==null)||(qty_opt.equalsIgnoreCase(""))) qty_opt="0";
			if ((part_cost==null)||(part_cost.equalsIgnoreCase(""))) part_cost="0";
			if ((extended_cost==null)||(extended_cost.equalsIgnoreCase(""))) extended_cost="0";
			if ((sell_price==null)||(sell_price.equalsIgnoreCase(""))) sell_price="0";
			if ((conversion==null)||(conversion.equalsIgnoreCase(""))) conversion="0";
			
			//if (oh_qty.length()<1) oh_qty="0";
			//if (qty_opt.length()<1) qty_opt="0";
			//if (part_cost.length()<1) part_cost="0";
			//if (extended_cost.length()<1) extended_cost="0";
			//if (sell_price.length()<1) sell_price="0";
			//if (conversion.length()<1) conversion="0";
			counter++;
			//sort_desc="";
			if (!description.equalsIgnoreCase("DO NOT USE")) {
				stmt2.executeUpdate("INSERT INTO inv_keycodes (keycodep, part_number, sort_desc, description, manu, location, oh_qty, qty_opt, part_cost, extended_cost, sell_price, stocknum, orderuom, conversion, peak_oh, off_peak_oh) Values ('"+keycodep+"','" +part_number+ "', '"+sort_desc+"','"+description+"','" +manu+ "', '"+location+"','"+oh_qty+"','" +qty_opt+ "', '"+part_cost+"','"+extended_cost+"','" +sell_price+ "', '"+stocknum+"','"+orderuom+"','" +conversion+ "', '"+peak_oh+"','"+off_peak_oh+"')");
				out.println("KEYCODE = " + results.getString("Keycode") + "   PART NUMBER= " + results.getString("Part Number")+"<br>");
			} else {
									
									//----------------------------------------------------------
									
									out.println("SKIP KEYCODE = " + results.getString("Keycode") + "   PART NUMBER= " + results.getString("Part Number")+"<br>");
			}
								}
								
								out.println("<br><H1>Records Imported = "+counter+"</h1><br>");
								
								stmt2.executeUpdate("update inv_keycodes_date set dateupdated='"+s+"';");		
								ResultSet rs = stmt2.executeQuery("SELECT * FROM inv_keycodes_date");
								while(rs.next())
								{
									String nlocaldate=rs.getString("dateupdated");
									out.println("<br>New Local Date: "+ nlocaldate +"<br>");
								}				
	
		
								
								// clean up
								results.close();
								stmt.close();
								conn.close();
								
							} 
							catch(Exception e)
							{
								out.println("Oops-> " + e);
							}
					}
				}
		
				con.close();
			}

	
 private void OlddoImportInvCSVFile(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Import Inventory CSV File</title>");
	out.println("</head>");
	
	// Create a factory for disk-based file items
	DiskFileItemFactory factory = new DiskFileItemFactory();

// Set factory constraints
	//factory.setSizeThreshold(yourMaxMemorySize);
	//factory.setRepositoryPath("upload1/");
        factory.setRepository(new File("/tmp"));

// Create a new file upload handler
	ServletFileUpload upload = new ServletFileUpload(factory);

	// Set overall request size constraint
	//upload.setSizeMax(yourMaxRequestSize);
	// Parse the request
	List /* FileItem */ items = upload.parseRequest(req);
	out.println("File Upload Complete");
	
	
	out.println("Import Complete<br>");
	con.close();
	}
	
  private void doAddPrevPrice(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String action=req.getParameter("action");
	String descript="";
	String tm_est="";
	String yr1="";
	String yr2="";
	String yr3="";
	int tplanrec=0;
	String planrec="";
	if (action.equalsIgnoreCase("editprevprice")) {
                planrec= req.getParameter("planrec");
		Vector v;
                v = UniPreventative.getAllItems(con, planrec);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniPreventative t = (UniPreventative) v.elementAt(i);
                        tplanrec  = t.getId();
			planrec=""+tplanrec+"";
                        descript= t.getDescription();
                        tm_est = t.getTmEst();
                        yr1 = t.getYr1();
                        yr2 = t.getYr2();
                        yr3 = t.getYr3();
		}
	}
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add/Edit Preventative Price</title>");
	out.println("</head>");
	if (action.equalsIgnoreCase("addprevprice")) {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveprevprice\" name=\"addcust\">");
	}
	if (action.equalsIgnoreCase("editprevprice")) {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateprevprice\" name=\"addcust\">");
	}
	out.println("<p>Description        :");
	out.println("<input type=\"text\" name=\"descript\" value=\""+descript+"\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Time and Material Estimate  :");
	out.println("<input type=\"text\" name=\"tm_est\" value=\""+tm_est+"\"  size=\"8\">");
	out.println("</p>");
	out.println("<p>1 Year  :");
	out.println("<input type=\"text\" name=\"yr1\"  value=\""+yr1+"\" size=\"8\">");
	out.println("</p>");
	out.println("<p>2 Year     :");
	out.println("<input type=\"text\" name=\"yr2\"  value=\""+yr2+"\" size=\"8\">");
	out.println("</p>");
	out.println("<p>3 Year    :");
	out.println("<input type=\"text\" name=\"yr3\"  value=\""+yr3+"\" size=\"8\">");
	out.println("</p>");
	out.println("<p> <CENTER>");
	out.println("<input type=\"hidden\" Name=\"planrec\" value=\""+planrec+"\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	con.close();
	}

  private void doSavePrevPrice(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String action=req.getParameter("action");
		String planrec=req.getParameter("planrec");
                String descript = req.getParameter("descript");
                String yr3 = req.getParameter("yr3");
                String yr2 = req.getParameter("yr2");
                String yr1 = req.getParameter("yr1");
                String tm_est = req.getParameter("tm_est");
		Format formatter;	
		Calendar now = Calendar.getInstance();
		Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");
		String s = formatter.format(date);		
		if (action.equalsIgnoreCase("saveprevprice")) {
                UniPreventative.addPreventative(con, descript, tm_est, yr1, yr2, yr3, s);
		}
		if (action.equalsIgnoreCase("updateprevprice")) {
                UniPreventative.UpdatePreventative(con, planrec, descript, tm_est, yr1, yr2, yr3, s);
		}
		out.println("Your item has been added to the database<br>");
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=listprevprice");
	}

private void doListPhoneList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	int phonelistperm=Integer.parseInt(doGetEditCompPhoneList(username));
out.println("<html>");
out.println("<head>");
out.println("<title>Company Phone List</title>");
out.println("</head>");
out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		if (phonelistperm==1) 
			{
out.println("<a href="+classdir+"UniCash?action=addcompphonerec>Add a Phone Number</a>");
			}
out.println("<P><P>");
out.println("<table border=1 width=100%>");
out.println("<th>Name</th><th>Home Number</th><th>Cell Number</th><th>Direct Connect</th><th>Truck Number</th><th>Additional Number</th>");
                Vector v;
                v = UniPhoneList.getAllItems(con);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniPhoneList t = (UniPhoneList) v.elementAt(i);
                        int record_number  = t.getId();
                        String  name = t.getName();
                        String home_number = t.getHomeNumber();
                        String cell_number = t.getCellNumber();
                        String direct_connect = t.getDirectConnect();
                        String truck_number = t.getTruckNumber();
                        String additional_number = t.getAdditionalNumber();
                        counter++;
                        if (counter==1)
                                {
                        out.println("<tr BGCOLOR=#A0B8C8>");
                                }
                        if (counter==2)
                                {
                        out.println("<tr>");
                        counter=0;
                                }
		if (phonelistperm==1) 
			{
out.println("<td><a href="+classdir+"UniCash?action=editcompphonerec&recnum="+record_number+">"+name+"</a></td><td>"+home_number+"</td><td>"+cell_number+"</td><td>"+direct_connect+"</td><td>"+truck_number+"</td><td>"+additional_number+"</td><td><a href="+classdir+"UniCash?action=delcompphonerec&recordnumber="+record_number+">Delete</a></tr>");
			} else {
out.println("<td>"+name+"</td><td>"+home_number+"</td><td>"+cell_number+"</td><td>"+direct_connect+"</td><td>"+truck_number+"</td><td>"+additional_number+"</td></tr>");
			}
                }
out.println("</table>");
out.println("<P><P>");
		if (phonelistperm==1) 
			{
out.println("<p><br><a href="+classdir+"UniCash?action=addcompphonerec>Add a Phone Number</a><br><br>");

			String thismainserver=doGetThisMainServer();
		if (thismainserver.equalsIgnoreCase("no")) {
out.println("<p><br><a href="+classdir+"UniCash?action=phonelisttoserv>Update Server (MUST HAVE INTERNET CONNECT)</a><br><br>");
				}
			}
		con.close();
}

  private void doListPrevPrice(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
out.println("<html>");
out.println("<head>");
out.println("<title>Planned Service Prices</title>");
out.println("</head>");
out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
out.println("<a href="+classdir+"UniCash?action=addprevprice>Add a Service Plan Price</a>");
out.println("<P><P>");
out.println("<table border=1 width=100%>");
out.println("<th>Description</th><th>T/M Cost</th><th>1 Year</th><th>2 Year</th><th>3 Year</th>");
//out.println("<th>Description</th><th>T/M Cost</th><th>2 Year</th><th>3 Year</th>");
                Vector v;
                v = UniPreventative.getAllItems(con);
                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniPreventative t = (UniPreventative) v.elementAt(i);
                        int planrec  = t.getId();
                        String  description= t.getDescription();
                        String tm_est = t.getTmEst();
                        String yr_1 = t.getYr1();
                        String yr_2 = t.getYr2();
                        String yr_3 = t.getYr3();
                        counter++;
                        if (counter==1)
                                {
                        out.println("<tr BGCOLOR=#A0B8C8>");
                                }
                        if (counter==2)
                                {
                        out.println("<tr>");
                        counter=0;
                                }

out.println("<tr><td><a href="+classdir+"UniCash?action=editprevprice&planrec="+planrec+">"+description+"</a></td><td>"+tm_est+"</td><td>"+yr_1+"</td><td>"+yr_2+"</td><td>"+yr_3+"</td></tr>");
				//out.println("<tr><td><a href=edprevprice.php?planrec="+planrec+">"+description+"</a></td><td>"+tm_est+"</td><td>"+yr_2+"</td><td>"+yr_3+"</td></tr>");
                }
out.println("</table>");
out.println("<P><P>");out.println("<a href="+classdir+"UniCash?action=addprevprice>Add a Service Plan Price</a>");
		con.close();
}
  

	private void doAddInvItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String tcatnum = req.getParameter("catnum");
		int catnum=Integer.parseInt(tcatnum);

out.println("<html>");
out.println("<head>");
out.println("<title>Add Inventory Item</title>");
out.println("</head>");
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveaddinvitem&catnum="+catnum+" \" name=\"addtime\">");
out.println("<p>Item Name        :");
out.println("<input type=\"text\" name=\"itemname\">");
out.println("</p>");
out.println("<p>Key Code         :");
out.println("<input type=\"text\" name=\"keycode\"  > ");
out.println("</p>");
out.println("<p>Min Quantity      :");
out.println("<input type=\"text\" name=\"minquantity\">");
out.println("</p>");
out.println("<input type=\"hidden\" name=\"catnum\">");
out.println("<p> <CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
		con.close();
	}


	private void doAddQuoteItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String tcatnum = req.getParameter("catnum");
		int catnum=Integer.parseInt(tcatnum);

out.println("<html>");
out.println("<head>");
out.println("<title>Add Quote Equipment Item</title>");
out.println("</head>");
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveaddquoteitem&catnum="+catnum+" \" name=\"addtime\">");
out.println("<p>Item Name        :");
out.println("<input type=\"text\" name=\"itemname\">");
out.println("</p>");
out.println("<p>Model Number         :");
out.println("<input type=\"text\" name=\"mannum\"  > ");
out.println("</p>");
out.println("<p>Investment      :");
out.println("<input type=\"text\" name=\"investment\">");
out.println("</p>");
out.println("<input type=\"hidden\" name=\"catnum\">");
out.println("<p> <CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
		con.close();
	}


	private void doAddPackageItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String tcatnum = req.getParameter("catnum");
		String adjper = req.getParameter("adjper");
		int catnum=Integer.parseInt(tcatnum);

out.println("<html>");
out.println("<head>");
out.println("<title>Add Quote Package Item</title>");
out.println("</head>");
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveaddpackageitem&catnum="+catnum+" \" name=\"addtime\">");
out.println("<table>");
out.println("<tr><td>Package ID:</td><td>");
out.println("<input type=\"text\" name=\"pkgID\"></td></tr>");
out.println("<tr><td>Description:</td><td>");
out.println("<input type=\"text\" name=\"pkgDesc\"></td></tr>");
out.println("<tr><td>Labor Hours:</td><td>");
out.println("<input type=\"text\" name=\"pkgLaborHours\"></td></tr>");
out.println("<tr><td>Parts Cost:</td><td>");
out.println("<input type=\"text\" name=\"pkgPartsCost\"></td></tr>");
out.println("</table>");
out.println("<input type=\"hidden\" name=\"catnum\" value=\""+catnum+"\">");
out.println("<input type=\"hidden\" name=\"adjper\" value=\""+adjper+"\">");
out.println("<p> <CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
		con.close();
	}


  private void doEditPackageItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String titemnum = req.getParameter("itemnum");
	String tcatnum = req.getParameter("catnum");
	String adjper = req.getParameter("adjper");
	String startpage = req.getParameter("startpage");
	int catnum=Integer.parseInt(tcatnum);
	int itemnum=Integer.parseInt(titemnum);
	Format formatter;	
	Calendar now = Calendar.getInstance();
       	Date date = new Date(); 
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
               	Vector v;
                v = UniPkgItems.getIndividualItems(con,itemnum);
			int recid=0;
			int catid=0;
			String pkgid=null;
			String pkgdesc=null;
			int laborhours=0;
			double pkgpartscost=0.00;

                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniPkgItems t = (UniPkgItems) v.elementAt(i);
				recid=t.getrecID();
				catid=t.getCatID();
				pkgid=t.getPkgID();
				pkgdesc=t.getPkgDesc();
				laborhours=t.getPkgLaborHours();
				pkgpartscost=t.getPkgPartsCost();
                }
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Package Item</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatepackageitem\" name=\"addtime\">");
	out.println("<p>Item        :");
	out.println("<input type=\"text\" name=\"pkgid\" value = \""+pkgid+"\">");
	out.println("</p>");
	out.println("<p>Description         :");
	out.println("<input type=\"text\" name=\"pkgdesc\" value = \""+pkgdesc+"\"> ");
	out.println("</p>");
	out.println("<p>Labor Hours      :");
	out.println("<input type=\"text\" name=\"laborhours\" value = \""+laborhours+"\">");
	out.println("</p>");
	out.println("<p>Parts Cost      :");
	out.println("<input type=\"text\" name=\"pkgpartscost\" value = \""+pkgpartscost+"\">");
	out.println("</p>");
	out.println("<input type=\"hidden\" name=\"recid\" value=\""+recid+"\">");
	out.println("<input type=\"hidden\" name=\"catid\" value=\""+catid+"\">");
	out.println("<input type=\"hidden\" name=\"adjper\" value=\""+adjper+"\">");
	out.println("<input type=\"hidden\" name=\"startpage\" value=\""+startpage+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

  private void doEditWsItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String titemrec = req.getParameter("itemrec");
	int itemrec=Integer.parseInt(titemrec);
	String tcustnum = req.getParameter("custnum");
	int custrec=Integer.parseInt(tcustnum);
	String twsrec = req.getParameter("wsnum");
	int wsrec=Integer.parseInt(twsrec);
	Format formatter;	
	Calendar now = Calendar.getInstance();
       	Date date = new Date(); 
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
               	Vector v;
                v = UniWsItems.getIndividualItem(con,itemrec);
                        String item  =null;
                        String keycode=null;
			int quantity=0;
			double cost = 0.00;
			double laborcost = 0.00;
			int laborhours = 0;
			int shophours = 0;
			double subcost = 0.00;

                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniWsItems t = (UniWsItems) v.elementAt(i);
			wsrec = t.getWsRec();
			item = t.getWsItem();
			keycode = t.getWsKeyCode();
			quantity = t.getWsQuant();
			cost = t.getWsCost();
			laborhours = t.getWsLaborHours();
			shophours = t.getWsShopHours();
			laborcost = t.getWsLaborCost();
			subcost = t.getWsSubCost();
                }
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Worksheet Item</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatesheetitem\" name=\"addtime\">");
	out.println("<p>Item        :");
	out.println("<input type=\"text\" name=\"item\" value = \""+item+"\">");
	out.println("</p>");
	out.println("<p>Keycode or Part #   :");
	out.println("<input type=\"text\" name=\"keycode\" value = \""+keycode+"\"> ");
	out.println("</p>");
	out.println("<p>Quantity      :");
	out.println("<input type=\"text\" name=\"quantity\" value = \""+quantity+"\">");
	out.println("</p>");
	out.println("<p>Cost      :");
	out.println("<input type=\"text\" name=\"cost\" value = \""+cost+"\">");
	out.println("</p>");
	out.println("<p>Labor Hours      :");
	out.println("<input type=\"text\" name=\"laborhours\" value = \""+laborhours+"\">");
	out.println("</p>");
	out.println("<p>Shop Hours      :");
	out.println("<input type=\"text\" name=\"shophours\" value = \""+shophours+"\">");
	out.println("</p>");
	out.println("<p>Labor Cost      :");
	out.println("<input type=\"text\" name=\"laborcost\" value=\""+laborcost+"\">");
	out.println("<p>Sub Cost      :");
	out.println("<input type=\"text\" name=\"subcost\" value = \""+subcost+"\">");
	out.println("</p>");
	out.println("</p>");
	out.println("<input type=\"hidden\" name=\"itemrec\" value=\""+itemrec+"\">");
	out.println("<input type=\"hidden\" name=\"wsnum\" value=\""+wsrec+"\">");
	out.println("<input type=\"hidden\" name=\"custnum\" value=\""+custrec+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

  private void doAddWsItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String tcustnum = req.getParameter("custnum");
		int custrec=Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("wsnum");
		int wsrec=Integer.parseInt(twsrec);
		Format formatter;	
		Calendar now = Calendar.getInstance();
        	Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Worksheet Item</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveworksheetitem\" name=\"addtime\">");
	out.println("<p>Item        :");
	out.println("<input type=\"text\" name=\"item\">");
	out.println("</p>");
	out.println("<p>Keycode or Part Number   :");
	out.println("<input type=\"text\" name=\"keycode\" > ");
	out.println("</p>");
	out.println("<p>Quantity      :");
	out.println("<input type=\"text\" name=\"quantity\">");
	out.println("</p>");
	out.println("<p>Part Cost      :");
	out.println("<input type=\"text\" name=\"cost\">");
	out.println("</p>");
	out.println("<p>Labor Hours      :");
	out.println("<input type=\"text\" value=\"0\" name=\"laborhours\">");
	out.println("</p>");
	out.println("<p>Shop Hours      :");
	out.println("<input type=\"text\" value=\"0\" name=\"shophours\">");
	out.println("</p>");
	out.println("<p>Labor Cost      :");
	out.println("<input type=\"text\" name=\"laborcost\" value=\""+doGetLaborCost()+"\">");
	out.println("</p>");
	out.println("<p>Sub Cost        :");
	out.println("<input type=\"text\" name=\"subcost\" value=\"0.00\">");
	out.println("</p>");
	out.println("<input type=\"hidden\" name=\"wsnum\" value=\""+wsrec+"\">");
	out.println("<input type=\"hidden\" name=\"custnum\" value=\""+custrec+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}



  private void doWsKeyCodeLookup(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		int custrec=Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("wsnum");
		int wsrec=Integer.parseInt(twsrec);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Inventory Item Search - TMS</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=wskeycodecheck\" name=\"addcat\">");
	out.println("<p>Item Description :");
	out.println("<input type=\"text\" name=\"searchitem\">");
	out.println("</p>");
	out.println("<input type=\"hidden\" name=custnum value=\""+custrec+"\">");
	out.println("<input type=\"hidden\" name=wsnum value=\""+wsrec+"\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}


    private void doWsKeyCodeCheck(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		int custrec=Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("wsnum");
		int wsrec=Integer.parseInt(twsrec);
            String searchitem = req.getParameter("searchitem");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Keycode Search Result</title>");
            out.println("</head>");
            out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
            out.println(searchitem+"<br>");
            out.println("<table border=1 width=100%>");
            out.println("<th>Key Code</th><th>Part #</th><th>Sort</th><th>Description</th><th>Manuf.</th><th>OH Quantity</th><th>Cost</th><th>Sell Price</th></tr>");
            //$query = "SELECT * FROM inv_keycodes where description like \"%$searchitem%\"";
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM inv_keycodes where description like '%"+searchitem+"%'");
		
		 while(rs.next())
                {
		String keycode=rs.getString("keycodep");
                String part_number=rs.getString("part_number");
                String sort_desc=rs.getString("sort_desc");
                String description=rs.getString("description");
                String manu=rs.getString("manu");
                String oh_qty=rs.getString("oh_qty");
                String part_cost=rs.getString("part_cost");
                String sell_price=rs.getString("sell_price");
		out.println("<tr><td><a href=\""+classdir+"UniCash?action=addwsinvitem&custnum="+custrec+"&wsnum="+wsrec+"&keycode="+keycode+"&description="+description+"&cost="+part_cost+"\">"+keycode+"</a></td><td>"+part_number+"</td><td>"+sort_desc+"</td><td>"+description+"</td><td>"+manu+"</td><td>"+oh_qty+"</td><td>"+part_cost+"</td><td>"+sell_price+"</td></tr>");
		}

            out.println("</table>");
		con.close();
            
    }

  private void doAddWsPkgItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		int custrec=Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("wsnum");
		String pkgID = req.getParameter("pkgID");
		String adjper = req.getParameter("adjper");
		double dadjper = Double.parseDouble(adjper);
		int wsrec=Integer.parseInt(twsrec);
		Format formatter;	
		Calendar now = Calendar.getInstance();
        	Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");

                Vector v;
                v = UniPkgItems.getIndividualItems(con,pkgID);

                String pkgDesc =null;
		double pkgPartsCost=0.00;
		int pkgLaborHours=0;
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniPkgItems t = (UniPkgItems) v.elementAt(i);
			 pkgDesc= t.getPkgDesc();
                         pkgLaborHours= t.getPkgLaborHours();
			 pkgPartsCost= t.getPkgPartsCost()*dadjper;

	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Worksheet Item</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveworksheetitem\" name=\"addtime\">");
	out.println("<p>Description        :");
	out.println("<input type=\"text\" name=\"item\" value=\""+pkgDesc+"\">");
	out.println("</p>");
	out.println("<p>Code         :");
	out.println("<input type=\"text\" name=\"keycode\" value=\""+pkgID+"\" > ");
	out.println("</p>");
	out.println("<p>Quantity      :");
	out.println("<input type=\"text\" name=\"quantity\" value=\"1\">");
	out.println("</p>");
	out.println("<p>Cost      :");
	out.println("<input type=\"text\" name=\"cost\" value=\""+pkgPartsCost+"\">");
	out.println("</p>");
	out.println("<p>Labor Hours      :");
	out.println("<input type=\"text\" name=\"laborhours\" value=\""+pkgLaborHours+"\" >");
	out.println("</p>");
	out.println("<p>Shop Hours      :");
	out.println("<input type=\"text\" name=\"shophours\" value=\"0\" >");
	out.println("</p>");
	out.println("<p>Labor Cost      :");
	out.println("<input type=\"text\" name=\"laborcost\" value=\""+doGetLaborCost()+"\">");
	out.println("</p>");
	out.println("<input type=\"hidden\" name=\"wsnum\" value=\""+wsrec+"\">");
	out.println("<input type=\"hidden\" name=\"custnum\" value=\""+custrec+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		}
		con.close();
	}

  private void doAddWsInvItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String tcustnum = req.getParameter("custnum");
		int custrec=Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("wsnum");
		String item = req.getParameter("description");
		String cost = req.getParameter("cost");
		String keycode = req.getParameter("keycode");
		int wsrec=Integer.parseInt(twsrec);
		Format formatter;	
		Calendar now = Calendar.getInstance();
        	Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Worksheet Item</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveworksheetitem\" name=\"addtime\">");
	out.println("<p>Item        :");
	out.println("<input type=\"text\" name=\"item\" value=\""+item+"\">");
	out.println("</p>");
	out.println("<p>Keycode or Part # :");
	out.println("<input type=\"text\" name=\"keycode\" value=\""+keycode+"\" > ");
	out.println("</p>");
	out.println("<p>Quantity      :");
	out.println("<input type=\"text\" name=\"quantity\">");
	out.println("</p>");
	out.println("<p>Cost      :");
	out.println("<input type=\"text\" name=\"cost\" value=\""+cost+"\">");
	out.println("</p>");
	out.println("<p>Labor Hours      :");
	out.println("<input type=\"text\" name=\"laborhours\">");
	out.println("</p>");
	out.println("<p>Shop Hours      :");
	out.println("<input type=\"text\" name=\"shophours\" value=\"0\">");
	out.println("</p>");
	out.println("<p>Labor Cost      :");
	out.println("<input type=\"text\" name=\"laborcost\" value=\""+doGetLaborCost()+"\">");
	out.println("</p>");
	out.println("<input type=\"hidden\" name=\"wsnum\" value=\""+wsrec+"\">");
	out.println("<input type=\"hidden\" name=\"custnum\" value=\""+custrec+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

  private void doAddInvTrans(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String keycode = req.getParameter("keycode");
		//int itemnum=Integer.parseInt(titemnum);
		String keyprefix = req.getParameter("keyprefix");
		//int catnum=Integer.parseInt(tcatnum);
		Format formatter;	
		Calendar now = Calendar.getInstance();
        	Date date = new Date(); 
		formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Inventory Transaction</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveinvtrans&keyprefix="+keyprefix+" \" name=\"addtime\">");
	out.println("<p>Callslip        :");
	out.println("<input type=\"text\" name=\"callslip\">");
	out.println("</p>");
	out.println("<p>Date         :");
	out.println("<input type=\"text\" name=\"tdate\" value=\""+s+"\" > ");
	out.println("</p>");
	out.println("<p>Quantity      :");
	out.println("<input type=\"text\" name=\"quantity\">");
	out.println("</p>");
	out.println("<p>Notes      :");
	out.println("<input type=\"text\" name=\"notes\">");
	out.println("</p>");
	out.println("<input type=\"hidden\" name=\"keycode\" value=\""+keycode+"\">");
	out.println("<input type=\"hidden\" name=\"keyprefix\" value=\""+keyprefix+"\">");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}


  private void doEditInvTrans(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String ttransnum = req.getParameter("transnum");
		int transnum=Integer.parseInt(ttransnum);
		String keycode = req.getParameter("keycode");
		String keyprefix = req.getParameter("keyprefix");
		Format formatter;	
		Calendar now = Calendar.getInstance();
        	Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");
		String s = formatter.format(date);
		int hour = now.get(Calendar.HOUR_OF_DAY);
        	int second = now.get(Calendar.SECOND);
        	int year = now.get(Calendar.YEAR);
        	int month = now.get(Calendar.MONTH);
        	int minute = now.get(Calendar.MINUTE);
        	int millisecond = now.get(Calendar.MILLISECOND);
               	Vector v;
                v = InvUse.getIndividualItems(con,transnum);

                        String callslip  =null;
                        String quantity=null;
			String tdate=null;
			String notes=null;
			String itemname=null;

                int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                        InvUse t = (InvUse) v.elementAt(i);
                      	transnum = t.getTransnum();
                        callslip = t.getCallslip();
                        tdate = t.getTDate();
                        quantity = t.getQuantity();
                        notes = t.getNotes();
			itemname = t.getItemName();
			keycode = t.getKeyCode();

                }

		out.println("<html>");
		out.println("<head>");
		out.println("<title>Edit Inventory Transaction</title>");
		out.println("</head>");
		out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateinvtrans&keyprefix="+keyprefix+" \" name=\"addtime\">");
		out.println("<tr><td>Callslip        :</td><td>");
		out.println("<input type=\"text\" name=\"callslip\" value=\""+callslip+"\"></td></tr>");
		out.println("<tr><td>Key Code        :</td><td>");
		out.println("<input type=\"text\" name=\"keycode\" value=\""+keycode+"\"></td></tr>");
		out.println("<tr><td>Item Name        :</td><td>");
		out.println("<input type=\"text\" name=\"itemname\" value=\""+itemname+"\"></td></tr>");
		out.println("<tr><td>Date         :</td><td>");
		out.println("<input type=\"text\" name=\"tdate\" value=\""+doFormatDate(getDate(tdate))+"\" > </td></tr>");
		out.println("<tr><td>Quantity      :</td><td>");
		out.println("<input type=\"text\" name=\"quantity\" value=\""+quantity+"\"></td></tr>");
		out.println("<tr><td>Notes      :</td><td>");
		out.println("<input type=\"text\" name=\"notes\" value=\""+notes+"\"></td></tr>");
		out.println("<tr><td>Stock From        :</td>");
		out.println("<td align=\"left\"><select width=\"50\" name=\"invloc\">");
		out.println("<option value=\"TRUCK\">Truck Stock</option>");
		out.println("<option value=\"STOCK\">Stock Room</option>");
		out.println("<option value=\"POORDER\">Purchase Order</option>");
		out.println("</select></td></tr>");
		out.println("<input type=\"hidden\" name=\"keyprefix\" value=\""+keyprefix+"\">");
		out.println("<input type=\"hidden\" name=\"okeycode\" value=\""+keycode+"\">");
		out.println("<input type=\"hidden\" name=\"transnum\" value=\""+transnum+"\">");
		out.println("</table><CENTER>");
		out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Update\">");
		out.println("<INPUT TYPE=\"reset\">");
		out.println("</CENTER>");
		con.close();
	}

//ADMIN FUNCTION
  private void doEditQuoteItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String titemnum = req.getParameter("itemnum");
		int itemnum=Integer.parseInt(titemnum);

                Vector v;
                v = UniQuoteItem.getIndividualItems(con,itemnum);

                        String mannum =null;
			String investment=null;
			String itemname=null;
			int catnum=0;

		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniQuoteItem t = (UniQuoteItem) v.elementAt(i);
			itemnum  = t.getItemNum();
			catnum  = t.getCatNum();
                        itemname = t.getItemName();
			mannum = t.getManNum();
			investment = t.getInvestment();
		}


out.println("<html>");
out.println("<head>");
out.println("<title>Edit Quote Equipment Item</title>");
out.println("</head>");
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatequoteitem \" name=\"addtime\">");
out.println("<p>Item Name        :");
out.println("<input type=\"text\" name=\"itemname\" value=\""+ itemname +"\">");
out.println("</p>");
out.println("<p>Model Number     :");
out.println("<input type=\"text\" name=\"mannum\" value=\""+mannum  +"\"  > ");
out.println("</p>");
out.println("<p>Investment       :");
out.println("<input type=\"text\" name=\"investment\" value=\""+investment +"\">");
out.println("</p>");
out.println("<p>Category Code (Be Careful)       :");
out.println("<input type=\"text\" name=\"catnum\" value=\""+catnum  +"\">");
out.println("</p>");
out.println("<input type=\"hidden\" name=\"itemnum\" value="+itemnum+">");
out.println("<p> <CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
		con.close();
	}


  private void doEditInvItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String ttsid = req.getParameter("itemnum");
		int sitemid=Integer.parseInt(ttsid);

                Vector v;
                v = UniInvItem.getIndividualItems(con,sitemid);

                        String keycode =null;
			String minquantity=null;
			String itemname=null;
			int catnum=0;
			int itemnum=0;

		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniInvItem t = (UniInvItem) v.elementAt(i);
			itemnum  = t.getItemNum();
			catnum  = t.getCatNum();
                        itemname = t.getItemName();
			keycode = t.getKeyCode();
			minquantity = t.getMinQuantity();

		}


out.println("<html>");
out.println("<head>");
out.println("<title>Inventory Item Edit</title>");
out.println("</head>");
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateinvitem \" name=\"addtime\">");
out.println("<p>Item Name        :");
out.println("<input type=\"text\" name=\"itemname\" value=\""+ itemname +"\">");
out.println("</p>");
out.println("<p>Key Code         :");
out.println("<input type=\"text\" name=\"keycode\" value=\""+keycode  +"\"  > ");
out.println("</p>");
out.println("<p>Min Quantity      :");
out.println("<input type=\"text\" name=\"minquantity\" value=\""+minquantity  +"\">");
out.println("</p>");
out.println("<p>Category Code (Be Careful)       :");
out.println("<input type=\"text\" name=\"catnum\" value=\""+catnum  +"\">");
out.println("</p>");
out.println("<input type=\"hidden\" name=\"itemnum\" value="+itemnum+">");
out.println("<p> <CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
		con.close();
	}

  private void doEditTimeEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String ttsid = req.getParameter("tsid");
		int stsid=Integer.parseInt(ttsid);

                Vector v;
                v = UniTimeSheet.getIndividualItems(con,stsid);

                        String  callslip=null;
			String customer=null;
			String time_in=null;
			String time_out=null;
			String dispatch_time=null;
			String item_sold=null;
			String amount=null;
			String amount_collected=null;
			String commision=null;
			String tdate=null;
			String citem_sold=null;
			String camount=null;
			String ctype=null;
			String paytype=null;
			String odostart=null;
			String odostop=null;

		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniTimeSheet t = (UniTimeSheet) v.elementAt(i);
			int tsid  = t.getId();
                        callslip= t.CallSlip();
			customer = t.Customer();
			time_in = t.TimeIn();
			time_out = t.TimeOut();
			dispatch_time = t.DispatchTime();
			item_sold = t.ItemSold();
			amount = t.Amount();
			amount_collected = t.AmountCollected();
			commision = t.Commision();
			tdate = t.TDate();
			citem_sold = t.CItemSold();
			camount = t.CAmount();
			ctype=t.CType();
			paytype=t.TPayType();
			odostart=t.OdoStart();
			odostop=t.OdoStop();
		}


out.println("<html>");
out.println("<head>");
out.println("<title>Time Sheet Edit</title>");
out.println("</head>");
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatetimeentry \" name=\"addtime\">");
out.println("<table>");
out.println("<tr><td>Date            :</td>");
out.println("<td><input type=\"text\" name=\"listdate\" value=\""+ doFormatDate(getDate(tdate)) +"\">");
out.println("</tr>");
out.println("<tr><td>Call Slip        :</td>");
out.println("<td><input type=\"text\" name=\"callslip\" value=\""+callslip  +"\"  > ");
out.println("</tr>");
out.println("<tr><td>Customer         :</td>");
out.println("<td><input type=\"text\" name=\"customer\" value=\""+customer  +"\">");
out.println("</tr>");
out.println("<tr><td>Dispatched       :</td>");
out.println("<td><input type=\"text\" name=\"dispatch_time\" value=\""+dispatch_time  +"\">");
out.println("</tr>");
out.println("<tr><td>Time In          :</td>");
out.println("<td><input type=\"text\" name=\"time_in\" value=\""+time_in  +"\">");
out.println("</tr>");
out.println("<tr><td>Time Out         :</td>");
out.println("<td><input type=\"text\" name=\"time_out\" value=\""+time_out +"\">");
out.println("</tr>");
out.println("<tr><td>Non-Commission Item Sold         :</td>");
out.println("<td><input type=\"text\" name=\"isold\" value=\""+item_sold  +"\">");
out.println("</tr>");
out.println("<tr><td>Non-Commission Amount Sold        :</td>");
out.println("<td><input type=\"text\" name=\"asold\" value=\""+amount  +"\">");
out.println("</tr>");
out.println("<tr><td>Commission Item Sold         :</td>");
out.println("<td><input type=\"text\" name=\"cisold\" value=\""+citem_sold  +"\">");
out.println("</tr>");
out.println("<tr><td>Commission Amount Sold        :</td>");
out.println("<td><input type=\"text\" name=\"casold\" value=\""+camount  +"\">");
out.println("</tr>");
out.println("<tr><td>Amount Collected   :</td>");
out.println("<td><input type=\"text\" name=\"collected\" value=\""+amount_collected  +"\">");
out.println("</tr>");
out.println("<tr><td>How Paid   :</td>");
out.println("<td align=\"left\"><select width=\"50\" name=\"paytype\">");
                Vector vp = SupPaytype.getAllItems(con);
		out.println("<option value=\""+paytype+"\">"+paytype+"</option>");
		out.println("<option value=\"-\">-</option>");
                for (int i = 0 ; i < vp.size(); i++)
                {
                SupPaytype t = (SupPaytype) vp.elementAt(i);
		out.println("<option value="+t.getAnswer()+">"+t.getAnswer()+"</option>");
		}
		out.println("</select></td></tr>");
out.println("<tr><td>Commision        :</td>");
out.println("<td><input type=\"text\" name=\"commision\" value=\""+ commision +"\"></td></tr>");
out.println("<tr><td>Call Type        :</td>");
out.println("<td><input type=\"text\" name=\"ctype\" value=\""+ctype  +"\">");
out.println("<tr><td>Call Type        :</td>");
out.println("<td align=\"left\"><select width=\"50\" name=\"ctype\">");
                Vector vtc = TimeCat.getAllItems(con);
		out.println("<option value=\""+ctype+"\">-</option>");
                for (int it = 0 ; it < vtc.size(); it++)
                {
                TimeCat tc = (TimeCat) vtc.elementAt(it);
		out.println("<option value="+tc.Code()+">"+tc.Code()+" - "+tc.Category()+"</option>");
		}
		out.println("</select></td></tr>");
out.println("<tr><td>Odometer Start        :</td>");
out.println("<td><input type=\"text\" name=\"odostart\" value=\""+ odostart +"\"></td></tr>");
out.println("<tr><td>Odometer Stop        :</td>");
out.println("<td><input type=\"text\" name=\"odostop\" value=\""+odostop  +"\">");
		out.println("</table>");
out.println("<input type=\"hidden\" name=\"timeadd\" value=1>");   
out.println("<input type=\"hidden\" name=\"tsid\" value="+ttsid+">");
out.println("<p> <CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
		con.close();

	}

  private void doAddTimeEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

String timesheetdate = req.getParameter("listdate");
out.println("<html>");
out.println("<head>");
out.println("<title>Time Sheet Entry</title>");
out.println("</head>");
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savetimeentry \" name=\"addtime\">");
out.println("<table><tr><td>");
out.println("<table>");
out.println("<tr><td>Date</td>");
out.println("<td><input type=\"text\" name=\"listdate\" value=\""+timesheetdate+"\"></td></tr>");
out.println("<tr><td>Call Slip        :</td>");
out.println("<td><input type=\"text\" name=\"callslip\"></td></tr>");
out.println("<tr><td>Customer         :</td>");
out.println("<td><input type=\"text\" name=\"customer\"></td></tr>");
out.println("<tr><td>Dispatched       :</td>");
out.println("<td><input type=\"text\" name=\"dispatch_time\"></td></tr>");
out.println("<tr><td>Time In          :</td>");
out.println("<td><input type=\"text\" name=\"time_in\"></td></tr>");
out.println("<tr><td>Time Out         :</td>");
out.println("<td><input type=\"text\" name=\"time_out\"></td></tr>");
out.println("<tr><td>Non-Commission Item Sold         :</td>");
out.println("<td><input type=\"text\" name=\"isold\"></td></tr>");
out.println("<tr><td>Non-Commission Amount Sold        :</td>");
out.println("<td><input type=\"text\" name=\"asold\" value=\"0\"></td></tr>");
out.println("<tr><td>Commission Item Sold         :</td>");
out.println("<td><input type=\"text\" name=\"cisold\"></td></tr>");
out.println("<tr><td>Commission Amount Sold        :</td>");
out.println("<td><input type=\"text\" name=\"casold\" value=\"0\"></td></tr>");
out.println("<tr><td>Amount Collected   :</td>");
out.println("<td><input type=\"text\" name=\"collected\" value=\"0\"></td></tr>");
out.println("<tr><td>How Paid   :</td>");
out.println("<td align=\"left\"><select width=\"50\" name=\"paytype\">");
                Vector vp = SupPaytype.getAllItems(con);
		out.println("<option value=\"-\">-</option>");
                for (int i = 0 ; i < vp.size(); i++)
                {
                SupPaytype t = (SupPaytype) vp.elementAt(i);
		out.println("<option value="+t.getAnswer()+">"+t.getAnswer()+"</option>");
		}
		out.println("</select></td></tr>");
out.println("<tr><td>Commision        :</td>");
out.println("<td><input type=\"text\" name=\"commision\" value=\"0\"></td></tr>");
out.println("<tr><td>Call Type        :</td>");
out.println("<td align=\"left\"><select width=\"50\" name=\"ctype\">");
                Vector vtc = TimeCat.getAllItems(con);
		out.println("<option value=\"-\">-</option>");
                for (int it = 0 ; it < vtc.size(); it++)
                {
                TimeCat tc = (TimeCat) vtc.elementAt(it);
		out.println("<option value="+tc.Code()+">"+tc.Code()+" - "+tc.Category()+"</option>");
		}
		out.println("</select></td></tr>");
out.println("<tr><td>Odometer Start        :</td>");
out.println("<td><input type=\"text\" name=\"odostart\" value=\"0\"></td></tr>");
out.println("<tr><td>Odometer Stop        :</td>");
out.println("<td><input type=\"text\" name=\"odostop\" value=\"0\">");
out.println("<input type=\"hidden\" name=\"timeadd\" value=1>");
out.println("</table></td>");
out.println("<td><table>");
out.println("</table></td></tr></table>");
out.println("<p> <CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
		con.close();
	}


private void doAddAdminTimeEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

String timesheetdate = req.getParameter("listdate");
out.println("<html>");
out.println("<head>");
out.println("<title>Time Sheet Entry</title>");
out.println("</head>");
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveadmintimeentry \" name=\"addtime\">");
out.println("<table><tr><td>");
out.println("<table>");
out.println("<tr><td>Tech ID (Lowercase<br> exactly how they log in)</td>");
out.println("<td><input type=\"text\" name=\"techid\"></td></tr>");
out.println("<tr><td>Date</td>");
out.println("<td><input type=\"text\" name=\"listdate\" value=\""+timesheetdate+"\"></td></tr>");
out.println("<tr><td>Call Slip        :</td>");
out.println("<td><input type=\"text\" name=\"callslip\"></td></tr>");
out.println("<tr><td>Call Count         :</td>");
out.println("<td><input type=\"text\" name=\"callcount\"></td></tr>");
out.println("<tr><td>Customer         :</td>");
out.println("<td><input type=\"text\" name=\"customer\"></td></tr>");
out.println("<tr><td>Dispatched       :</td>");
out.println("<td><input type=\"text\" value=\"00:00\" name=\"dispatch_time\"></td></tr>");
out.println("<tr><td>Time In          :</td>");
out.println("<td><input type=\"text\" value=\"00:00\"  name=\"time_in\"></td></tr>");
out.println("<tr><td>Time Out         :</td>");
out.println("<td><input type=\"text\" value=\"00:00\" name=\"time_out\"></td></tr>");
out.println("<tr><td>Non-Commission Item Sold         :</td>");
out.println("<td><input type=\"text\" name=\"isold\"></td></tr>");
out.println("<tr><td>Non-Commission Amount Sold        :</td>");
out.println("<td><input type=\"text\" name=\"asold\" value=\"0\"></td></tr>");
out.println("<tr><td>Commission Item Sold         :</td>");
out.println("<td><input type=\"text\" name=\"cisold\"></td></tr>");
out.println("<tr><td>Commission Amount Sold        :</td>");
out.println("<td><input type=\"text\" name=\"casold\" value=\"0\"></td></tr>");
out.println("<tr><td>Amount Collected   :</td>");
out.println("<td><input type=\"text\" name=\"collected\" value=\"0\"></td></tr>");
out.println("<tr><td>How Paid   :</td>");
out.println("<td align=\"left\"><select width=\"50\" name=\"paytype\">");
                Vector vp = SupPaytype.getAllItems(con);
		out.println("<option value=\"-\">-</option>");
                for (int i = 0 ; i < vp.size(); i++)
                {
                SupPaytype t = (SupPaytype) vp.elementAt(i);
		out.println("<option value="+t.getAnswer()+">"+t.getAnswer()+"</option>");
		}
		out.println("</select></td></tr>");
out.println("<tr><td>Commision        :</td>");
out.println("<td><input type=\"text\" name=\"commision\" value=\"0\"></td></tr>");
out.println("<tr><td>Call Type        :</td>");
out.println("<td align=\"left\"><select width=\"50\" name=\"ctype\">");
             //   Vector vtc = TimeCat.getAllItems(con);
		out.println("<option value=\"-\">-</option>");
              //  for (int it = 0 ; it < vtc.size(); it++)
              //  {
              //  TimeCat tc = (TimeCat) vtc.elementAt(it);
		out.println("<option value=\"NLRUN\"> NLRUN - New Lead Run Count</option>");
		out.println("<option value=\"NLSNORUN\"> NLSNORUN - New Lead Not Run Count</option>");
		out.println("<option value=\"PMRRUN\"> PMRRUN  - Preventative Renewal Run</option>");
		out.println("<option value=\"PMNRRUN\"> PMNRRUN - Preventative No Renewal Run</option>");
		out.println("<option value=\"SLPGRUN\"> SLPGRUN - Sales Lead Proposal Given Run</option>");
		out.println("<option value=\"PMNRNORUN\"> PMNRNORUN - Preventative Not Renewal Not Run</option>");
		out.println("<option value=\"PMRNORUN\"> PMRNORUN - Preventative Renewal Not Run</option>");
		//out.println("<option value=\"\"> - </option>");
		//out.println("<option value=\"\"> - </option>");
		//}
		out.println("</select></td></tr>");
		
out.println("<input type=\"hidden\" name=\"timeadd\" value=1>");
out.println("</table></td>");
out.println("<td><table>");
 /*               Vector v;
                v = TimeCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	TimeCat t = (TimeCat) v.elementAt(i);
                      	int catnum = t.getCatnum();
                        String category = t.Category();
			String code = t.Code();
                        out.println("<tr><td>"+code+"</td><td>"+category+"</td></tr>");
                }
		*/
out.println("</table></td></tr></table>");
out.println("<p> <CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
		con.close();
	}

	
	private void doUpdatePackageItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String trecid = req.getParameter("recid");
		int recid = Integer.parseInt(trecid);

                String adjper = req.getParameter("adjper");
                String tpkgpartscost = req.getParameter("pkgpartscost");
		double pkgpartscost = Double.parseDouble(tpkgpartscost);

                String startpage = req.getParameter("startpage");
                String pkgid = req.getParameter("pkgid");
                String pkgdesc = req.getParameter("pkgdesc");

                String tcatid = req.getParameter("catid");
		int catid = Integer.parseInt(tcatid);

                String tlaborhours = req.getParameter("laborhours");
		int laborhours = Integer.parseInt(tlaborhours);

                UniPkgItems.UpdateItem(con, recid, catid, pkgid, pkgdesc, laborhours, pkgpartscost);
                out.println("Your item has been updated in the database<br>");
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showpackageitems&catnum="+tcatid+"&adjper="+adjper+"");
            }

private void doUpdateTimeEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String tsid = req.getParameter("tsid");
                String listdate = req.getParameter("listdate");
                String callslip = req.getParameter("callslip");
                String customer = req.getParameter("customer");
                String dispatch_time = req.getParameter("dispatch_time");
                String time_in = req.getParameter("time_in");
                String time_out = req.getParameter("time_out");
                String isold = req.getParameter("isold");
                String asold = req.getParameter("asold");
                String collected = req.getParameter("collected");
                String commision = req.getParameter("commision");
                String cisold = req.getParameter("cisold");
                String casold = req.getParameter("casold");
                String ctype = req.getParameter("ctype");
                String paytype = req.getParameter("paytype");
		String odostart=req.getParameter("odostart");
		String odostop=req.getParameter("odostop");
        if (callslip == null || callslip.length() < 1)
                    {
                    out.println("Callslip field blank please use back key and try again");
                    return;
                     } else {
                UniTimeSheet.UpdateItem(con, tsid, doFormatDateDb(getDateDb(listdate)), callslip, customer, dispatch_time, time_in, time_out, isold, asold, collected, commision, cisold, casold, ctype, username, paytype, odostart, odostop);
                out.println("Your item has been updated in the database<br>");
		//doShowTimeSheet(req, res, out, session, username);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showtimesheet&listdate="+listdate+"");
			}
            }
	    
private void doSaveAdminTimeEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String listdate = req.getParameter("listdate");
                String callslip = req.getParameter("callslip");
                String customer = req.getParameter("customer");
                String dispatch_time = req.getParameter("dispatch_time");
                String time_in = req.getParameter("time_in");
                String time_out = req.getParameter("time_out");
                String isold = req.getParameter("isold");
                String asold = req.getParameter("asold");
                String collected = req.getParameter("collected");
                String commision = req.getParameter("commision");
                String cisold = req.getParameter("cisold");
                String casold = req.getParameter("casold");
                String ctype = req.getParameter("ctype");
                String paytype = req.getParameter("paytype");
		String callcount = req.getParameter("callcount");
		String techid=req.getParameter("techid");
		String odostart=req.getParameter("odostart");
		String odostop=req.getParameter("odostop");
        if (callslip == null || callslip.length() < 1)
                    {
                    out.println("Callslip field blank please use back key and try again");
                    return;
                     } else {
                UniTimeSheet.addAdminTimeSheetItem(con, doFormatDateDb(getDateDb(listdate)), callslip, customer, dispatch_time, time_in, time_out, isold, asold, collected, commision, cisold, casold, ctype, techid, paytype, callcount, odostart, odostop);
                out.println("Your item has been added to the database<br>");
		
		//res.sendRedirect(""+classdir+"UniCash?action=showtimesheet");
		res.sendRedirect(""+classdir+"UniCash?action=addmanualtime");
		con.close();
	//	doShowTimeSheet(req, res, out, session, username);
			}
            }


private void doSaveTimeEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String listdate = req.getParameter("listdate");
                String callslip = req.getParameter("callslip");
                String customer = req.getParameter("customer");
                String dispatch_time = req.getParameter("dispatch_time");
                String time_in = req.getParameter("time_in");
                String time_out = req.getParameter("time_out");
                String isold = req.getParameter("isold");
                String asold = req.getParameter("asold");
                String collected = req.getParameter("collected");
                String commision = req.getParameter("commision");
                String cisold = req.getParameter("cisold");
                String casold = req.getParameter("casold");
                String ctype = req.getParameter("ctype");
                String paytype = req.getParameter("paytype");
		String odostart=req.getParameter("odostart");
		String odostop=req.getParameter("odostop");
        if (callslip == null || callslip.length() < 1)
                    {
                    out.println("Callslip field blank please use back key and try again");
                    return;
                     } else {
                UniTimeSheet.addTimeSheetItem(con, doFormatDateDb(getDateDb(listdate)), callslip, customer, dispatch_time, time_in, time_out, isold, asold, collected, commision, cisold, casold, ctype, username, paytype, odostart, odostop);
                out.println("Your item has been added to the database<br>");
		
		//res.sendRedirect(""+classdir+"UniCash?action=showtimesheet");
		res.sendRedirect(""+classdir+"UniCash?action=showtimesheet&listdate="+listdate+"");
		con.close();
	//	doShowTimeSheet(req, res, out, session, username);
			}
            }

private void doSaveInvTransEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String callslip = req.getParameter("callslip");
                String quantity = req.getParameter("quantity");
                String keycode = req.getParameter("keycode");
                String keyprefix = req.getParameter("keyprefix");
                String tdate = req.getParameter("tdate");
                String notes = req.getParameter("notes");
		String invloc=req.getParameter("invloc");
		String description="-";
               Vector v;
                v = InvKeyCodes.getSingleKeyCode(con, keycode);
                for (int i = 0 ; i < v.size(); i++)
                {
                InvKeyCodes t = (InvKeyCodes) v.elementAt(i);
                description=t.getDescription();
		}
		username=(String)session.getAttribute("login");
		InvUse.addInvTrans(con, callslip, doFormatDateDb(getDateDb(tdate)), quantity, keycode, description, notes, username, 0, invloc);
                //UniInvDetail.addInvTrans(con, callslip, itemnum, doFormatDateDb(getDateDb(tdate)), notes, quantity);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showinvdetail&keycode="+keycode+"&keyprefix="+keyprefix+"");
            }


private void doUpdateWsItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String titemrec = req.getParameter("itemrec");
		int itemrec = Integer.parseInt(titemrec);
                String tcustnum = req.getParameter("custnum");
		int custnum = Integer.parseInt(tcustnum);
                String wsnum = req.getParameter("wsnum");
		int wsrec = Integer.parseInt(wsnum);
                String item  = req.getParameter("item");
                String keycode = req.getParameter("keycode");
                String tquantity = req.getParameter("quantity");
		int quantity = Integer.parseInt(tquantity);
                String cost = req.getParameter("cost");
                String subcost = req.getParameter("subcost");
                String tlaborhours = req.getParameter("laborhours");
		int laborhours = Integer.parseInt(tlaborhours);
                String tshophours = req.getParameter("shophours");
		int shophours = Integer.parseInt(tshophours);
                String laborcost = req.getParameter("laborcost");

                UniWsItems.UpdateItem(con, itemrec, wsrec, item, keycode, quantity, cost, laborhours, laborcost, shophours, subcost);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=editws&wsnum="+wsnum+"&custnum="+custnum+"");
            }

private void doSaveWsItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String tcustnum = req.getParameter("custnum");
		int custnum = Integer.parseInt(tcustnum);
                String wsnum = req.getParameter("wsnum");
		int wsrec = Integer.parseInt(wsnum);
                String item  = req.getParameter("item");
                String keycode = req.getParameter("keycode");
                String tquantity = req.getParameter("quantity");
		int quantity = Integer.parseInt(tquantity);
                String cost = req.getParameter("cost");
                String subcost = req.getParameter("subcost");
                String tlaborhours = req.getParameter("laborhours");
		int laborhours = Integer.parseInt(tlaborhours);
                String tshophours = req.getParameter("shophours");
		int shophours = Integer.parseInt(tshophours);
                String laborcost = req.getParameter("laborcost");
                String adjper = req.getParameter("adjper");
		BigDecimal d = new BigDecimal(cost);
		d = d.setScale(2, BigDecimal.ROUND_HALF_UP);
		String cost2 = d.toString();
                UniWsItems.AddItem(con, wsrec, item, keycode, quantity, cost2, laborhours, laborcost, shophours, subcost);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=editws&wsnum="+wsnum+"&custnum="+custnum+"&adjper="+adjper+"");
            }

private void doUpdateInvTrans(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String ttransnum = req.getParameter("transnum");
		int transnum = Integer.parseInt(ttransnum);
                String callslip = req.getParameter("callslip");
                String quantity = req.getParameter("quantity");
                String titemnum = req.getParameter("itemnum");
                String itemname = req.getParameter("itemname");
                String tcatnum = req.getParameter("catnum");
		String keycode = req.getParameter("keycode");
		String okeycode=req.getParameter("okeycode");
		String keyprefix=req.getParameter("keyprefix");
                String tdate = req.getParameter("tdate");
                String notes = req.getParameter("notes");
		String invloc = req.getParameter("invloc");
                InvUse.UpdateItem(con, transnum, callslip, notes, quantity, keycode, itemname, invloc);
                out.println("Your item has been added to the database<br>");
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showinvdetail&keycode="+keycode+"&keyprefix="+keyprefix);
            }

private void doSaveCustomerEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String custstart = req.getParameter("custstart");
                String custstop = req.getParameter("custstop");
                String cname = req.getParameter("cname");
                String address1 = req.getParameter("address1");
                String address2 = req.getParameter("address2");
                String city = req.getParameter("city");
                String custtype = req.getParameter("custtype");
		String reqsource=req.getParameter("reqsource");
		
		if (reqsource==null) 
		{
			reqsource="UniCash";
		}
                String state = req.getParameter("state");
                String zip = req.getParameter("zip");
                String homephone = req.getParameter("homephone");
                String altphone = req.getParameter("altphone");
                String cust_notes = req.getParameter("cust_notes");
                String cemail = req.getParameter("cemail");
                String custsite = req.getParameter("custsite");
                String sitenum = req.getParameter("sitenum");
				
				if ((custsite.length()<=3)||(sitenum.length()<=2))
				{
					out.println("You must click the back key and fill in the site number and the customer number<br>.");
					out.println("The data can not be saved without it.<br><br>If you do not have this information please call the office.<br>");
				} else 
				{
                UniCustomer.addCustomer(con, cname, address1, address2, city, state, zip, homephone, altphone, cust_notes,cemail,custsite,sitenum,custtype);
                out.println("Your item has been added to the database");
		con.close();
		res.sendRedirect(""+classdir+""+reqsource+"?action=listcustomers&custstart="+custstart+"&custstop="+custstop);
				}
            }


//Format Date to MySql Form

public static String doFormatDateDb(Date visited)
		throws Exception
		{
	Date tdate;
	Format formatter;	
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String newdate = formatter.format(visited);
	return newdate;
		}

      public static Date getDateDb( String token ) {
              Date visited; 
              SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy"); 
              ParsePosition pos;
              try {                            
                      pos = new ParsePosition(0);
                      visited = sdf.parse(token,pos);
              } catch (NullPointerException pe) {
                      System.out.println("Cannot parse visited date! " + token ); 
                      pos = new ParsePosition(0);
                      visited = sdf.parse("16/06/97", pos);
              }
	return visited;
      }

//Format date to human form

public static String doFormatDate(Date visited)
		throws Exception
		{
	Date tdate;
	Format formatter;	
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String newdate = formatter.format(visited);
	return newdate;
		}


public int doFormatDateComp(Date visited)
		throws Exception
		{
	Date tdate;
	Format formatter;	
	formatter = new SimpleDateFormat("yyyyMMdd");
	String newdate = formatter.format(visited);
	int inewdate=Integer.parseInt(newdate);
	return inewdate;
		}

public static Date getDate( String token ) {
              Date visited; 
              SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
              ParsePosition pos;
              try {                            
                      pos = new ParsePosition(0);
                      visited = sdf.parse(token,pos);
              } catch (NullPointerException pe) {
                      System.out.println("Cannot parse visited date! " + token ); 
                      pos = new ParsePosition(0);
                      visited = sdf.parse("16/06/97", pos);
              }
	return visited;
      }



  private void doSearchCustCity(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Search Customer by City</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=listcustomerscity\" name=\"addcat\">");
	out.println("<p>City:	");
	out.println("<input type=\"city\" name=\"listcity\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");	
		con.close();
	}

  private void doSearchCustNum(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Search Customer by Number</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=listcustomerscustnum\" name=\"addcat\">");
	out.println("<p>Customer Number:	");
	out.println("<input type=\"text\" name=\"listcustnum\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}


  private void doSearchCustAddress(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Search Customer by Address</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=listcustomersaddress\" name=\"addcat\">");
	out.println("<p>Street:	");
	out.println("<input type=\"city\" name=\"listcity\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

private void doSelectTimeDate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
throws Exception
{
	Format formatter;	
	Calendar now = Calendar.getInstance();
	Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
	int second = now.get(Calendar.SECOND);
	int year = now.get(Calendar.YEAR);
	int month = now.get(Calendar.MONTH);
	int minute = now.get(Calendar.MINUTE);
	int millisecond = now.get(Calendar.MILLISECOND);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select Date</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=showtimesheet\" name=\"addcat\">");
	out.println("<p>Time Sheet Date :");
	out.println("<input type=\"date\" name=\"listdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	con.close();
}


  private void doSelectTimeReportsDate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select Date Span</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=sendweeklytimereport\" name=\"addcat\">");
	out.println("<p>Time Start Date :");
	out.println("<input type=\"date\" name=\"startlistdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<p>Time End Date :");
	out.println("<input type=\"date\" name=\"endlistdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

  private void doSelectTimeReportDate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select Date</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=senddailytimereport\" name=\"addcat\">");
	out.println("<p>Time Sheet Date :");
	out.println("<input type=\"date\" name=\"listdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

  private void doSelectSendDate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	//String dupdated=doGetFrUpdateDate();
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select Date</title>");
	out.println("<h3>YOU MUST HAVE AN ACTIVE INTERNET OR NETWORK CONNECT PRIOR TO GOING FURTHER</h3><br>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=sendall\" name=\"addcat\">");
	out.println("<h4>This button sends all daily reports - do not use if you transmit calls as you go.</h4>");
	out.println("<p>Date :");
	out.println("<input type=\"date\" name=\"listdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Transmit All\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>"); 
	out.println("</form><br><hr noshade size=1 width=100% color=cccccc>");        
            
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=senddailytime\" name=\"addcat\">");
	out.println("<h4>If you are on Wireless Card (Service Department) Use this button</h4>");
	out.println("<p>Time Sheet Date :");
	out.println("<input type=\"date\" name=\"listdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Transmit\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>"); 
	out.println("</form>");        
            

	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=sendinspections\" name=\"addcat\">");
	out.println("<p>Transmit Inspections for Date :");
	out.println("<input type=\"date\" name=\"listdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Transmit\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>"); 
	out.println("</form>");        
            
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=sendcallslips\" name=\"addcat\">");
	out.println("<p>Transmit Services for Date :");
	out.println("<input type=\"date\" name=\"listdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Transmit\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>"); 
	out.println("</form>");        
          
            
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=senddailycheckme\" name=\"addcat\">");
	out.println("<p>Transmit CheckMe's for Date :");
	out.println("<input type=\"date\" name=\"listdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Transmit\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>"); 
	out.println("</form>");        
            
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=sendproposals\" name=\"addcat\">");
	out.println("<p>Transmit Proposals for Date :");
	out.println("<input type=\"date\" name=\"listdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Transmit\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>"); 
	out.println("</form>");        
          
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=sendworksheets\" name=\"addcat\">");
	out.println("<p>Transmit Worksheets for Date :");
	out.println("<input type=\"date\" name=\"qdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Transmit\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>"); 
	out.println("</form>");        

	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=sendstockrequest\" name=\"addcat\">");
	out.println("<p>Transmit Stock Request:");
	out.println("<input type=\"date\" name=\"listdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Transmit\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>"); 
	out.println("</form>");        
            
	out.println("<br></html>");
		con.close();
            
	}

  private void doSendSingleInspections(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
            String mbody = "";
            String tcrecnum = req.getParameter("csrec");
	    int callslip = Integer.parseInt(tcrecnum);
            String tcustnum = req.getParameter("custnum");
	    int custnum = Integer.parseInt(tcustnum);
	    mbody=ServsysPrintInspection.mailIndividualItem (con, req,res, out, session, username, classdir, callslip, custnum);
	    out.println(mbody);
	}

  private void doSendInspections(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {

/////////////////////////////////////////////////////////
// Here is where we get all the inspections for the day
////////////////////////////////////////////////////////
		String listdate=req.getParameter("listdate");
                Vector v;
		int custnum;
		int crecnum;
		int callslip;
                v = UniInspection.getAllDateItems(con,doFormatDateDb(getDateDb(listdate)));

                for (int i = 0 ; i < v.size(); i++)
                {
			String mbody="";
                       	UniInspection t = (UniInspection) v.elementAt(i);
			callslip=t.getCrecnum();
			custnum=t.getCustnum();
			mbody=ServsysPrintInspection.mailIndividualItem (con, req,res, out, session, username, classdir, callslip, custnum);
			out.println(mbody);
		}		
		con.close();
	}

private void doExportCallSlips(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
         int eenum=0;
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
        int ecustnum=0;
	int custnum=0;
        String brand=null;
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
        String enotes=null;
	String callslip=null;
	String cdate=null;
	int equip1=0;
	int equip2=0;
	int equip3=0;
	int equip4=0;
	String reason=null;
	String services=null;
	String recommendations=null;
	String rscheduled=null;
	String charges=null;
	String collected=null;
	int followup=0;
	String descript;
	String ccallslip;
	double quant;
	double price;
	double total;
	double totalcharge=0.00;
	int recnum;
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String etype="";
	String sitenum="";
	String custsite="";
            String mbody = "<xml>\n";
            String listdate = req.getParameter("listdate");

		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);

                Vector v;
                v = UniCallslip.getAllDateItems(con,doFormatDateDb(getDateDb(listdate)));

                for (int i = 0 ; i < v.size(); i++)
				{
                       	UniCallslip t = (UniCallslip) v.elementAt(i);

		custnum=t.getCustnum();
		callslip=t.getCallslip();
		cdate=t.getCdate();
		equip1=t.getEquip1();
		equip2=t.getEquip2();
		equip3=t.getEquip3();
		equip4=t.getEquip4();
		reason=t.getReason();
		services=t.getServices();
		recommendations=t.getRecommendations();
		rscheduled=t.getRscheduled();
		charges=t.getCharges();
		collected=t.getCollected();
		notes=t.getNotes();
		followup=t.getFollowup();

		Statement stmt = con.createStatement();
        	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
                 while(rs.next())
                {
        	cname=rs.getString("cname");
       		address1=rs.getString("address1");
               address2=rs.getString("address2");
                city =rs.getString("city");
                state=rs.getString("state");
                zip=rs.getString("zip");
                custsite=rs.getString("custsite");
                sitenum=rs.getString("sitenum");
        	}

	mbody=combinestring(mbody,"");
	mbody=combinestring(mbody,"<callslip>\n<number>"+callslip+"</number>\n");
	mbody=combinestring(mbody,"<customer_info>\n");
	mbody=combinestring(mbody,"<customer_number>"+custsite+"</customer_number>\n");
	mbody=combinestring(mbody,"<customer_site>"+sitenum+"</customer_site>\n");
	mbody=combinestring(mbody,"<customer_name>"+cname+"</customer_name>\n");
	mbody=combinestring(mbody,"<address1>"+address1+"</address1>\n");
	mbody=combinestring(mbody,"<city>"+city+"</city>\n");
	mbody=combinestring(mbody,"<state>"+state+"</state>\n");
	mbody=combinestring(mbody,"<zip>"+zip+"</zip>\n</customer_info>\n");

 	stmt = con.createStatement();
	rs = stmt.executeQuery("SELECT * FROM  equipment where enum='"+equip1+"' or enum='"+equip2+"'  or enum='"+equip3+"' or enum='"+equip4+"';");
	mbody=combinestring(mbody,"<equipment_section>\n");
	mbody=combinestring(mbody,"");

		 while(rs.next())
                {
		brand = rs.getString("brand");
                modelnum = rs.getString("modelnum");
                serialnum = rs.getString("serialnum");
                filter = rs.getString("filter");
                enotes = rs.getString("notes");
		etype = rs.getString("etype");
if (etype==null) { 
                etype = "-";
                }
	mbody=combinestring(mbody,"<equipment_item>\n<e_type>"+etype+"</e_type>\n<e_brand>"+brand+"</e_brand>\n<e_modelnum>"+modelnum+"</e_modelnum>\n<e_serial>"+serialnum+"</e_serial>\n<e_filter>"+filter+"</e_filter>\n<e_notes>"+enotes+"</e_notes>\n</equipment_item>\n");
	}

	mbody=combinestring(mbody,"</equipment_section>\n");

		mbody=combinestring(mbody,"<inventory_section>\n");
Vector ci;
ci = InvUse.getAllCallslipItems(con, callslip, cdate);
for (int cc = 0 ; cc < ci.size(); cc++)
{
	InvUse ti = (InvUse) ci.elementAt(cc);
	String keycode = ti.getKeyCode();
	String itemname = ti.getItemName();
	String pquant = ti.getQuantity();
	String idate = doFormatDate(getDate(ti.getTDate()));
			mbody=combinestring(mbody,"<inventory_item>\n<ikeycode>"+keycode+"</ikeycode>\n<iname>\n"+itemname+"\n</iname>\n<iquant>"+pquant+"</iquant>\n<idate>"+doFormatDate(getDate(idate))+"</idate>\n</inventory_item>\n");
			}
	mbody=combinestring(mbody,"</inventory_section>\n");

        Vector r = UniSvcCompl.getAllItems(con,callslip);
	if ((r.size()>0) )
		{
        mbody=combinestring(mbody,"<completion_section>\n");
		
                for (int g = 0 ; g < r.size(); g++)
                {
                UniSvcCompl c = (UniSvcCompl) r.elementAt(i);
		int corecnum=c.getRecnum();
		int codenum=c.getCodeNum();
		String complcode=c.getComplCode();
		String compltext=c.getComplText();
		mbody=combinestring(mbody,"<completion>\n<completion_code>"+complcode+"</completion_code>\n<completion_text>"+compltext+"</completion_text>\n</completion>\n");
		}
        mbody=combinestring(mbody,"</completion_section>\n");
		}
		
	if (services.length()>1) {
	mbody=combinestring(mbody,"<services>\n");
	
	int begin=1;
	int end=0;
	int stringlength= services.length();
	while (begin <= stringlength)
		{
	if ((stringlength-(begin+52)<0)) {
		end=begin+(stringlength-begin);
	} else {	
		end=begin+52;
	}
	mbody=combinestring(mbody,"<serviceline>"+services.substring(begin-1,end)+"</serviceline>\n");
	begin=end+1;
		}
		
	mbody=combinestring(mbody,"\n</services>\n");
	}

	if (recommendations.length()>1) {
	mbody=combinestring(mbody,"<recommendations>\n"+recommendations+"\n</recommendations>\n");
	}

	if (notes.length()>1) {
	mbody=combinestring(mbody,"<notes>\n"+notes+"\n</notes>\n");
	}

	mbody=combinestring(mbody,"<charges>\n");
        Vector u;
	int frcode=0;
        u = UniSvcCharges.getAllItems(con,callslip);
		
                for (int h = 0 ; h < u.size(); h++)
                {
                UniSvcCharges q = (UniSvcCharges) u.elementAt(h);
		recnum=q.getRecnum();
		frcode=q.getFrcode();
		callslip=q.getCallslip();
		quant=q.getQuant();
		descript=q.getDescript();
		price=q.getPrice();
		total=q.getTotal();
		totalcharge=totalcharge+total;
                mbody=combinestring(mbody,"<charge_item>\n<code>\n"+frcode+"\n</code>\n<quantity>\n"+quant+"\n</quantity>\n<service>\n"+descript+"\n</service>\n<price>\n"+NumberFormat.getCurrencyInstance().format(price)+"\n</price><extended_sub>\n"+NumberFormat.getCurrencyInstance().format(total)+"\n</extended_sub>\n</charge_item>\n");
		}
	mbody=combinestring(mbody,"</charges>\n");
	mbody=combinestring(mbody,"</callslip>\n");
		}
		out.println(""+mbody+"\n</xml>\n");
		con.close();
	}

private void doSendCallSlips(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
         int eenum=0;
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
        int ecustnum=0;
	int custnum=0;
	String custsite=null;
	String sitenum=null;
        String brand=null;
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
        String enotes=null;
	String callslip=null;
	String cdate=null;
	int equip1=0;
	int equip2=0;
	int equip3=0;
	int equip4=0;
	String reason=null;
	String services=null;
	String recommendations=null;
	String rscheduled=null;
	String charges=null;
	String collected=null;
	String parts=null;
	int followup=0;
	String descript;
	String ccallslip;
	double quant;
	double price;
	double total;
	double totalcharge=0.00;
	int recnum;
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String etype="";
            String mbody = "";
	    String pmbody = "";
            String listdate = req.getParameter("listdate");

		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);

/////////////////////////////////////////////////////////
// Here is where we start the http headers
////////////////////////////////////////////////////////
	out.println("<html>");
	
/////////////////////////////////////////////////////////
// Here is where we get all the Callslips  for the day
////////////////////////////////////////////////////////

                Vector v;
                v = UniCallslip.getAllDateItems(con,doFormatDateDb(getDateDb(listdate)));
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCallslip t = (UniCallslip) v.elementAt(i);
		custnum=t.getCustnum();
		callslip=t.getCallslip();
		cdate=t.getCdate();
		equip1=t.getEquip1();
		equip2=t.getEquip2();
		equip3=t.getEquip3();
		equip4=t.getEquip4();
		reason=t.getReason();
		custsite=t.getCustSite();
		sitenum=t.getSiteNum();
		services=t.getServices();
		recommendations=t.getRecommendations();
		rscheduled=t.getRscheduled();
		charges=t.getCharges();
		collected=t.getCollected();
		//notes=t.getNotes();
		notes="";		
		Vector vcn;
		vcn = CallslipNotes.getAllItems(con,custsite, sitenum, callslip);
		if (vcn.size() > 0 ) {
		notes=combinestring(notes,"<table border=1 width=100%>");
		notes=combinestring(notes,"<th>Date</th><th>User</th><th>Note</th>");
		String note="";
		String ndate="";
		String ncallslip="";
		String nuserlogin="";
		String nnote="";
		int nrecnum=0;
		int nservsync=0;
                for (int icn = 0 ; icn < vcn.size(); icn++)
                {
                CallslipNotes tcn = (CallslipNotes) vcn.elementAt(icn);
		nnote=tcn.getNote();
		ncallslip=tcn.getCallslip();
		nuserlogin=tcn.getUserLogin();
		nrecnum=tcn.getRecNum();
		ndate=tcn.getNDate();
		nservsync=tcn.getServsync();
                notes=combinestring(notes,"<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td></tr>");
		}
			notes=combinestring(notes,"</table>");
		}
		
		parts=t.getParts();
		followup=t.getFollowup();

		Statement stmt = con.createStatement();
        	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
                 while(rs.next())
                {
        	cname=rs.getString("cname");
       		address1=rs.getString("address1");
               address2=rs.getString("address2");
                city =rs.getString("city");
                state=rs.getString("state");
                zip=rs.getString("zip");
        	}
	///////////////////////////////////////////////////
	//Print Inspection Data
	///////////////////////////////////////////////////
	mbody=combinestring(mbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	mbody=combinestring(mbody,"<hr noshade size=1 width=100% color=cccccc><br>Callslip: "+callslip+"<br>");
	mbody=combinestring(mbody,"Customer: "+cname+"<br>");
	mbody=combinestring(mbody,"Address1: "+address1+"<br>");
	mbody=combinestring(mbody,"City: "+city+"<br>");
	mbody=combinestring(mbody,"State: "+state+"<br>");
	mbody=combinestring(mbody,"Zip: "+zip+"<br>");
	pmbody=combinestring(mbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	pmbody=combinestring(mbody,"<hr noshade size=1 width=100% color=cccccc><br>Callslip: "+callslip+"<br>");
	pmbody=combinestring(mbody,"Customer: "+cname+"<br>");
	pmbody=combinestring(mbody,"Address1: "+address1+"<br>");
	pmbody=combinestring(mbody,"City: "+city+"<br>");
	pmbody=combinestring(mbody,"State: "+state+"<br>");
	pmbody=combinestring(mbody,"Zip: "+zip+"<br>");

	///////////////////////////////////////////////////
	//Print Equipment Data
	///////////////////////////////////////////////////
 	stmt = con.createStatement();
	rs = stmt.executeQuery("SELECT * FROM  equipment where enum='"+equip1+"' or enum='"+equip2+"'  or enum='"+equip3+"' or enum='"+equip4+"';");
	mbody=combinestring(mbody,"<br>Equipment Information:<br>-----------------<br>");
	mbody=combinestring(mbody,"<table border=1 width=\"100%\"><th>Type</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");

	pmbody=combinestring(mbody,"<br>Equipment Information:<br>-----------------<br>");
	pmbody=combinestring(mbody,"<table border=1 width=\"100%\"><th>Type</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
		 while(rs.next())
                {
		brand = rs.getString("brand");
                modelnum = rs.getString("modelnum");
                serialnum = rs.getString("serialnum");
                filter = rs.getString("filter");
                enotes = rs.getString("notes");
		etype = rs.getString("etype");
if (etype==null) { 
                etype = "-";
                }
	mbody=combinestring(mbody,"<tr><td>"+etype+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+enotes+"</td></tr>");
	pmbody=combinestring(mbody,"<tr><td>"+etype+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+enotes+"</td></tr>");
	}

	mbody=combinestring(mbody,"</table>");
	pmbody=combinestring(mbody,"</table>");


	///////////////////////////////////////////////////
	//Print Inventory Data
	///////////////////////////////////////////////////
		mbody=combinestring(mbody,"<br><br>Parts Used<br>--------------------------<br>");
	mbody=combinestring(mbody,"<table width=\"100%\" border=1><th>Key Code</th><th>Item</th><th>Quantity</th><th>Date</th><th>Location</th>");
Vector ci;
ci = InvUse.getAllCallslipItems(con, callslip, cdate);
for (int cc = 0 ; cc < ci.size(); cc++)
{
	InvUse ti = (InvUse) ci.elementAt(cc);
	String keycode = ti.getKeyCode();
	String itemname = ti.getItemName();
	String pquant = ti.getQuantity();
	String invloc=ti.getInvLoc();
	String iidate = doFormatDate(getDate(ti.getTDate()));
	mbody=combinestring(mbody,"<tr><td>"+keycode+"</td><td>"+itemname+"</td><td>"+pquant+"</td><td>"+iidate+"</td><td>"+invloc+"</td></tr>");
	}
	mbody=combinestring(mbody,"</table>");


/////////////////////////////////////
//Completion Codes Here
////////////////////////////////////

        Vector r = UniSvcCompl.getAllItems(con,callslip);
	if ((r.size()>0) )
		{
	mbody=combinestring(mbody,"<br><table border=0 width=100% align=\"center\"><font size=1><tr><td><h4>Resolution</h4></td></tr>");
        mbody=combinestring(mbody,"<tr><td><table border=1 width=100% align=\"center\"><font size=1>");
        mbody=combinestring(mbody,"<th>Code</th><th>Resolution</th>");
		
                for (int g = 0 ; g < r.size(); g++)
                {
                UniSvcCompl c = (UniSvcCompl) r.elementAt(i);
		int corecnum=c.getRecnum();
		int codenum=c.getCodeNum();
		String complcode=c.getComplCode();
		String compltext=c.getComplText();
		mbody=combinestring(mbody,"<tr><td>"+complcode+"</td><td>"+compltext+"</td><tr>");
		}
	mbody=combinestring(mbody,"</table></td></tr></table>");
		}

		
	
	////////////////////////////////////////////////////
	//Print Services
	///////////////////////////////////////////////////
	if (services.length()>1) {
	mbody=combinestring(mbody,"Services:<br><br>------------------<br>");
	pmbody=combinestring(mbody,"Services:<br><br>------------------<br>");
	int begin=1;
	int end=0;
	int stringlength= services.length();
	//while (begin <= stringlength)
	//	{
	//if ((stringlength-(begin+52)<0)) {
	//		end=begin+(stringlength-begin);
	//} else {	
	//	end=begin+52;
	//}
	//mbody=combinestring(mbody,""+services.substring(begin-1,end)+"<br>");
	//pmbody=combinestring(pmbody,""+services.substring(begin-1,end)+"<br>");
	//begin=end+1;
	//	}
	mbody=combinestring(mbody,""+services+"<br>");
	pmbody=combinestring(pmbody,""+services+"<br>");
	
	}


	////////////////////////////////////////////////////
	//Print parts
	///////////////////////////////////////////////////
	if (parts.length()>1) {
	mbody=combinestring(mbody,"<br>The following parts are needed:<br>"+parts+"<br>");
	pmbody=combinestring(pmbody,"<br>The following parts are needed:<br>"+parts+"<br>");
	}


	////////////////////////////////////////////////////
	//Print Recommendations
	///////////////////////////////////////////////////
	if (recommendations.length()>1) {
	mbody=combinestring(mbody,"<br>The following recommendations where made by the service technician:<br>"+recommendations+"<br>");
	}


	////////////////////////////////////////////////////
	//Print Notes
	///////////////////////////////////////////////////
	if (notes.length()>1) {
	mbody=combinestring(mbody,"<br>---------------------------<br>OFFICE: The following notes are OFFICE ONLY - NOT FOR CUSTOMER:<br>");
	pmbody=combinestring(pmbody,"<br>---------------------------<br>OFFICE: The following notes are OFFICE ONLY - NOT FOR CUSTOMER:<br>");
	}

/*			out.println("<h3>Notes</h3>");

	Vector vn;
        vn = InspectNotes.getAllItems(con,custsite, sitenum, callslip);
        mbody=combinestring(mbody,"<table border=1 width=100%>");
        mbody=combinestring(mbody,"<th>Date</th><th>User</th><th>Note</th>");
	pmbody=combinestring(pmbody,"<table border=1 width=100%>");
        pmbody=combinestring(pmbody,"<th>Date</th><th>User</th><th>Note</th>");
	String note="";
	String ndate="";
	String ncallslip="";
	String nuserlogin="";
	String nnote="";
	int nrecnum=0;
	int nservsync=0;
		
                for (int in = 0 ; in < vn.size(); in++)
                {
                InspectNotes tn = (InspectNotes) vn.elementAt(in);
		nnote=tn.getNote();
		ncallslip=tn.getCallslip();
		nuserlogin=tn.getUserLogin();
		nrecnum=tn.getRecNum();
		ndate=tn.getNDate();
		nservsync=tn.getServsync();
                mbody=combinestring(mbody,"<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td></tr>");
		pmbody=combinestring(pmbody,"<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td></tr>");
                }
		mbody=combinestring(mbody,"</table>");
		pmbody=combinestring(pmbody,"</table>");
*/	
	
////////////////////////////////////////////////////////
// Here is where we add timesheet information
////////////////////////////////////////////////////////

	mbody=combinestring(mbody,"<br>------------------------------<br>Times:<br>");
        Vector tsd;
        tsd = UniTimeSheet.getAllCallslipItems(con,cdate,callslip, username);
		
                for (int h = 0 ; h < tsd.size(); h++)
                {
		UniTimeSheet ts = (UniTimeSheet) tsd.elementAt(h);
		String TimeIn = ts.TimeIn();
		String TimeOut = ts.TimeOut();
		String DispatchTime = ts.DispatchTime();
		String odostart=ts.OdoStart();
		String odostop=ts.OdoStop();

	mbody=combinestring(mbody,"<br>Dispatched Time: "+DispatchTime+"<br>Time In: "+TimeIn+"<br>Time Out: "+TimeOut+"<br>Odometer Stop: "+odostop+"<br>Odometer Start: "+odostart+"<br><br>");
		}


////////////////////////////////////////////////////
// Add Charges 
///////////////////////////////////////////////////

	mbody=combinestring(mbody,"<br>------------------------------<br>Charges:<br>");
	int frcode=0;
        Vector u;
        u = UniSvcCharges.getAllItems(con,callslip);
		
                for (int h = 0 ; h < u.size(); h++)
                {
                UniSvcCharges q = (UniSvcCharges) u.elementAt(h);
		recnum=q.getRecnum();
		callslip=q.getCallslip();
		quant=q.getQuant();
		descript=q.getDescript();
		price=q.getPrice();
		total=q.getTotal();
		frcode=q.getFrcode();
		totalcharge=totalcharge+total;
                mbody=combinestring(mbody,"Code: "+frcode+" Quantity: "+quant+"   Service: "+descript+"  Price: "+NumberFormat.getCurrencyInstance().format(price)+"  Total: "+NumberFormat.getCurrencyInstance().format(total)+"<br>");
		}

////////////////////////////////////////////////////////
// Here is where we end the http headers
////////////////////////////////////////////////////////
                out.println(mbody);
               //String newstring = mbody.replaceAll("<br>","\n");
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	String stockemail=doGetStock_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Service Call: "+callslip+" - "+cname+" - "+listdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
	if (parts.length()>1) {
	doMailSend(emailserver, stockemail, techemailaddress, "Parts Needed: "+callslip+" - "+cname+" - "+listdate+" - "+ tech_name , pmbody, smtpuser, smtppassword);
			}
		mbody="";
		pmbody="";
		}
//	doMailSend(emailserver, emailsendaddress, techemailaddress, "Service CallSlips - "+listdate+" - "+ tech_name , mbody);
	out.println("</html>");

		con.close();
	}

// SINGLE CALLSLIP SEND HERE

  private void doMailExtraTime(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
	int custnum=0;
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
            String mbody = "";
            String tcustnum = req.getParameter("custnum");
            String reason = req.getParameter("reason");
	custnum = Integer.parseInt(tcustnum);
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		Statement stmt = con.createStatement();
        	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
                 while(rs.next())
                {
        	cname=rs.getString("cname");
       		address1=rs.getString("address1");
               address2=rs.getString("address2");
                city =rs.getString("city");
                state=rs.getString("state");
                zip=rs.getString("zip");
        	}

	mbody=combinestring(mbody,"<br>Technician is requesting EXTRA TIME at: <br>");
	mbody=combinestring(mbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	mbody=combinestring(mbody,"<hr noshade size=1 width=100% color=cccccc><br>");
	mbody=combinestring(mbody,"Customer: "+cname+"<br>");
	mbody=combinestring(mbody,"Address1: "+address1+"<br>");
	mbody=combinestring(mbody,"City: "+city+"<br>");
	mbody=combinestring(mbody,"State: "+state+"<br>");
	mbody=combinestring(mbody,"Zip: "+zip+"<br>");
	mbody=combinestring(mbody,"<br><br>Reason Given: "+reason+"<br>");

                out.println(mbody);
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, ""+tech_name+" is requesting extra time at: "+cname+"" , mbody, smtpuser, smtppassword);
		mbody="";
                out.println("<br><br><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">Click here to continue</a>");
	out.println("</html>");
	}

  private void doAlmostDone(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
	int custnum=0;
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
            String mbody = "";
            String tcustnum = req.getParameter("custnum");
	custnum = Integer.parseInt(tcustnum);
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		Statement stmt = con.createStatement();
        	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
                 while(rs.next())
                {
        	cname=rs.getString("cname");
       		address1=rs.getString("address1");
               address2=rs.getString("address2");
                city =rs.getString("city");
                state=rs.getString("state");
                zip=rs.getString("zip");
        	}

	mbody=combinestring(mbody,"<br>Technician is sending an ALMOST COMPLETE at: <br>");
	mbody=combinestring(mbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	mbody=combinestring(mbody,"<hr noshade size=1 width=100% color=cccccc><br>");
	mbody=combinestring(mbody,"Customer: "+cname+"<br>");
	mbody=combinestring(mbody,"Address1: "+address1+"<br>");
	mbody=combinestring(mbody,"City: "+city+"<br>");
	mbody=combinestring(mbody,"State: "+state+"<br>");
	mbody=combinestring(mbody,"Zip: "+zip+"<br>");
                out.println(mbody);
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, ""+tech_name+" is almost complete: "+cname+"" , mbody, smtpuser, smtppassword);
		mbody="";
                out.println("<br><br><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">Click here to continue</a>");
	out.println("</html>");
	}

private void doExtraTime(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
                        {
	String tcustnum = req.getParameter("custnum");
       	int custnum = Integer.parseInt(tcustnum);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Need Extra Time</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=mailextratime&custnum="+custnum+"\" name=\"addcust\">");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Reason</td><td>");
	out.println("<input type=\"text\" name=\"reason\" size=\"80\"></td>");
	out.println("</tr>");
	out.println("</table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

  private void doSendComplete(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
	Date date = new Date(); 
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String today = formatter.format(date);
	int custnum=0;
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
            String mbody = "";
            String tcustnum = req.getParameter("custnum");
	custnum = Integer.parseInt(tcustnum);
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		Statement stmt = con.createStatement();
        	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
                 while(rs.next())
                {
        	cname=rs.getString("cname");
       		address1=rs.getString("address1");
               address2=rs.getString("address2");
                city =rs.getString("city");
                state=rs.getString("state");
                zip=rs.getString("zip");
        	}

	mbody=combinestring(mbody,"<br>Technician is sending a COMPLETE at:<br>");
	mbody=combinestring(mbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	mbody=combinestring(mbody,"<hr noshade size=1 width=100% color=cccccc><br>");
	mbody=combinestring(mbody,"Customer: "+cname+"<br>");
	mbody=combinestring(mbody,"Address1: "+address1+"<br>");
	mbody=combinestring(mbody,"City: "+city+"<br>");
	mbody=combinestring(mbody,"State: "+state+"<br>");
	mbody=combinestring(mbody,"Zip: "+zip+"<br>");
                out.println(mbody);
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, ""+tech_name+" has completed: "+cname+"" , mbody, smtpuser, smtppassword);
		mbody="";

		// 
		// Here is where we get all callslips to send
		// 

        	rs = stmt.executeQuery("SELECT * FROM callslip where custnum="+custnum+" and cdate='"+today+"';");
		int sizec=rs.getFetchSize();
                 while(rs.next())
                {
		sizec++;
		String callslip=rs.getString("crecnum");
		mbody=doSendSingleCallSlipsC(callslip, custnum, username);
		out.println(mbody);
		}
		out.println("callslips="+sizec+"<br>");

		//
		// Here is where we get all inspections to send
		//

        	rs = stmt.executeQuery("SELECT * FROM inspection where custnum="+custnum+" and idate='"+today+"';");
		int sizei=rs.getFetchSize();
                 while(rs.next())
                {
		int callslip=rs.getInt("crecnum");
		//mbody=doSendSingleInspectionsC(callslip, custnum, username);
		mbody=ServsysPrintInspection.mailIndividualItem (con, req,res, out, session, username, classdir, callslip, custnum);
		sizei++;
		out.println(mbody);
		}
		out.println("inspections="+sizei+"<br>");


		//
		// Here is where we get all Preventative Agreements to send
		//

        	rs = stmt.executeQuery("SELECT * FROM pagreement where custnum="+custnum+" and agrdate='"+today+"';");
		int sizep=rs.getFetchSize();
                 while(rs.next())
                {	
			int contnum=rs.getInt("contnum");
			mbody=doSendPrevagreementC(contnum, custnum, username);
			sizep++;
			out.println(mbody);
		}
		out.println("pagreement="+sizep+"<br>");


		//
		// Here is where we get all Worksheets to send
		//

        	rs = stmt.executeQuery("SELECT * FROM  worksheet where crec="+custnum+" and wsdate='"+today+"';");
		int sizew=rs.getFetchSize();
                 while(rs.next())
                {
			int wsrec=rs.getInt("wsrec");
			sizew++;
			mbody=doSendWorksheetC(wsrec, custnum, username);
			out.println(mbody);
		}
		out.println("worksheets="+sizew+"<br>");


		//
		// Here is where we get all Proposals to send
		//

        	rs = stmt.executeQuery("SELECT * FROM  quotes where crecnum="+custnum+" and qdate='"+today+"';");
		int sizeq=rs.getFetchSize();
                 while(rs.next())
                {
		sizeq++;
		int qnumber=rs.getInt("quotenum");
		String proposal=doSendSingleProposalsC(qnumber, custnum, username);
		out.println(proposal);
		}
		out.println("proposals="+sizeq+"<br>");




                out.println("<br><br><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">Click here to continue</a>");
	out.println("</html>");
	}


  private void doArrived(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
	int custnum=0;
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
            String mbody = "";
            String tcustnum = req.getParameter("custnum");
	custnum = Integer.parseInt(tcustnum);
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		Statement stmt = con.createStatement();
        	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
                 while(rs.next())
                {
        	cname=rs.getString("cname");
       		address1=rs.getString("address1");
               address2=rs.getString("address2");
                city =rs.getString("city");
                state=rs.getString("state");
                zip=rs.getString("zip");
        	}

	mbody=combinestring(mbody,"<br>Technician is sending an ARRIVED at:<br>");
	mbody=combinestring(mbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	mbody=combinestring(mbody,"<hr noshade size=1 width=100% color=cccccc><br>");
	mbody=combinestring(mbody,"Customer: "+cname+"<br>");
	mbody=combinestring(mbody,"Address1: "+address1+"<br>");
	mbody=combinestring(mbody,"City: "+city+"<br>");
	mbody=combinestring(mbody,"State: "+state+"<br>");
	mbody=combinestring(mbody,"Zip: "+zip+"<br>");
                out.println(mbody);
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, ""+tech_name+" has Arrived: "+cname+"" , mbody, smtpuser, smtppassword);
		mbody="";
                out.println("<br><br><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">Click here to continue</a>");
	out.println("</html>");
	}


  private String doSendSingleCallSlipsC(String callslip, int custnum, String username)
                throws Exception
        {
         int eenum=0;
        int ecustnum=0;
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	String tcsrec=null;
        String brand=null;
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
        String enotes=null;
	String cdate=null;
	int equip1=0;
	int equip2=0;
	int equip3=0;
	int equip4=0;
	String reason=null;
	String services=null;
	String recommendations=null;
	String rscheduled=null;
	String charges=null;
	String collected=null;
	int followup=0;
	String descript;
	String ccallslip;
	double quant;
	double price;
	double total;
	double totalcharge=0.00;
	int recnum;
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String parts=null;
	String etype="";
	String custsite="";
	String sitenum="";
            String mbody = "";
	    String pmbody="";
	    int csrec=Integer.parseInt(callslip);
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);

/////////////////////////////////////////////////////////
// Here is where we get all the Callslips  for the day
////////////////////////////////////////////////////////

                Vector v;
                v = UniCallslip.getIndItems(con,custnum, csrec);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCallslip t = (UniCallslip) v.elementAt(i);

		custnum=t.getCustnum();
		callslip=t.getCallslip();
		custsite=t.getCustSite();
		sitenum=t.getSiteNum();
		cdate=t.getCdate();
		equip1=t.getEquip1();
		equip2=t.getEquip2();
		equip3=t.getEquip3();
		equip4=t.getEquip4();
		reason=t.getReason();
		services=t.getServices();
		recommendations=t.getRecommendations();
		rscheduled=t.getRscheduled();
		charges=t.getCharges();
		collected=t.getCollected();
		//notes=t.getNotes();
						notes="";		
		Vector vcn;
		vcn = CallslipNotes.getAllItems(con,custsite, sitenum, callslip);
		if (vcn.size() > 0 ) {
		notes=combinestring(notes,"<table border=1 width=100%>");
		notes=combinestring(notes,"<th>Date</th><th>User</th><th>Note</th>");
		String note="";
		String ndate="";
		String ncallslip="";
		String nuserlogin="";
		String nnote="";
		int nrecnum=0;
		int nservsync=0;
                for (int icn = 0 ; icn < vcn.size(); icn++)
                {
                CallslipNotes tcn = (CallslipNotes) vcn.elementAt(icn);
		nnote=tcn.getNote();
		ncallslip=tcn.getCallslip();
		nuserlogin=tcn.getUserLogin();
		nrecnum=tcn.getRecNum();
		ndate=tcn.getNDate();
		nservsync=tcn.getServsync();
                notes=combinestring(notes,"<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td></tr>");
		}
			notes=combinestring(notes,"</table>");
		}
		
		followup=t.getFollowup();
		parts=t.getParts();

		Statement stmt = con.createStatement();
        	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
                 while(rs.next())
                {
        	cname=rs.getString("cname");
       		address1=rs.getString("address1");
               address2=rs.getString("address2");
                city =rs.getString("city");
                state=rs.getString("state");
                zip=rs.getString("zip");
        	}

	mbody=combinestring(mbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	mbody=combinestring(mbody,"<hr noshade size=1 width=100% color=cccccc><br>Callslip: "+callslip+"<br>");
	mbody=combinestring(mbody,"Customer: "+cname+"<br>");
	mbody=combinestring(mbody,"Address1: "+address1+"<br>");
	mbody=combinestring(mbody,"City: "+city+"<br>");
	mbody=combinestring(mbody,"State: "+state+"<br>");
	mbody=combinestring(mbody,"Zip: "+zip+"<br>");

	pmbody=combinestring(pmbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	pmbody=combinestring(pmbody,"<hr noshade size=1 width=100% color=cccccc><br>Callslip: "+callslip+"<br>");
	pmbody=combinestring(pmbody,"Customer: "+cname+"<br>");
	pmbody=combinestring(pmbody,"Address1: "+address1+"<br>");
	pmbody=combinestring(pmbody,"City: "+city+"<br>");
	pmbody=combinestring(pmbody,"State: "+state+"<br>");
	pmbody=combinestring(pmbody,"Zip: "+zip+"<br>");

 	stmt = con.createStatement();
	rs = stmt.executeQuery("SELECT * FROM  equipment where enum='"+equip1+"' or enum='"+equip2+"'  or enum='"+equip3+"' or enum='"+equip4+"';");
	mbody=combinestring(mbody,"<br>Equipment Information:<br>-----------------<br>");
	mbody=combinestring(mbody,"<table border=1 width=\"100%\"><th>Type</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
	pmbody=combinestring(pmbody,"<br>Equipment Information:<br>-----------------<br>");
	pmbody=combinestring(pmbody,"<table border=1 width=\"100%\"><th>Type</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");

		 while(rs.next())
                {
		brand = rs.getString("brand");
                modelnum = rs.getString("modelnum");
                serialnum = rs.getString("serialnum");
                filter = rs.getString("filter");
                enotes = rs.getString("notes");
		etype = rs.getString("etype");
if (etype==null) { 
                etype = "-";
                }
	mbody=combinestring(mbody,"<tr><td>"+etype+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+enotes+"</td></tr>");
	pmbody=combinestring(pmbody,"<tr><td>"+etype+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+enotes+"</td></tr>");
	}

	mbody=combinestring(mbody,"</table>");
	pmbody=combinestring(pmbody,"</table>");
	mbody=combinestring(mbody,"<br><br>Parts Used<br>--------------------------<br>");
	mbody=combinestring(mbody,"<table width=\"100%\" border=1><th>Key Code</th><th>Item</th><th>Quantity</th><th>Date</th><th>Location</th>");
Vector ci;
ci = InvUse.getAllCallslipItems(con, callslip, cdate);
for (int cc = 0 ; cc < ci.size(); cc++)
{
	InvUse ti = (InvUse) ci.elementAt(cc);
	String keycode = ti.getKeyCode();
	String itemname = ti.getItemName();
	String pquant = ti.getQuantity();
	String invloc=ti.getInvLoc();
	String iidate = doFormatDate(getDate(ti.getTDate()));
	mbody=combinestring(mbody,"<tr><td>"+keycode+"</td><td>"+itemname+"</td><td>"+pquant+"</td><td>"+iidate+"</td><td>"+invloc+"</td></tr>");
			}
	mbody=combinestring(mbody,"</table>");


/////////////////////////////////////
//Completion Codes Here
////////////////////////////////////

        Vector r = UniSvcCompl.getAllItems(con,callslip);
	if ((r.size()>0) )
		{
	mbody=combinestring(mbody,"<br><table border=0 width=100% align=\"center\"><font size=1><tr><td><h4>Resolution</h4></td></tr>");
        mbody=combinestring(mbody,"<tr><td><table border=1 width=100% align=\"center\"><font size=1>");
        mbody=combinestring(mbody,"<th>Code</th><th>Resolution</th>");
		
                for (int g = 0 ; g < r.size(); g++)
                {
                UniSvcCompl c = (UniSvcCompl) r.elementAt(i);
		int corecnum=c.getRecnum();
		int codenum=c.getCodeNum();
		String complcode=c.getComplCode();
		String compltext=c.getComplText();
		mbody=combinestring(mbody,"<tr><td>"+complcode+"</td><td>"+compltext+"</td><tr>");
		}
	mbody=combinestring(mbody,"</table></td></tr></table>");
		}

		
	
	int begin=1;
	int end=0;
	int stringlength= services.length();
	////////////////////////////////////////////////////
	//Print Services
	///////////////////////////////////////////////////
	if (services.length()>1) {
	mbody=combinestring(mbody,"Services:<br><br>------------------<br>");
	pmbody=combinestring(mbody,"Services:<br><br>------------------<br>");
	//while (begin <= stringlength)
	//	{
	//if ((stringlength-(begin+49)<0)) {
	//	end=begin+(stringlength-begin);
	//} else {	
	//	end=begin+49;
	//}
	//mbody=combinestring(mbody,""+services.substring(begin-1,end)+"<br>");
	//pmbody=combinestring(pmbody,""+services.substring(begin-1,end)+"<br>");
	//begin=end+1;
	//	}
	mbody=combinestring(mbody,""+services+"<br>");
	pmbody=combinestring(pmbody,""+services+"<br>");
	
	}
	
	////////////////////////////////////////////////////
	//Print Services
	///////////////////////////////////////////////////
	if (parts.length()>1) {
	mbody=combinestring(mbody,"<br>Parts Needed:<br><br>------------------<br>"+parts+"<br>");
	pmbody=combinestring(pmbody,"<br>Parts Needed:<br><br>------------------<br>"+parts+"<br>");
	}


	////////////////////////////////////////////////////
	//Print Recommendations
	///////////////////////////////////////////////////
	if (recommendations.length()>1) {
	mbody=combinestring(mbody,"<br>The following recommendations where made by the service technician:<br>"+recommendations+"<br>");
	}


	////////////////////////////////////////////////////
	//Print Notes
	///////////////////////////////////////////////////
	if (notes.length()>1) {
	mbody=combinestring(mbody,"<br>---------------------------<br>OFFICE: The following notes are OFFICE ONLY - NOT FOR CUSTOMER:<br>"+notes+"<br>");
	}

////////////////////////////////////////////////////////
// Here is where we add timesheet information
////////////////////////////////////////////////////////

	mbody=combinestring(mbody,"<br>------------------------------<br>Times:<br>");
        Vector tsd;
        tsd = UniTimeSheet.getAllCallslipItems(con,cdate,callslip, username);
		
                for (int h = 0 ; h < tsd.size(); h++)
                {
		UniTimeSheet ts = (UniTimeSheet) tsd.elementAt(h);
		String TimeIn = ts.TimeIn();
		String TimeOut = ts.TimeOut();
		String DispatchTime = ts.DispatchTime();
		String Amount = ts.Amount();
		String AmountCollected = ts.AmountCollected();
		String Commision = ts.Commision();
		String CItemSold = ts.CItemSold();
		String CAmount = ts.CAmount();
		String ItemSold = ts.ItemSold();
		String paytype = ts.TPayType();
		String odostart=ts.OdoStart();
		String odostop=ts.OdoStop();

	mbody=combinestring(mbody,"<br>Dispatched Time: "+DispatchTime+"<br>Time In: "+TimeIn+"<br>Time Out: "+TimeOut+"<br>Odometer Stop: "+odostop+"<br>Odometer Start: "+odostart+"<br><br>");	
	mbody=combinestring(mbody,"Item Sold: "+ItemSold+"<br>Amount Sold: "+Amount+"<br>Commision Item Sold: "+CItemSold+"<br>Commision Amount Sold: "+CAmount+"<br>Amount Collected: "+AmountCollected+"<br>Commision: "+Commision+"<br>Paid With: "+paytype+"<br>");

		}
	int frcode=0;
	mbody=combinestring(mbody,"<br>------------------------------<br>Charges:<br>");
        Vector u;
        u = UniSvcCharges.getAllItems(con,callslip);
		
                for (int h = 0 ; h < u.size(); h++)
                {
                UniSvcCharges q = (UniSvcCharges) u.elementAt(h);
		recnum=q.getRecnum();
		frcode=q.getFrcode();
		callslip=q.getCallslip();
		quant=q.getQuant();
		descript=q.getDescript();
		price=q.getPrice();
		total=q.getTotal();
		totalcharge=totalcharge+total;
                mbody=combinestring(mbody,"Code: "+frcode+" Quantity: "+quant+"   Service: "+descript+"  Price: "+NumberFormat.getCurrencyInstance().format(price)+"  Total: "+NumberFormat.getCurrencyInstance().format(total)+"<br>");
		}
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	String stockemail=doGetStock_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Service Call: "+callslip+" - "+cname+" - "+cdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
	if (parts.length()>1) {
	doMailSend(emailserver, stockemail, techemailaddress, "Parts Needed: "+callslip+" - "+cname+" - "+cdate+" - "+ tech_name , pmbody, smtpuser, smtppassword);
		}
		//mbody="";
		}
		return mbody;
	}

//END SINGLE CALLSLIP

  private void doSendSingleCallSlips(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
         int eenum=0;
        int ecustnum=0;
	int custnum=0;
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	String tcsrec=null;
        String brand=null;
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
        String enotes=null;
	String callslip=null;
	String cdate=null;
	int equip1=0;
	int equip2=0;
	int equip3=0;
	int equip4=0;
	String reason=null;
	String services=null;
	String recommendations=null;
	String rscheduled=null;
	String charges=null;
	String collected=null;
	int followup=0;
	String descript;
	String parts=null;
	String ccallslip;
	double quant;
	double price;
	double total;
	double totalcharge=0.00;
	int recnum;
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String etype="";
	String custsite="";
	String sitenum="";
            String mbody = "";
	    String pmbody  = "";
            tcsrec = req.getParameter("csrec");
            String tcustnum = req.getParameter("custnum");
	int csrec = Integer.parseInt(tcsrec);
	custnum = Integer.parseInt(tcustnum);
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);

/////////////////////////////////////////////////////////
// Here is where we start the http headers
////////////////////////////////////////////////////////
	out.println("<html>");
	
/////////////////////////////////////////////////////////
// Here is where we get all the Callslips  for the day
////////////////////////////////////////////////////////

                Vector v;
                v = UniCallslip.getIndItems(con,custnum, csrec);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCallslip t = (UniCallslip) v.elementAt(i);

		custnum=t.getCustnum();
		callslip=t.getCallslip();
		cdate=t.getCdate();
		custsite=t.getCustSite();
		sitenum=t.getSiteNum();
		equip1=t.getEquip1();
		equip2=t.getEquip2();
		equip3=t.getEquip3();
		equip4=t.getEquip4();
		reason=t.getReason();
		services=t.getServices();
		recommendations=t.getRecommendations();
		rscheduled=t.getRscheduled();
		charges=t.getCharges();
		collected=t.getCollected();
		//notes=t.getNotes();
		
						notes="";		
		Vector vcn;
		vcn = CallslipNotes.getAllItems(con,custsite, sitenum, callslip);
		if (vcn.size() > 0 ) {
		notes=combinestring(notes,"<table border=1 width=100%>");
		notes=combinestring(notes,"<th>Date</th><th>User</th><th>Note</th>");
		String note="";
		String ndate="";
		String ncallslip="";
		String nuserlogin="";
		String nnote="";
		int nrecnum=0;
		int nservsync=0;
                for (int icn = 0 ; icn < vcn.size(); icn++)
                {
                CallslipNotes tcn = (CallslipNotes) vcn.elementAt(icn);
		nnote=tcn.getNote();
		ncallslip=tcn.getCallslip();
		nuserlogin=tcn.getUserLogin();
		nrecnum=tcn.getRecNum();
		ndate=tcn.getNDate();
		nservsync=tcn.getServsync();
                notes=combinestring(notes,"<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td></tr>");
		}
			notes=combinestring(notes,"</table>");
		}
		
		followup=t.getFollowup();
		parts=t.getParts();

		Statement stmt = con.createStatement();
        	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
                 while(rs.next())
                {
        	cname=rs.getString("cname");
       		address1=rs.getString("address1");
               address2=rs.getString("address2");
                city =rs.getString("city");
                state=rs.getString("state");
                zip=rs.getString("zip");
        	}

// TIMESHEET LINK 
// select * from time_sheet where callslip like '%"+callslip+"%' and tdate='"+tdate+"';
// Check and make sure 
	///////////////////////////////////////////////////
	//Print Inspection Data
	///////////////////////////////////////////////////
	mbody=combinestring(mbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	mbody=combinestring(mbody,"<hr noshade size=1 width=100% color=cccccc><br>Callslip: "+callslip+"<br>");
	mbody=combinestring(mbody,"Customer: "+cname+"<br>");
	mbody=combinestring(mbody,"Address1: "+address1+"<br>");
	mbody=combinestring(mbody,"City: "+city+"<br>");
	mbody=combinestring(mbody,"State: "+state+"<br>");
	mbody=combinestring(mbody,"Zip: "+zip+"<br>");

	pmbody=combinestring(pmbody,"<br><hr noshade size=1 width=100% color=cccccc>");
	pmbody=combinestring(pmbody,"<hr noshade size=1 width=100% color=cccccc><br>Callslip: "+callslip+"<br>");
	pmbody=combinestring(pmbody,"Customer: "+cname+"<br>");
	pmbody=combinestring(pmbody,"Address1: "+address1+"<br>");
	pmbody=combinestring(pmbody,"City: "+city+"<br>");
	pmbody=combinestring(pmbody,"State: "+state+"<br>");
	pmbody=combinestring(pmbody,"Zip: "+zip+"<br>");

	///////////////////////////////////////////////////
	//Print Equipment Data
	///////////////////////////////////////////////////
 	stmt = con.createStatement();
	rs = stmt.executeQuery("SELECT * FROM  equipment where enum='"+equip1+"' or enum='"+equip2+"'  or enum='"+equip3+"' or enum='"+equip4+"';");
	mbody=combinestring(mbody,"<br>Equipment Information:<br>-----------------<br>");
	mbody=combinestring(mbody,"<table border=1 width=\"100%\"><th>Type</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
	pmbody=combinestring(pmbody,"<br>Equipment Information:<br>-----------------<br>");
	pmbody=combinestring(pmbody,"<table border=1 width=\"100%\"><th>Type</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");

		 while(rs.next())
                {
		brand = rs.getString("brand");
                modelnum = rs.getString("modelnum");
                serialnum = rs.getString("serialnum");
                filter = rs.getString("filter");
                enotes = rs.getString("notes");
		etype = rs.getString("etype");
if (etype==null) { 
                etype = "-";
                }
	mbody=combinestring(mbody,"<tr><td>"+etype+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+enotes+"</td></tr>");
	pmbody=combinestring(pmbody,"<tr><td>"+etype+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+enotes+"</td></tr>");
	}

	mbody=combinestring(mbody,"</table>");
	pmbody=combinestring(pmbody,"</table>");


	///////////////////////////////////////////////////
	//Print Inventory Data
	///////////////////////////////////////////////////
		mbody=combinestring(mbody,"<br><br>Parts Used<br>--------------------------<br>");
	mbody=combinestring(mbody,"<table width=\"100%\" border=1><th>Key Code</th><th>Item</th><th>Quantity</th><th>Date</th><th>Location</th>");
Vector ci;
ci = InvUse.getAllCallslipItems(con, callslip, cdate);
for (int cc = 0 ; cc < ci.size(); cc++)
{
	InvUse ti = (InvUse) ci.elementAt(cc);
	String keycode = ti.getKeyCode();
	String itemname = ti.getItemName();
	String pquant = ti.getQuantity();
	String invloc=ti.getInvLoc();
	String iidate = doFormatDate(getDate(ti.getTDate()));
	mbody=combinestring(mbody,"<tr><td>"+keycode+"</td><td>"+itemname+"</td><td>"+pquant+"</td><td>"+iidate+"</td><td>"+invloc+"</td></tr>");
			}
	mbody=combinestring(mbody,"</table>");


/////////////////////////////////////
//Completion Codes Here
////////////////////////////////////

        Vector r = UniSvcCompl.getAllItems(con,callslip);
	if ((r.size()>0) )
		{
	mbody=combinestring(mbody,"<br><table border=0 width=100% align=\"center\"><font size=1><tr><td><h4>Resolution</h4></td></tr>");
        mbody=combinestring(mbody,"<tr><td><table border=1 width=100% align=\"center\"><font size=1>");
        mbody=combinestring(mbody,"<th>Code</th><th>Resolution</th>");
		
                for (int g = 0 ; g < r.size(); g++)
                {
                UniSvcCompl c = (UniSvcCompl) r.elementAt(i);
		int corecnum=c.getRecnum();
		int codenum=c.getCodeNum();
		String complcode=c.getComplCode();
		String compltext=c.getComplText();
		mbody=combinestring(mbody,"<tr><td>"+complcode+"</td><td>"+compltext+"</td><tr>");
		}
	mbody=combinestring(mbody,"</table></td></tr></table>");
		}

		
	int begin=1;
	int end=0;
	int stringlength= services.length();
	
	////////////////////////////////////////////////////
	//Print Services
	///////////////////////////////////////////////////
	if (services.length()>1) {
	mbody=combinestring(mbody,"Services:<br><br>------------------<br>");
	pmbody=combinestring(mbody,"Services:<br><br>------------------<br>");
	//while (begin <= stringlength)
	//	{
	//if ((stringlength-(begin+49)<0)) {
	//	end=begin+(stringlength-begin);
	//} else {	
	//	end=begin+49;
	//}
	//mbody=combinestring(mbody,""+services.substring(begin-1,end)+"<br>");
	//pmbody=combinestring(pmbody,""+services.substring(begin-1,end)+"<br>");
	//begin=end+1;
	//	}
	mbody=combinestring(mbody,""+services+"<br>");
	pmbody=combinestring(pmbody,""+services+"<br>");
	}
	
	////////////////////////////////////////////////////
	//Print parts
	///////////////////////////////////////////////////
	if (parts.length()>1) {
	mbody=combinestring(mbody,"<br>Parts Needed:<br><br>------------------<br>"+parts+"<br>");
	pmbody=combinestring(pmbody,"<br>Parts Needed:<br><br>------------------<br>"+parts+"<br>");
	}


	////////////////////////////////////////////////////
	//Print Recommendations
	///////////////////////////////////////////////////
	if (recommendations.length()>1) {
	mbody=combinestring(mbody,"<br>The following recommendations where made by the service technician:<br>"+recommendations+"<br>");
	}


	////////////////////////////////////////////////////
	//Print Notes
	///////////////////////////////////////////////////
	if (notes.length()>1) {
	mbody=combinestring(mbody,"<br>---------------------------<br>OFFICE: The following notes are OFFICE ONLY - NOT FOR CUSTOMER:<br>"+notes+"<br>");
	}

////////////////////////////////////////////////////////
// Here is where we add timesheet information
////////////////////////////////////////////////////////

	mbody=combinestring(mbody,"<br>------------------------------<br>Times:<br>");
        Vector tsd;
        tsd = UniTimeSheet.getAllCallslipItems(con,cdate,callslip, username);
		
                for (int h = 0 ; h < tsd.size(); h++)
                {
		UniTimeSheet ts = (UniTimeSheet) tsd.elementAt(h);
		String TimeIn = ts.TimeIn();
		String TimeOut = ts.TimeOut();
		String DispatchTime = ts.DispatchTime();
		String Amount = ts.Amount();
		String AmountCollected = ts.AmountCollected();
		String Commision = ts.Commision();
		String CItemSold = ts.CItemSold();
		String CAmount = ts.CAmount();
		String ItemSold = ts.ItemSold();
		String paytype = ts.TPayType();
		String odostop=ts.OdoStop();
		String odostart=ts.OdoStart();

	mbody=combinestring(mbody,"<br>Dispatched Time: "+DispatchTime+"<br>Time In: "+TimeIn+"<br>Time Out: "+TimeOut+"<br>Odometer Stop: "+odostop+"<br>Odometer Start: "+odostart+"<br><br>");	
	mbody=combinestring(mbody,"Item Sold: "+ItemSold+"<br>Amount Sold: "+Amount+"<br>Commision Item Sold: "+CItemSold+"<br>Commision Amount Sold: "+CAmount+"<br>Amount Collected: "+AmountCollected+"<br>Commision: "+Commision+"<br>Paid With: "+paytype+"<br>");

		}


////////////////////////////////////////////////////
// Add Charges 
///////////////////////////////////////////////////
	int frcode=0;
	mbody=combinestring(mbody,"<br>------------------------------<br>Charges:<br>");
        Vector u;
        u = UniSvcCharges.getAllItems(con,callslip);
		
                for (int h = 0 ; h < u.size(); h++)
                {
                UniSvcCharges q = (UniSvcCharges) u.elementAt(h);
		recnum=q.getRecnum();
		frcode=q.getFrcode();
		callslip=q.getCallslip();
		quant=q.getQuant();
		descript=q.getDescript();
		price=q.getPrice();
		total=q.getTotal();
		totalcharge=totalcharge+total;
                mbody=combinestring(mbody,"Code: "+frcode+" Quantity: "+quant+"   Service: "+descript+"  Price: "+NumberFormat.getCurrencyInstance().format(price)+"  Total: "+NumberFormat.getCurrencyInstance().format(total)+"<br>");
		}

////////////////////////////////////////////////////////
// Here is where we end the http headers
////////////////////////////////////////////////////////
                out.println(mbody);
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	String stockemail=doGetStock_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Service Call: "+callslip+" - "+cname+" - "+cdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
	if (parts.length()>1) {
	doMailSend(emailserver, stockemail, techemailaddress, "Parts Needed: "+callslip+" - "+cname+" - "+cdate+" - "+ tech_name , pmbody, smtpuser, smtppassword);
		}
		mbody="";
		pmbody="";
		}
	out.println("</html>");
////////////////////////////////////////////////////////
// Here is where we end the http headers
// BLOCKED THIS TO SEPERATE CALLSLIPS INTO INDIVIDUAL MESSAGES
////////////////////////////////////////////////////////
//                out.println(mbody);
//               //String newstring = mbody.replaceAll("<br>","\n");
//        emailserver = doGetSmtpServer();
//        emailsendaddress=doGetSvc_Email();
//        techemailaddress=doGetTech_Email();
//	doMailSend(emailserver, emailsendaddress, techemailaddress, "Service CallSlips - "+listdate+" - "+ tech_name , mbody);


// Now sync callslip to server
		doSyncCallslips(req, res, out, session, username);
		//con.close();
	}

//END SINGLE CALLSLIP


  private void doTelnetConnect(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<html>");
//   TelnetWrapper telnet = new TelnetWrapper();
//   try {
//      telnet.connect("192.168.1.254", 23);
//      telnet.login("molnarc", "smokey");
//      telnet.setPrompt("user@host");
//      telnet.waitfor("Terminal type?");
//      telnet.send("dumb");
//      out.println(telnet.send("ls -l"));
//    } catch(java.io.IOException e) {
//      e.printStackTrace();
//    }
	out.println("</html>");
		con.close();
	}

  private void doDeleteSingleTimeEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
            String timesheetdate = req.getParameter("listdate");
		String tsid=req.getParameter("tsid");
		UniTimeSheet.deleteItem(con,tsid);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showtimesheet&listdate="+timesheetdate);
	}


		
  private void doExportSingleTimeEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
            String mbody = "";
		int counter=0;
		long lstart, lend, lunch_time, sstart, send, shop_time, day_shoptime, travel_time, day_jobtime, day_travel, paid_time, elapsed, end, jend, disp_time, jstart, job_time, start, dispatch;
            String timesheetdate = req.getParameter("listdate");
		String tsid=req.getParameter("tsid");
		int itemnum = Integer.parseInt(tsid);
		job_time=0;
		jstart=0;
		jend=0;
		disp_time=0;
		travel_time=0;
		String tech_init = doGetTechInfo_init(username);
		mbody = combinestring(mbody,"<time><time_date>"+ timesheetdate+"</time_date><tech_init>"+tech_init+"</tech_init>");
            Vector v;
            //v = UniTimeSheet.getAllItems(con,doFormatDateDb(getDateDb(timesheetdate)), username);
            v = UniTimeSheet.getIndividualItems(con,itemnum);
		if (v.size()!=0) {
               		 for (int i = 0 ; i < v.size(); i++)
                	{
                       	UniTimeSheet t = (UniTimeSheet) v.elementAt(i);
			int ntsid  = t.getId();
                        String  callslip= t.CallSlip();
			String customer = t.Customer();
			String time_in = t.TimeIn();
			String time_out = t.TimeOut();
			String dispatch_time = t.DispatchTime();
			String item_sold = t.ItemSold();
			String amount = t.Amount();
			String citem_sold = t.CItemSold();
			String camount = t.CAmount();
			String amount_collected = t.AmountCollected();
			String commision = t.Commision();
			String tdate = t.TDate();
			String ctype = t.CType();
			counter++;
			
			double iamount = Double.parseDouble(amount);
			double ciamount= Double.parseDouble(camount);
			double iamount_collected = Double.parseDouble(amount_collected);
			double icommission = Double.parseDouble(commision);
			dispatch = strtotime(dispatch_time);
			jstart = strtotime(time_in);
			jend = strtotime(time_out);
			job_time = jend - jstart;
                mbody = combinestring(mbody,"<time_entry>\n<callslip>\n"+callslip+"\n</callslip>\n<customer>\n"+customer+"\n</customer>\n<dispatched>\n"+formatATimeString(dispatch)+"\n</dispatched>\n<time_in>\n"+formatATimeString(jstart)+"\n</time_in>\n<time_out>\n"+formatATimeString(jend)+"\n</time_out>\n<time_on_job>\n"+formatTimeString(job_time)+"\n</time_on_job>\n<travel_time>\n"+formatTimeString(travel_time)+"\n</travel_time>\n<non_comm_item_sold>\n"+item_sold+"\n</non_comm_item_sold>\n<non_comm_amount>\n"+amount+"\n</non_comm_amount>\n<comm_item_sold>\n"+citem_sold+"\n</comm_item_sold>\n<comm_amount>\n"+camount+"\n</comm_amount>\n<amount_collected>\n"+amount_collected+"\n</amount_collected>\n<commision>\n"+commision+"\n</commision>\n<call_type>\n"+ctype+"\n</call_type>\n</time_entry>\n");

		}
		}
		mbody = combinestring(mbody,"</time>\n");
		out.println(mbody);
		con.close();
	}

private void doUploadEquipment(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		int servsync=0;
		int equipnum=0;
                int ecustnum=0;
                String brand=null;
                String modelnum=null;
                String serialnum=null;
                String filter=null;
                String enotes=null;
                String type=null;
		String seer=null;
		String btuout=null;
            String mbody = "";
            String listdate = req.getParameter("listdate");
	    String dblistdate= doFormatDateDb(getDateDb(listdate));
		String custsitenum="";
		String sitenum="";
		String remotecrecnum="";
/////////////////////////////////////////////////////////
// Here is where we get main server information
////////////////////////////////////////////////////////
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
	printHeader(req, res, out, username);
	Statement stmtr = conu.createStatement();
	
	int custnum=0;

/////////////////////////////////////////////////////////
// Here is where we get all unsynced equipment records
////////////////////////////////////////////////////////

                Vector v;
        	v = UniEquip.getUnSyncedItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniEquip t = (UniEquip) v.elementAt(i);
			
		servsync=t.getServSync();
		equipnum=t.getId();
		custsitenum=t.getCustSite();
		sitenum=t.getSiteNum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		enotes=t.getNotes();
		type=t.getEtype();
		seer=t.getCSeer();
		btuout=t.getBtuOut();

		

// OK we have the local equipment - now get custsite and sitenum if not present
// Now check server for customer - we need record number

                Vector vc;
                vc = UniCustomer.getCustNumSite(conu,custsitenum,sitenum);
		if (vc.size()>0) {
                for (int ic = 0 ; ic < vc.size(); ic++)
                {
                       	UniCustomer tc = (UniCustomer) vc.elementAt(ic);
			remotecrecnum = tc.getCusNum();
		}
				} else {

// get all customer info from local machine
		Vector ve;
                ve = UniCustomer.getIndItem(con, custnum);
                int counter=0;
                String custtype = null;
                for (int ie = 0 ; ie < ve.size(); ie++)
                {
                        UniCustomer te = (UniCustomer) ve.elementAt(ie);
                    	custtype = te.getCustType();
			String cname=te.getCustomerName();
			String address1=te.getAddress1();
			String address2=te.getAddress2();
			String city =te.getCity();
			String state=te.getState();
			String zip=te.getZip();
			String homephone=te.getHomePhone();
			String altphone=te.getAltPhone();
			String cust_notes=te.getCustomerNotes();
			String custsite=te.getCustSite();
			sitenum=te.getSiteNum();
			String cemail=te.getCEmail();
			
// send to remote server
		UniCustomer.addCustomer(conu, cname, address1, address2, city, state, zip, homephone, altphone, cust_notes, cemail, custsite, sitenum, custtype);	
		}	
	

// try again and get record number
                vc = UniCustomer.getCustNumSite(conu,custsitenum,sitenum);
		if (vc.size()>0) {
                for (int ic = 0 ; ic < vc.size(); ic++)
                {
                       	UniCustomer tc = (UniCustomer) vc.elementAt(ic);
			remotecrecnum = tc.getCusNum();
		}

		}
	}

// now put the new equipment record onto the server

		UniEquip.AddItem(conu,Integer.parseInt(remotecrecnum),brand,modelnum,serialnum, filter, enotes, type, seer, btuout, custsitenum, sitenum, servsync);

// Turn on servsync flag - make sure record flag is now turned on

	//UniEquipment.UpdateServSyncOn(con, equipnum );

//this closes getting all preventative agreements
		}
	out.println("</html>");
	}

private void doUploadPreventative(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		int tempcontnum;
       		int contnum =0; 
		int servsync=0;
                int eenum=0;
                int ecustnum=0;
                String brand=null;
                String modelnum=null;
                String serialnum=null;
                String filter=null;
                String enotes=null;
                String type=null;
                int enum1 =0;
                int enum2 = 0;
                int enum3 = 0;
                int enum4 = 0;
                int enum5 = 0;
                int enum6 = 0;
                int enum7 = 0;
                int enum8 = 0;
                int enum9 = 0;
                int enum10 =0;
                String aservice  = null;
                String startdate = null;
                String enddate = null;
                int term = 0;
                String cost = null;
                String notes = null;
                String agrdate = null;
                int vperyear = 0;
		String visit1=null;
		String visit2=null;
		String visit3=null;
		String visit4=null;
		String visit5=null;
		String visit6=null;
            String mbody = "";
            String listdate = req.getParameter("listdate");
	    String dblistdate= doFormatDateDb(getDateDb(listdate));
		String custsitenum="";
		String sitenum="";
		String remotecrecnum="";
/////////////////////////////////////////////////////////
// Here is where we get main server information
////////////////////////////////////////////////////////
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
	printHeader(req, res, out, username);
	Statement stmtr = conu.createStatement();
	
	int custnum;
	String callslip="";
	String cdate="";
	int equip1, equip2, equip3, equip4;
	String reason="";
	String services="";
	String recommendations="";
	String rscheduled="";
	int remotecustnum=0;
	int remoterecnum=0;
	String charges="";
	String collected="";
	String crectype="";
	String techid="";
	int followup=0;
	String sequip1="";
	String sequip2="";
	String sequip3="";
	String sequip4="";
	String custsite="";
	
		
/////////////////////////////////////////////////////////
// Here is where we get all the preventatives for the day
////////////////////////////////////////////////////////

                Vector v;
        	v = UniPagreement.getUnSyncedItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniPagreement t = (UniPagreement) v.elementAt(i);
			
                enum1=t.getEnum1();
                enum2=t.getEnum2();
                enum3=t.getEnum3();
                enum4=t.getEnum4();
                enum5=t.getEnum5();
                enum6=t.getEnum6();
                enum7=t.getEnum7();
                enum8=t.getEnum8();
                enum9=t.getEnum9();
                enum10=t.getEnum10();
                aservice=t.getAservice();
                startdate=t.getStartdate();
		tempcontnum=t.getContNum();
                enddate =t.getEnddate();
                term =t.getTerm();
                cost = t.getCost();
		custnum = t.getCustnum();
                notes = t.getNotes();
                agrdate = t.getAgrdate();
                vperyear = t.getVperyear();
		visit1=t.getVisit1();
		visit2=t.getVisit2();
		visit3=t.getVisit3();
		visit4=t.getVisit4();
		visit5=t.getVisit5();
		visit6=t.getVisit6();
		servsync=t.getServsync();
		custsite=t.getCustSite();
		sitenum=t.getSiteNum();
		techid=t.getTechId();

// OK we have the local pagreement


// Now get customer number and site number

		Vector vci;
                vci = UniCustomer.getIndItem(con, custnum);
                int cicounter=0;
                for (int ici = 0 ; ici < vci.size(); ici++)
                {
                        UniCustomer tci = (UniCustomer) vci.elementAt(ici);
			custsitenum=tci.getCustSite();
			sitenum=tci.getSiteNum();
		}


// Now check server for customer - we need record number

                Vector vc;
                vc = UniCustomer.getCustNumSite(conu,custsitenum,sitenum);
		if (vc.size()>0) {
                for (int ic = 0 ; ic < vc.size(); ic++)
                {
                       	UniCustomer tc = (UniCustomer) vc.elementAt(ic);
			remotecrecnum = tc.getCusNum();
			custsite=tc.getCustSite();
			sitenum=tc.getSiteNum();
		}
				} else {

// get all customer info from local machine
		Vector ve;
                ve = UniCustomer.getIndItem(con, custnum);
                int counter=0;
                String custtype = null;
                for (int ie = 0 ; ie < ve.size(); ie++)
                {
                        UniCustomer te = (UniCustomer) ve.elementAt(ie);
                    	custtype = te.getCustType();
			String cname=te.getCustomerName();
			String address1=te.getAddress1();
			String address2=te.getAddress2();
			String city =te.getCity();
			String state=te.getState();
			String zip=te.getZip();
			String homephone=te.getHomePhone();
			String altphone=te.getAltPhone();
			String cust_notes=te.getCustomerNotes();
			custsite=te.getCustSite();
			sitenum=te.getSiteNum();
			String cemail=te.getCEmail();
			
// send to remote server
		UniCustomer.addCustomer(conu, cname, address1, address2, city, state, zip, homephone, altphone, cust_notes, cemail, custsite, sitenum, custtype);	
		}	
	

// try again and get record number
                vc = UniCustomer.getCustNumSite(conu,custsitenum,sitenum);
		if (vc.size()>0) {
                for (int ic = 0 ; ic < vc.size(); ic++)
                {
                       	UniCustomer tc = (UniCustomer) vc.elementAt(ic);
			remotecrecnum = tc.getCusNum();
		}

		}
	}

// now put the new preventative agreement onto the server
		String tenum1 = ""+enum1+"";
		String tenum2 = ""+enum2+"";
		String tenum3 = ""+enum3+"";
		String tenum4 = ""+enum4+"";
		String tenum5 = ""+enum5+"";
		String tenum6 = ""+enum6+"";
		String tenum7 = ""+enum7+"";
		String tenum8 = ""+enum8+"";
		String tenum9 = ""+enum9+"";
		String tenum10 = ""+enum10+"";
                UniPagreement.AddItem(conu, custnum, tenum1, tenum2, tenum3, tenum4, tenum5, tenum6, tenum7, tenum8, tenum9, tenum10, aservice, startdate, enddate, term, cost, notes, agrdate, vperyear, visit1, visit2, visit3, visit4, visit5, visit6, servsync, custsite, sitenum, techid );

// Turn on servsync flag - make sure record flag is now turned on

//		UniPagreement.UpdateServSyncOn(con, contnum);

//this closes getting all preventative agreements
		}
	out.println("</html>");
	}


private void doDownloadInspections(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
            String mbody = "";
            String custsitenum  = req.getParameter("custsitenum");
            String sitenum = req.getParameter("sitenum");
            String custnum = req.getParameter("custnum");
/////////////////////////////////////////////////////////
// Here is where we get main server information
////////////////////////////////////////////////////////
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotecrecnum="";
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname, dbuser, dbpasswd);
	printHeader(req, res, out, username);
	int servsync=0;
	int equipnum=0;
	String brand="";
	String modelnum="";
	String serialnum="";
	String filter="";
	String enoutes="";
	String type="";
	String seer="";
	String btuout="";
	String notes="";
	
	int eremote = 0;
	int esynced = 0;

                Vector v;
        	v = UniEquip.getCustomerItems(conu, custsitenum, sitenum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniEquip t = (UniEquip) v.elementAt(i);
			
		servsync=t.getServSync();
		equipnum=t.getId();
		custsitenum=t.getCustSite();
		sitenum=t.getSiteNum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		notes=t.getNotes();
		type=t.getEtype();
		seer=t.getCSeer();
		btuout=t.getBtuOut();
		eremote++;
// Now we have remote - now let's check the local database for an exact match
// 

String tserialnum="";
if (serialnum!=null) {                                
	tserialnum = serialnum.replaceAll("'","''");
                    }
		Statement stmt = con.createStatement();
		ResultSet rsu = stmt.executeQuery("SELECT enum  FROM equipment where brand='"+brand+"' and modelnum like '"+modelnum+"' and serialnum like '"+tserialnum+"' and notes like '"+notes+"' and etype='"+type+"' ORDER BY enum;");
		if (!rsu.first()) {
//////////////////////////////////////////////
// Not on server - find customer number on localmachine
/////////////////////////////////////////////

	Vector vc;
	vc = UniCustomer.getCustNumSite(con,custsitenum,sitenum);
	if (vc.size()>0) {
		for (int ic = 0 ; ic < vc.size(); ic++)
		{
		UniCustomer tc = (UniCustomer) vc.elementAt(ic);
		remotecrecnum = tc.getCusNum();
		}
//////////////////////////////////////////////
// No Match - Add to local machine
/////////////////////////////////////////////
				String tmodelnum="";
				if (modelnum!=null) {
				tmodelnum = modelnum.replaceAll("'","''");
						}
				String ttserialnum="";
				if (serialnum!=null) {
				ttserialnum = serialnum.replaceAll("'","''");
						}
		UniEquip.AddItem(con,Integer.parseInt(remotecrecnum),brand,tmodelnum,ttserialnum, filter, notes, type, seer, btuout, custsitenum, sitenum, 2);
		esynced++;
		}
	}
	}
	SyncCustInspection slc = new SyncCustInspection(con, conu, custsitenum, sitenum);
		out.println("<br>Number of pieces of equipment on server was: "+eremote+"<br>");
		out.println("Number of pieces of equipment synced to laptop was: "+esynced+"<br>");
		out.println("Missing Inspections or now downloaded<br>");
                out.println("<br><br><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">Click here to continue</a>");
	out.println("</html>");
	}

private void doDownloadCallSlips(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
            String mbody = "";
            String custsitenum  = req.getParameter("custsitenum");
            String sitenum = req.getParameter("sitenum");
            String custnum = req.getParameter("custnum");
/////////////////////////////////////////////////////////
// Here is where we get main server information
////////////////////////////////////////////////////////
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotecrecnum="";
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname, dbuser, dbpasswd);
	printHeader(req, res, out, username);
	int servsync=0;
	int equipnum=0;
	String brand="";
	String modelnum="";
	String serialnum="";
	String filter="";
	String enoutes="";
	String type="";
	String seer="";
	String btuout="";
	String notes="";
	
	int eremote = 0;
	int esynced = 0;

                Vector v;
        	v = UniEquip.getCustomerItems(conu, custsitenum, sitenum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniEquip t = (UniEquip) v.elementAt(i);
			
		servsync=t.getServSync();
		equipnum=t.getId();
		custsitenum=t.getCustSite();
		sitenum=t.getSiteNum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		notes=t.getNotes();
		type=t.getEtype();
		seer=t.getCSeer();
		btuout=t.getBtuOut();
		eremote++;
// Now we have remote - now let's check the local database for an exact match
// 

String tserialnum="";
if (serialnum!=null) {                                
	tserialnum = serialnum.replaceAll("'","''");
                    }
		Statement stmt = con.createStatement();
		ResultSet rsu = stmt.executeQuery("SELECT enum  FROM equipment where brand='"+brand+"' and modelnum like '"+modelnum+"' and serialnum like '"+tserialnum+"' and notes like '"+notes+"' and etype='"+type+"' ORDER BY enum;");
		if (!rsu.first()) {
//////////////////////////////////////////////
// Not on server - find customer number on localmachine
/////////////////////////////////////////////

	Vector vc;
	vc = UniCustomer.getCustNumSite(con,custsitenum,sitenum);
	if (vc.size()>0) {
		for (int ic = 0 ; ic < vc.size(); ic++)
		{
		UniCustomer tc = (UniCustomer) vc.elementAt(ic);
		remotecrecnum = tc.getCusNum();
		}
//////////////////////////////////////////////
// No Match - Add to local machine
/////////////////////////////////////////////
				String tmodelnum="";
				if (modelnum!=null) {
				tmodelnum = modelnum.replaceAll("'","''");
						}
				String ttserialnum="";
				if (serialnum!=null) {
				ttserialnum = serialnum.replaceAll("'","''");
						}
		UniEquip.AddItem(con,Integer.parseInt(remotecrecnum),brand,tmodelnum,ttserialnum, filter, notes, type, seer, btuout, custsitenum, sitenum, 2);
		esynced++;
		}
	}
	}
		SyncCustCallslip slc = new SyncCustCallslip(con, conu, custsitenum, sitenum);
		out.println("<br>Number of pieces of equipment on server was: "+eremote+"<br>");
		out.println("Number of pieces of equipment synced to laptop was: "+esynced+"<br>");
		out.println("Missing Callslips are now downloaded<br>");
                out.println("<br><br><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">Click here to continue</a>");
		out.println("</html>");
	}

private void doDownloadEquipment(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
            String mbody = "";
            String custsitenum  = req.getParameter("custsitenum");
            String sitenum = req.getParameter("sitenum");
            String custnum = req.getParameter("custnum");
/////////////////////////////////////////////////////////
// Here is where we get main server information
////////////////////////////////////////////////////////
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotecrecnum="";
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname, dbuser, dbpasswd);
	printHeader(req, res, out, username);
	int servsync=0;
	int equipnum=0;
	String brand="";
	String modelnum="";
	String serialnum="";
	String filter="";
	String enoutes="";
	String type="";
	String seer="";
	String btuout="";
	String notes="";
	
	int eremote = 0;
	int esynced = 0;

                Vector v;
        	v = UniEquip.getCustomerItems(conu, custsitenum, sitenum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniEquip t = (UniEquip) v.elementAt(i);
			servsync=t.getServSync();
			equipnum=t.getId();
			custsitenum=t.getCustSite();
			sitenum=t.getSiteNum();
			brand=t.getBrand();
			modelnum=t.getModelnum();
			serialnum=t.getSerialnum();
			filter=t.getFilter();
			notes=t.getNotes();
			type=t.getEtype();
			seer=t.getCSeer();
			btuout=t.getBtuOut();
			eremote++;
			// Now we have remote - now let's check the local database for an exact match
			// 
			String tserialnum="";
			if (serialnum!=null) {                                
				tserialnum = serialnum.replaceAll("'","''");
			}
			Statement stmt = con.createStatement();
			ResultSet rsu = stmt.executeQuery("SELECT enum  FROM equipment where brand='"+brand+"' and modelnum like '"+modelnum+"' and serialnum like '"+tserialnum+"' and notes like '"+notes+"' and etype='"+type+"' ORDER BY enum;");
			if (!rsu.first()) {
				//////////////////////////////////////////////
				// Not on server - find customer number on localmachine
				/////////////////////////////////////////////
				Vector vc;
				vc = UniCustomer.getCustNumSite(con,custsitenum,sitenum);
				if (vc.size()>0) {
					for (int ic = 0 ; ic < vc.size(); ic++)
					{
						UniCustomer tc = (UniCustomer) vc.elementAt(ic);
						remotecrecnum = tc.getCusNum();
					}
					//////////////////////////////////////////////
					// No Match - Add to local machine
					/////////////////////////////////////////////
					String tmodelnum="";
					if (modelnum!=null) {
						tmodelnum = modelnum.replaceAll("'","''");
							}
							String ttserialnum="";
							if (serialnum!=null) {
								ttserialnum = serialnum.replaceAll("'","''");
							}
							UniEquip.AddItem(con,Integer.parseInt(remotecrecnum),brand,tmodelnum,ttserialnum, filter, notes, type, seer, btuout, custsitenum, sitenum, 2);
							esynced++;
				}
			}
		}
		out.println("<br>Number of pieces of equipment on server was: "+eremote+"<br>");
		out.println("Number of pieces of equipment synced to laptop was: "+esynced+"<br>");
                out.println("<br><br><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">Click here to continue</a>");
		out.println("</html>");
		}

private void doUploadCallslipDaily(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
            String mbody = "";
            String listdate = req.getParameter("listdate");
	    String dblistdate= doFormatDateDb(getDateDb(listdate));
		String custsitenum="";
		String sitenum="";
		String remotecrecnum="";
/////////////////////////////////////////////////////////
// Here is where we get main server information
////////////////////////////////////////////////////////
	String dbserver=doGetDbServer();
	String dbpasswd=doGetDbPassword();
	String dbuser=doGetDbUser();
	String dbname=doGetDbName();
	String localdate=null;
	String remotedate=null;
	String protocol = (String) config.getInitParameter("db.protocol");
	String subProtocol = (String) config.getInitParameter("db.subprotocol");
	conu = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname, dbuser, dbpasswd);
	printHeader(req, res, out, username);



	Statement stmtr = conu.createStatement();
        SyncCustomer sc = new SyncCustomer(con,conu);
	out.println("Customer Sync Complete\n");
	SyncEquip se = new SyncEquip(con,conu);
	out.println("Equipment Sync Complete\n");
	SyncPagreement sp = new SyncPagreement(con,conu);
	out.println("Preventative Sync Complete\n");
	SyncTimeSheets st = new SyncTimeSheets(con,conu);
	out.println("Time Sheet Sync Complete\n");
	SyncQuotes sq = new SyncQuotes(con,conu);
	out.println("Quote Sync Complete\n");
	SyncWorksheets sw = new SyncWorksheets(con,conu);
		SyncCallNotes scn=new SyncCallNotes(con,conu);
	out.println("Callslip Notes Sync Complete<br>");
	SyncInspectNotes sin=new SyncInspectNotes(con,conu);
	out.println("Inspection Notes Sync Complete<br>");

	int ocrecnum;	
	int custnum;
	String callslip="";
	String cdate="";
	int equip1, equip2, equip3, equip4;
	String reason="";
	String services="";
	String recommendations="";
	String rscheduled="";
	int remotecustnum=0;
	int remoterecnum=0;
	String charges="";
	String collected="";
	String crectype="";
	String techid="";
	String notes="";
	int followup=0;
	String sequip1="";
	String sequip2="";
	String sequip3="";
	String sequip4="";
	String parts="";
		
/////////////////////////////////////////////////////////
// Here is where we get all the Callslips  for the day
////////////////////////////////////////////////////////

                Vector v;
                //v = UniCallslip.getAllDateItems(con,doFormatDateDb(getDateDb(listdate)));
                v = UniCallslip.getUnSyncedItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCallslip t = (UniCallslip) v.elementAt(i);

		custnum=t.getCustnum();
		callslip=t.getCallslip();
		cdate=t.getCdate();
		equip1=t.getEquip1();
		equip2=t.getEquip2();
		equip3=t.getEquip3();
		equip4=t.getEquip4();
		reason=t.getReason();
		sequip1=""+equip1+"";
		sequip2=""+equip2+"";
		sequip3=""+equip3+"";
		sequip4=""+equip4+"";
		services=t.getServices();
		recommendations=t.getRecommendations();
		rscheduled=t.getRscheduled();
		charges=t.getCharges();
		collected=t.getCollected();
		notes=t.getNotes();
		followup=t.getFollowup();
		custsitenum=t.getCustSite();
		sitenum=t.getSiteNum();
		techid=t.getTechID();
		crectype=t.getCrecType();
		ocrecnum=t.getCrecnum();
		parts=t.getParts();
// OK we have the local callslip
// Now check server for customer - we need record number

                Vector vc;
                vc = UniCustomer.getCustNumSite(conu,custsitenum,sitenum);
		if (vc.size()>0) {
                for (int ic = 0 ; ic < vc.size(); ic++)
                {
                       	UniCustomer tc = (UniCustomer) vc.elementAt(ic);
			remotecrecnum = tc.getCusNum();
		}
				} else {

// get all customer info from local machine
		Vector ve;
                ve = UniCustomer.getIndItem(con, custnum);
                int counter=0;
                String custtype = null;
                for (int ie = 0 ; ie < ve.size(); ie++)
                {
                        UniCustomer te = (UniCustomer) ve.elementAt(ie);
                    	custtype = te.getCustType();
			String cname=te.getCustomerName();
			String address1=te.getAddress1();
			String address2=te.getAddress2();
			String city =te.getCity();
			String state=te.getState();
			String zip=te.getZip();
			String homephone=te.getHomePhone();
			String altphone=te.getAltPhone();
			String cust_notes=te.getCustomerNotes();
			String custsite=te.getCustSite();
			sitenum=te.getSiteNum();
			String cemail=te.getCEmail();
			
// send to remote server
		UniCustomer.addCustomer(conu, cname, address1, address2, city, state, zip, homephone, altphone, cust_notes, cemail, custsite, sitenum, custtype);	
		}	
	
// try again and get record number
                vc = UniCustomer.getCustNumSite(conu,custsitenum,sitenum);
		if (vc.size()>0) {
                for (int ic = 0 ; ic < vc.size(); ic++)
                {
                       	UniCustomer tc = (UniCustomer) vc.elementAt(ic);
			remotecrecnum = tc.getCusNum();
		}

		}
	}

// Check for same callslip already on server



// now put the new callslip onto the server
		UniCallslip.AddItem(conu, Integer.parseInt(remotecrecnum), callslip, cdate, sequip1, sequip2, sequip3, sequip4, reason, services, recommendations, rscheduled, charges, collected, notes, followup, custsitenum, sitenum, crectype, techid, parts);
// now set the servsync to ON for this record
		UniCallslip.getServSync(con, ocrecnum);
// now get the record that was just added
// match on highest record with techid, remotecrecnum, cdate


                Vector vnc;
                vnc = UniCallslip.getIndItem(conu, remotecrecnum, techid, cdate, callslip);
                for (int inc = 0 ; inc < vnc.size(); inc++)
                {
                       	UniCallslip tnc = (UniCallslip) vnc.elementAt(inc);
		remotecustnum=tnc.getCustnum();
		remoterecnum=tnc.getCrecnum();
		}


// now get and upload inventory use


// now get and upload charges
	Vector vsc;
        vsc = UniSvcCharges.getAllItems(con,callslip);

                for (int isc = 0 ; isc < vsc.size(); isc++)
                {
                UniSvcCharges tsc = (UniSvcCharges) vsc.elementAt(isc);
                int recnum=tsc.getRecnum();
                String ccallslip=tsc.getCallslip();
                Double quant=tsc.getQuant();
                String descript=tsc.getDescript();
                Double price=tsc.getPrice();
                Double total=tsc.getTotal();
		int frcode = tsc.getFrcode();
		String squant=""+quant+"";
		String sprice=""+price+"";
 		UniSvcCharges.AddItem(conu, ccallslip, descript, squant, sprice,username, 0, frcode);
		}

//this closes getting all callslips
		}
	out.println("</html>");
	}

  private void doSendDailyTimeEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
        String action = req.getParameter("action");
        String menu = req.getParameter("action");
  
 ServsysTimeSheet.getIndividualItem (con, req,res, out, session, username, classdir, action,  menu);     

  }


  
  public static String combinestring(String oldstring, String newstring)
  {
   
      String changedstring = oldstring.concat(newstring);
      return changedstring;
  }
 
  public static void doMailSend(String smtpServer, String to, String from, String subject, String body, String smtpuser, String smtppassword)
  {
    try
    {
      Properties props = System.getProperties();

      // -- Attaching to default Session, or we could start a new one --

      props.put("mail.smtp.host", smtpServer);
      props.put("mail.smtp.auth", "true");
      Session session = Session.getDefaultInstance(props, null);


      // -- Create a new message --
      Message msg = new MimeMessage(session);

      // -- Set the FROM and TO fields --
      msg.setFrom(new InternetAddress(from));
      msg.setRecipients(Message.RecipientType.TO,
        InternetAddress.parse(to, false));

      // -- We could include CC recipients too --
      // if (cc != null)
      // msg.setRecipients(Message.RecipientType.CC
      // ,InternetAddress.parse(cc, false));

      // -- Set the subject and body text --
      msg.setSubject(subject);
	msg.setContent(body,"text/html");
      //msg.setText(body);

      // -- Set some other header information --
      msg.setHeader("X-Mailer", "LOTONtechEmail");
      msg.setSentDate(new Date());
      // -- Send the message --
      //Transport.send(msg);
	msg.saveChanges();
	Transport trans = session.getTransport("smtp");
      	trans.connect(smtpServer, smtpuser, smtppassword);
	trans.sendMessage(msg, msg.getAllRecipients());
	trans.close();

      System.out.println("Message sent OK.");
    }
    catch (Exception ex)
    {
      ex.printStackTrace();
    }
  }


  private void doStartKeyCodeLookup(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Inventory Item Search - TMS</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=keycodecheck\" name=\"addcat\">");
	out.println("<p>Item Description :");
	out.println("<input type=\"text\" name=\"searchitem\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}


    private void doKeyCodeCheck(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
            String searchitem = req.getParameter("searchitem");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Keycode Search Result</title>");
            out.println("</head>");
            out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
            out.println(searchitem+"<br>");
            out.println("<table border=1 width=100%>");
            out.println("<th>Key Code</th><th>Part #</th><th>Sort</th><th>Description</th><th>Manuf.</th><th>OH Quantity</th><th>Cost</th><th>Sell Price</th></tr>");
            //$query = "SELECT * FROM inv_keycodes where description like \"%$searchitem%\"";
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM inv_keycodes where description like '%"+searchitem+"%'");
		
		 while(rs.next())
                {
		String keycode=rs.getString("keycodep");
                String part_number=rs.getString("part_number");
                String sort_desc=rs.getString("sort_desc");
                String description=rs.getString("description");
                String manu=rs.getString("manu");
                String oh_qty=rs.getString("oh_qty");
                String part_cost=rs.getString("part_cost");
                String sell_price=rs.getString("sell_price");
		out.println("<tr><td>"+keycode+"</td><td>"+part_number+"</td><td>"+sort_desc+"</td><td>"+description+"</td><td>"+manu+"</td><td>"+oh_qty+"</td><td>"+part_cost+"</td><td>"+sell_price+"</td></tr>");
		}

            out.println("</table>");
            
		con.close();
    }
  
private void doShowInvCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		String tquant=null;
		String itemname=null;
		String descript=null;
		String minquant=null;
		String partnumber = null;
		String catnum=req.getParameter("catnum");
		String keyprefix=req.getParameter("keyprefix");
		out.println("<table width=\"100%\" border=0>");
		out.println("<tr><td align=left>");
             //   out.println("<a  href=\""+classdir+"UniCash?action=addinvitem&catnum="+catnum+" \">Add an item in this category</a><br>");
		out.println("</td><td align=right>");
                out.println("<a  href=\""+classdir+"UniCash?action=truckstockrequestcat&catnum="+catnum+" target=_blank\">Category Truck Stock Request</a><br>");
		out.println("</td></tr><tr><td>");
		out.println("<a href=\""+ classdir + "UniCash?action=showcatlist\">Return To Category List</a><br>");
		out.println("</td><td align=right>");
                out.println("<a  href=\""+classdir+"UniCash?action=trucksinglecat&catnum="+catnum+" target=_blank\">Category Truck Stock Report</a><br>");
		out.println("</td></tr><tr><td>");
		out.println("");
		out.println("</td><td align=right>");
                out.println("<a  href=\""+classdir+"UniCash?action=emtrucksinglecat&catnum="+catnum+" target=_blank\">Email Category Truck Stock Report</a><br>");
		out.println("</td></tr></table>");
        	out.println("<table border=1 width=100%>");
                out.println("<th>Item Name</th><th>KeyCode</th><th>Part Number</th><th>Min Quantity</th><th>Current Count</th>");
		int counter=0;

		Vector v;
		v = InvKeyCodes.getPrefixItems(con, keyprefix);
		for (int i = 0 ; i < v.size(); i++)
                {
		InvKeyCodes t = (InvKeyCodes) v.elementAt(i);
               	int itemnum = t.getCatID();        
		itemname=t.getDescription();
		descript = t.getKeycodep();           // THIS IS KEYCODE
		partnumber = t.getPartNumber();
		//minquant=t.getMinQuant();
		//tquant=t.getTQuant();
		out.println("<tr><td><a href="+classdir+"UniCash?action=showinvdetail&keyprefix="+keyprefix+"&keycode="+descript+"&invcat="+catnum+">"+itemname+"</a></td><td>"+descript+"</td><td>"+partnumber+"</td><td>"+minquant+"</td><td><a href="+classdir+"UniCash?action=editinvitemquant&catnum="+catnum+"&keycode="+descript+">"+tquant+"</a><td><a href="+classdir+"UniCash?action=editinvitem&itemnum="+itemnum+"&catnum="+catnum+"&startpage="+classdir+"UniCash?action=showcatitems>Edit</a></td><tr>");
		}
	out.println("</table><br><br>");
//	out.println("<a  href=\""+classdir+"UniCash?action=addinvitem&catnum="+catnum+" \">Add an item in this category</a>");
		out.println("<br><br><a href=\""+ classdir + "UniCash?action=showcatlist\">Return To Category List</a>");
		con.close();
	}


private void doShowWsPackageCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		int recid=0;
		String pkgID=null;
		String pkgDesc=null;
		int pkgLaborHours=0;
		double pkgPartsCost=0.00;

		String custnum=req.getParameter("custnum");
		String wsnum=req.getParameter("wsnum");
		String adjper=req.getParameter("adjper");
		double dadjper=Double.parseDouble(adjper);
		String tcatnum=req.getParameter("catnum");
		int catnum = Integer.parseInt(tcatnum);
		out.println("<table width=\"100%\" border=0>");
		out.println("<tr><td align=left>");
		out.println("</td>");
		out.println("</tr><tr><td>");
		out.println("<a href=\""+ classdir + "UniCash?action=pkgcatlist&wsnum="+wsnum+"&custnum="+custnum+"\">Return To Category List</a><br>");
		out.println("</td></tr></table>");
        	out.println("<table border=1 width=100%>");
                out.println("<th>Package ID</th><th>Description</th><th>Labor Hours</th><th>Parts Cost</th>");
		int counter=0;

                Vector v;
                v = UniPkgItems.getAllItems(con,catnum);
		recid=0;
		pkgID=null;
		pkgDesc=null;
		pkgLaborHours=0;
		pkgPartsCost=0.00;

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniPkgItems t = (UniPkgItems) v.elementAt(i);
				recid=t.getrecID();
				pkgID=t.getPkgID();
				pkgDesc=t.getPkgDesc();
				pkgLaborHours=t.getPkgLaborHours();
				pkgPartsCost=t.getPkgPartsCost()*dadjper;
				BigDecimal d = new BigDecimal(pkgPartsCost);
				d = d.setScale(2, BigDecimal.ROUND_HALF_UP);
		out.println("<tr><td>"+pkgID+"</td><td>"+pkgDesc+"</td><td>"+pkgLaborHours+"</td><td>"+d+"</td><td><a href="+classdir+"UniCash?action=addwspkgitem&custnum="+custnum+"&wsnum="+wsnum+"&pkgID="+pkgID+"&adjper="+adjper+"&pkgDesc="+pkgDesc+"&pkgLaborHours="+pkgLaborHours+"&pkgPartsCost="+pkgPartsCost+"&startpage="+classdir+"UniCash?action=showwspg>Add to Worksheet</a></td><tr>");
		}

		out.println("</table><br><br>");
		out.println("<a href=\""+ classdir + "UniCash?action=pkgcatlist&wsnum="+wsnum+"&custnum="+custnum+"\">Return To Category List</a><br>");
		con.close();
	}

private void doServProposalReport(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String startdate = req.getParameter("startdate");
		String enddate = req.getParameter("enddate");
		String tnolost = req.getParameter("nolost");
		int qnum;
		double totinvestment=0.00;
		double ptotal=0.00;
		int custnum;
		String qdesc="";
		String qdate="";
		String cname="";
		String city="";
		int nolost;
		String hphone="";
		double lostdol=0.00;
		double instdol=0.00;
		double solddol=0.00;
		double prevdol=0.00;
		double totdol=0.00;
		double newdol=0.00;
		double presdol=0.00;
		String tech_name="";
		String qstatus="";
		tech_name = doGetTechInfo_name(username);
		out.println("<html><basefont size=2>");
		out.println("<head><title>Service Proposal Report</title>");
		doStyleSheet(req, res, out, session, username);
		doMHeader(req, res, out, session, username);
		out.println("</head>");
		

		out.println("<h4 align=CENTER>Service Proposal Report from "+startdate+" to "+enddate+"<br>Comfort Specialist: "+tech_name+"</h4>");
        	out.println("<table border=1 width=100% fontsize=2>");
                out.println("<th>Date</th><th>Customer</th><th>City</th><th>Phone</th><th>Description</th><th>Quote</th><th>Status</th>");
		int counter=0;
                Vector v;
                v = ServPropReport.getAllItems(con,doFormatDateDb(getDateDb(startdate)),doFormatDateDb(getDateDb(enddate)));
	
                for (int i = 0 ; i < v.size(); i++)
                {
                       	ServPropReport t = (ServPropReport) v.elementAt(i);
				qdesc=t.getQDesc();
				qdate=doFormatDate(getDate(t.getQDate()));
				cname=t.getCName();
				city=t.getCity();
				hphone=t.getHomePhone();
				qnum=t.getQNum();
				qstatus=t.getQStatus();

		totinvestment=0.00;
                Vector vp;
                vp = ServQuoteParts.getAllItems(con,qnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                ServQuoteParts tp = (ServQuoteParts) vp.elementAt(j);
		ptotal=tp.getQuoteTotal();
		totinvestment=totinvestment+ptotal;
		}

			if (!qstatus.equalsIgnoreCase("test"))
	                        {
			if (qstatus.equalsIgnoreCase("installed"))
				{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");
				instdol=instdol+ptotal;
				totdol=totdol+ptotal;
				}
			if (qstatus.equalsIgnoreCase("sold"))
			{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");
				solddol=solddol+ptotal;
				totdol=totdol+ptotal;
				}
			if (qstatus.equalsIgnoreCase("presented"))
			{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");
				presdol=presdol+ptotal;
				totdol=totdol+ptotal;
				}
			if (qstatus.equalsIgnoreCase("lost")||qstatus.equalsIgnoreCase("lost $"))
			{
				if (tnolost==null) 
					{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");			}
				lostdol=lostdol+ptotal;
				totdol=totdol+ptotal;
				}
			if (qstatus.equalsIgnoreCase("new"))
			{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");
				newdol=newdol+ptotal;
				totdol=totdol+ptotal;
				}
				}
		}
	out.println("</table><br>");
	out.println("Sold Dollars: "+NumberFormat.getCurrencyInstance().format(solddol)+"<br>");
	out.println("Installed Dollars: "+NumberFormat.getCurrencyInstance().format(instdol)+"<br>");
	out.println("Presented Dollars: "+NumberFormat.getCurrencyInstance().format(presdol)+"<br>");
	out.println("New Dollars: "+NumberFormat.getCurrencyInstance().format(newdol)+"<br>");
	out.println("Lost Dollars: "+NumberFormat.getCurrencyInstance().format(lostdol)+"<br>");
	out.println("-----------------------------------------<br>");
	out.println("Total Dollars: "+NumberFormat.getCurrencyInstance().format(totdol)+"<br>");
		con.close();
	}

private void doProposalReport(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String startdate = req.getParameter("startdate");
		String enddate = req.getParameter("enddate");
		String tnolost = req.getParameter("nolost");
		String tnoinstalled = req.getParameter("noinstalled");
		String tnosold = req.getParameter("nosold");
		String tnopresented = req.getParameter("nopresented");
		String tnonew = req.getParameter("nonew");
		int qnum;
		double totinvestment=0.00;
		double ptotal=0.00;
		int custnum;
		String qdesc="";
		String qdate="";
		String cname="";
		String city="";
		int nolost;
		String hphone="";
		double lostdol=0.00;
		double instdol=0.00;
		double solddol=0.00;
		double prevdol=0.00;
		double totdol=0.00;
		double newdol=0.00;
		double presdol=0.00;
		String tech_name="";
		String qstatus="";
		tech_name = doGetTechInfo_name(username);
		out.println("<html><basefont size=2>");
		out.println("<head><title>Proposal Tracking Log</title>");
		doStyleSheet(req, res, out, session, username);
		out.println("</head>");
		doMHeader(req, res, out, session, username);

		//out.println("<h4 align=CENTER>Proposal Report from "+startdate+" to "+enddate+"<br>Comfort Specialist: "+tech_name+"</h4><br>="+tnolost+"=<br>");
		out.println("<h4 align=CENTER>Proposal Report from "+startdate+" to "+enddate+"<br>Comfort Specialist: "+tech_name+"</h4>");
        	out.println("<table border=1 width=100% fontsize=2>");
                out.println("<th>Date</th><th>Customer</th><th>City</th><th>Phone</th><th>Description</th><th>Quote</th><th>Status</th>");
		int counter=0;
                Vector v;
                v = PropReport.getAllItems(con,doFormatDateDb(getDateDb(startdate)),doFormatDateDb(getDateDb(enddate)));
	
                for (int i = 0 ; i < v.size(); i++)
                {
                       	PropReport t = (PropReport) v.elementAt(i);
				qdesc=t.getQDesc();
				qdate=doFormatDate(getDate(t.getQDate()));
				cname=t.getCName();
				city=t.getCity();
				hphone=t.getHomePhone();
				qnum=t.getQNum();
				qstatus=t.getQStatus();

		totinvestment=0.00;
                Vector vp;
                vp = UniQuoteParts.getAllItems(con,qnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniQuoteParts tp = (UniQuoteParts) vp.elementAt(j);
		ptotal=tp.getQuoteTotal();
		totinvestment=totinvestment+ptotal;
		}

			if (!qstatus.equalsIgnoreCase("test"))
	                        {
			if (qstatus.equalsIgnoreCase("installed"))
				{
					if (tnoinstalled!=null)
						{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");
				instdol=instdol+ptotal;
				totdol=totdol+ptotal;
						}
				}
			if (qstatus.equalsIgnoreCase("sold"))
			{
				if (tnosold!=null)
					{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");
				solddol=solddol+ptotal;
				totdol=totdol+ptotal;
				}
			}
			if (qstatus.equalsIgnoreCase("presented"))
			{
				if (tnopresented!=null)
						{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");
				presdol=presdol+ptotal;
				totdol=totdol+ptotal;
						}
				}
			if (qstatus.equalsIgnoreCase("lost")||qstatus.equalsIgnoreCase("lost $"))
			{
				if (tnolost!=null) 
					{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");
					}
				lostdol=lostdol+ptotal;
				totdol=totdol+ptotal;
				}
			if (qstatus.equalsIgnoreCase("new"))
			{
					if (tnonew!=null)
						{
		out.println("<tr><td>"+qdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+qdesc+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td><td>"+qstatus+"<tr>");
				newdol=newdol+ptotal;
				totdol=totdol+ptotal;
						}
				}
				}
		}
	out.println("</table><br>");
	out.println("Sold Dollars: "+NumberFormat.getCurrencyInstance().format(solddol)+"<br>");
	out.println("Installed Dollars: "+NumberFormat.getCurrencyInstance().format(instdol)+"<br>");
	out.println("Presented Dollars: "+NumberFormat.getCurrencyInstance().format(presdol)+"<br>");
	out.println("New Dollars: "+NumberFormat.getCurrencyInstance().format(newdol)+"<br>");
	out.println("Lost Dollars: "+NumberFormat.getCurrencyInstance().format(lostdol)+"<br>");
	out.println("-----------------------------------------<br>");
	out.println("Total Dollars: "+NumberFormat.getCurrencyInstance().format(totdol)+"<br>");
		con.close();
	}

private void doWsReport(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String startdate = req.getParameter("startdate");
		String enddate = req.getParameter("enddate");
		int wsrec;
		int custnum;
		String wsdesc="";
		String wsdate="";
		String cname="";
		String city="";
		String hphone="";
	String tech_name="";
	tech_name = doGetTechInfo_name(username);
		out.println("<html><basefont size=-2>");
		out.println("<html><head><title>Worksheet Tracking Log</title></head>");
		doMHeader(req, res, out, session, username);
		out.println("<html><basefont size=2>");
		out.println("<head><title>WorkSheet Report</title></head>");
		out.println("<h4 align=CENTER>WorkSheet Report from "+startdate+" to "+enddate+"<br>Comfort Specialist: "+tech_name+"</h4>");
        	out.println("<table border=1 width=100% fontsize=2>");
                out.println("<th>Date</th><th>Customer</th><th>City</th><th>Phone</th><th>Description</th>");
		int counter=0;
                Vector v;
                v = WsReport.getAllItems(con,doFormatDateDb(getDateDb(startdate)),doFormatDateDb(getDateDb(enddate)));
	
                for (int i = 0 ; i < v.size(); i++)
                {
                       	WsReport t = (WsReport) v.elementAt(i);
				wsdesc=t.getWsDesc();
				wsdate=doFormatDate(getDate(t.getWsDate()));
				cname=t.getCName();
				city=t.getCity();
				hphone=t.getHomePhone();

		out.println("<tr><td>"+wsdate+"</td><td>"+cname+"</td><td>"+city+"</td><td>"+hphone+"</td><td>"+wsdesc+"</td><tr>");
		}
	out.println("</table><br><br>");
		con.close();
	}


private void doReportPackageCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		int recid=0;
		String pkgID=null;
		String pkgDesc=null;
		int pkgLaborHours=0;
		double pkgPartsCost=0.00;

		//String tcatnum=req.getParameter("catnum");
		int catnum = 0;
        	out.println("<table border=1 width=100%>");
                out.println("<th>Package ID</th><th>Description</th><th>Labor Hours</th><th>Parts Cost</th>");
		int counter=0;

                Vector v;
                v = UniPkgItems.getAll(con);
		recid=0;
		pkgID=null;
		pkgDesc=null;
		pkgLaborHours=0;
		pkgPartsCost=0.00;

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniPkgItems t = (UniPkgItems) v.elementAt(i);
				recid=t.getrecID();
				pkgID=t.getPkgID();
				pkgDesc=t.getPkgDesc();
                                
				pkgLaborHours=t.getPkgLaborHours();
				pkgPartsCost=t.getPkgPartsCost();
		out.println("<tr><td>"+pkgID+"</td><td>"+pkgDesc+"</td><td>"+pkgLaborHours+"</td><td>"+pkgPartsCost+"</td><tr>");
		}

	out.println("</table><br><br>");
        out.println("<br><br><a href=\""+ classdir + "UniCash?action=showpackagecatlist\">Return To Category List</a>");
		con.close();
	}

private void doShowPackageItemListID(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		int recid=0;
		String pkgID=null;
		String pkgDesc=null;
		int pkgLaborHours=0;
		int catnum=0;
		double pkgPartsCost=0.00;
        	out.println("<table border=1 width=100%>");
                out.println("<th>Package ID</th><th>Description</th><th>Labor Hours</th><th>Parts Cost</th>");
		int counter=0;

                Vector v;
                v = UniPkgItems.getAllItems(con);
		recid=0;
		catnum=0;
		pkgID=null;
		pkgDesc=null;
		pkgLaborHours=0;
		pkgPartsCost=0.00;

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniPkgItems t = (UniPkgItems) v.elementAt(i);
				recid=t.getrecID();
				pkgID=t.getPkgID();
				catnum=t.getCatID();
				pkgDesc=t.getPkgDesc();
				pkgLaborHours=t.getPkgLaborHours();
				pkgPartsCost=t.getPkgPartsCost();
		out.println("<tr><td>"+pkgID+"</td><td>"+pkgDesc+"</td><td>"+pkgLaborHours+"</td><td>"+pkgPartsCost+"</td><td><a href="+classdir+"UniCash?action=editpackageitem&source=allpackages&itemnum="+pkgID+"&catnum="+catnum+"&startpage="+classdir+"UniCash?action=showallpackages>Edit</a></td><tr>");
		}

	out.println("</table><br><br>");
		con.close();
	}

private void doShowPackageCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		int recid=0;
		String pkgID=null;
		String pkgDesc=null;
		int pkgLaborHours=0;
		double pkgPartsCost=0.00;

		String tcatnum=req.getParameter("catnum");
		String tadjper=req.getParameter("adjper");
		int catnum = Integer.parseInt(tcatnum);
		double dadjper = Double.parseDouble(tadjper);
		out.println("<table width=\"100%\" border=0>");
		out.println("<tr><td align=left>");
                out.println("<a  href=\""+classdir+"UniCash?action=addpackageitem&catnum="+catnum+"&adjper="+tadjper+" \">Add an item in this category</a><br>");
		out.println("</td>");
		out.println("</tr><tr><td>");
		out.println("<a href=\""+ classdir + "UniCash?action=showpackagecatlist\">Return To Category List</a><br>");
		out.println("</td></tr></table>");
        	out.println("<table border=1 width=100%>");
                out.println("<th>Package ID</th><th>Description</th><th>Labor Hours</th><th>Parts Cost</th>");
		int counter=0;

                Vector v;
                v = UniPkgItems.getAllItems(con,catnum);
		recid=0;
		pkgID=null;
		pkgDesc=null;
		pkgLaborHours=0;
		pkgPartsCost=0.00;

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniPkgItems t = (UniPkgItems) v.elementAt(i);
				recid=t.getrecID();
				pkgID=t.getPkgID();
				pkgDesc=t.getPkgDesc();
				pkgLaborHours=t.getPkgLaborHours();
				pkgPartsCost=t.getPkgPartsCost()*dadjper;
		out.println("<tr><td>"+pkgID+"</td><td>"+pkgDesc+"</td><td>"+pkgLaborHours+"</td><td>"+pkgPartsCost+"</td><td><a href="+classdir+"UniCash?action=editpackageitem&itemnum="+recid+"&catnum="+catnum+"&adjper="+tadjper+"&startpage="+classdir+"UniCash?action=showpackageitems&catnum="+catnum+"&adjper="+tadjper+">Edit</a></td><tr>");
		}

	out.println("</table><br><br>");
	out.println("<a  href=\""+classdir+"UniCash?action=addpackageitem&catnum="+catnum+"&adjper="+tadjper+" \">Add an item in this category</a>");
		out.println("<br><br><a href=\""+ classdir + "UniCash?action=showpackagecatlist\">Return To Category List</a>");
		con.close();
	}


private void doShowQuoteCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		String tquant=null;
		String itemname=null;
		int itemnum=0;
		String investment=null;
		String mannum=null;
		String tcatnum=req.getParameter("catnum");
		int catnum = Integer.parseInt(tcatnum);
		out.println("<table width=\"100%\" border=0>");
		out.println("<tr><td align=left>");
                out.println("<a  href=\""+classdir+"UniCash?action=addquoteitem&catnum="+catnum+" \">Add an item in this category</a><br>");
		out.println("</td>");
		out.println("</tr><tr><td>");
		out.println("<a href=\""+ classdir + "UniCash?action=showquotecatlist\">Return To Category List</a><br>");
		out.println("</td></tr></table>");
        	out.println("<table border=1 width=100%>");
                out.println("<th>Item Name</th><th>Model Number</th><th>Investment</th>");
		int counter=0;

                Vector v;
                v = UniQuoteItem.getAllItems(con,catnum);
                        mannum =null;
			investment=null;
			itemname=null;
			int qcatnum=0;
			itemnum=0;

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniQuoteItem t = (UniQuoteItem) v.elementAt(i);
			itemnum  = t.getItemNum();
			qcatnum  = t.getCatNum();
                        itemname = t.getItemName();
			mannum = t.getManNum();
			investment = t.getInvestment();
		out.println("<tr><td>"+itemname+"</td><td>"+mannum+"</td><td>"+investment+"</td><td><a href="+classdir+"UniCash?action=editquoteitem&itemnum="+itemnum+"&catnum="+qcatnum+"&startpage="+classdir+"UniCash?action=showquotecatitems>Edit</a></td><tr>");
		}

	out.println("</table><br><br>");
	out.println("<a  href=\""+classdir+"UniCash?action=addquoteitem&catnum="+catnum+" \">Add an item in this category</a>");
		out.println("<br><br><a href=\""+ classdir + "UniCash?action=showquotecatlist\">Return To Category List</a>");
		con.close();
	}




  private void doShowStockUsage(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String oldcat = null;
		String keycode=null;
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		String startdate = req.getParameter("startdate");
		String enddate = req.getParameter("enddate");
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Tracking Log</title></head>");
		doMHeader(req, res, out, session, username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Stock Usage</title></head>");
		out.println("<h4 align=CENTER>Inventory Usage Report from "+startdate+" to "+enddate+"<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=1 width=100%>");
		out.println("<th>Item Name</th><th>Key Code</th><th>Date</th><th>Quantity</th><th>Callslip</th>");
 		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery("select * from inv_use where date>='"+doFormatDateDb(getDateDb(startdate))+"' and date<='"+doFormatDateDb(getDateDb(enddate))+"' order by keycode;");
		 while(rs.next())
                {
                String dkeycode=rs.getString("keycode");
                String ditemname=rs.getString("descript");
                String dtransdate=rs.getString("date");
                String dcallslip=rs.getString("callslip");
                String dquantity=rs.getString("quant");
        	out.println("<tr><td>"+ditemname+"</td><td>"+dkeycode+"</td><td>"+dtransdate+"</td><td>"+dquantity+"</td><td>"+dcallslip+"</td></tr>");
        }
		con.close();
	}

    private void doZeroTruckStock(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
	Calendar now = Calendar.getInstance();
	Date date = new Date();
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
	int second = now.get(Calendar.SECOND);
	int year = now.get(Calendar.YEAR);
	int month = now.get(Calendar.MONTH);
	int minute = now.get(Calendar.MINUTE);
	int millisecond = now.get(Calendar.MILLISECOND);
	String oldcat = null;
		Double counttoz=0.00;
		String keycode=null;
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock by Key Code</title></head>");
		doMHeader(req, res, out, session, username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock by Key Code</title></head>");
		out.println("<h4 align=CENTER>Truck Stock Report by Key Code<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=1 width=100%>");
 		Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT inv_cats.category, inv_items.itemnum,invcatnum,itemname,inv_items.description,minquant, sum(inv_detail.quantity) as current_count FROM inv_items, inv_detail, inv_cats where inv_detail.itemnum=inv_items.itemnum and inv_cats.catnum=inv_items.invcatnum GROUP BY inv_items.itemnum ORDER BY inv_items.description, itemname");
	        out.println("<th>Key Code</th><th>Item Name</th><th>Min. Quant</th><th>Current<br>Quantity</th><th>Change</th>");
        	
		 while(rs.next())
                {
				String dcat=rs.getString("category");
			 int itemnum=rs.getInt("inv_items.itemnum");
                String dkeycode=rs.getString("description");
                String ditemname=rs.getString("itemname");
                String dminquant=rs.getString("minquant");
                String dcurrent_count=rs.getString("current_count");
                double minquant = Double.parseDouble(dminquant);
                double current_count=Double.parseDouble(dcurrent_count);
                
                if (current_count!=0) {
			if (current_count>0)
				{
		 	counttoz=0-current_count; 
				}
			if (current_count<0)
				{
		 	counttoz=0-current_count; 
				}
			UniInvDetail.addInvTrans(con, "ZEROINV", itemnum, s, "-", ""+counttoz+"");
		 	if (dkeycode.equalsIgnoreCase("")) { keycode="--"; }
                        else {  keycode=dkeycode; }
        	out.println("<tr><td>"+keycode+"</td><td>"+ditemname+"</td><td>"+dminquant+"</td><td>"+dcurrent_count+"</td><td>"+counttoz+"</td></tr>");
                }
        }
		con.close();
	}

    private void doTruckStockKeyCode(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String oldcat = null;
		String keycode=null;
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock by Key Code</title></head>");
		doMHeader(req, res, out, session, username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock by Key Code</title></head>");
		out.println("<h4 align=CENTER>Truck Stock Report by Key Code<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=1 width=100%>");
 		Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT inv_cats.category, inv_items.itemnum,invcatnum,itemname,inv_items.description,minquant, sum(inv_detail.quantity) as current_count FROM inv_items, inv_detail, inv_cats where inv_detail.itemnum=inv_items.itemnum and inv_cats.catnum=inv_items.invcatnum GROUP BY inv_items.itemnum ORDER BY inv_items.description, itemname");
	        out.println("<th>Key Code</th><th>Item Name</th><th>Min. Quant</th><th>Current<br>Quantity</th></th>");
        	
		 while(rs.next())
                {
		String dcat=rs.getString("category");
                String dkeycode=rs.getString("description");
                String ditemname=rs.getString("itemname");
                String dminquant=rs.getString("minquant");
                String dcurrent_count=rs.getString("current_count");
                double minquant = Double.parseDouble(dminquant);
                double current_count=Double.parseDouble(dcurrent_count);
                
                if (current_count>0) {
		  
		 	if (dkeycode.equalsIgnoreCase("")) { keycode="--"; }
                        else {  keycode=dkeycode; }
        	out.println("<tr><td>"+keycode+"</td><td>"+ditemname+"</td><td>"+dminquant+"</td><td>"+dcurrent_count+"</td></tr>");
                }
        }
		con.close();
	}



  private void doEmStockUsage(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String oldcat = null;
		String keycode=null;
		Format formatter;	
		String mbody=null;
		Calendar now = Calendar.getInstance();
        	Date date = new Date(); 
		//formatter = new SimpleDateFormat("MM-dd-yyyy");
		formatter = new SimpleDateFormat("yyyy-MM-dd");
		//String s = formatter.format(date);
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		String stock_mail_cat = doGetStockMailCat(username);
		mbody="";	
		mbody=combinestring(mbody,"<html><basefont size=-1>");
	//	String startdate = req.getParameter("startdate");
	//	String enddate = req.getParameter("enddate");
            	String s = req.getParameter("listdate");
		mbody=combinestring(mbody,"<html><head><title>Daily Inventory Use Log</title></head>");
		//doMHeader(req, res, out, session, username);
		mbody=combinestring(mbody,"<html><basefont size=-1>");
		mbody=combinestring(mbody,"<html><head><title>Stock Usage</title></head>");
		mbody=combinestring(mbody,"<h4 align=CENTER>Inventory Usage Report for "+s+"<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		mbody=combinestring(mbody,"<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		mbody=combinestring(mbody,"<table border=1 width=100%>");
		mbody=combinestring(mbody,"<th>Item Name</th><th>Key Code</th><th>Date</th><th>Quantity</th><th>Callslip</th>");
 		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery("select * from inv_use where date='"+doFormatDateDb(getDateDb(s))+"' order by keycode;");
		 while(rs.next())
                {
                String dkeycode=rs.getString("keycode");
                String ditemname=rs.getString("descript");
                String dtransdate=rs.getString("date");
                String dcallslip=rs.getString("callslip");
                String dquantity=rs.getString("quant");
		String invloc = rs.getString("invloc");
        	mbody=combinestring(mbody,"<tr><td>"+ditemname+"</td><td>"+dkeycode+"</td><td>"+dtransdate+"</td><td>"+dquantity+"</td><td>"+dcallslip+"</td><td>"+invloc+"</td></tr>");
        }
		mbody=combinestring(mbody,"</table><br>");
	// END OF SINGLE QUOTE HERE
	out.println(mbody);	
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetStock_Email(username);
        techemailaddress=doGetTech_Email(username);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Truck Stock Report - Truck #"+ tech_truck +" - "+s+" - "+ tech_name , mbody, smtpuser, smtppassword);
	mbody=null;
		con.close();
	}

    private void doEmTruckStockAllCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
        {
		String oldcat = null;
		Format formatter;	
		Calendar now = Calendar.getInstance();
        	Date date = new Date(); 
		formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
            	String mbody = "";
		String keycode=null;
		String catnum=req.getParameter("catnum");
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		String stock_mail_cat = doGetStockMailCat(username);
		mbody="";	
		mbody=combinestring(mbody,"<html><basefont size=-1>");
		mbody=combinestring(mbody,"<html><head><title>Truck Stock Request by Category</title></head>");
		mbody=combinestring(mbody,"<h4 align=CENTER>Truck Stock Request<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		mbody=combinestring(mbody,"<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		mbody=combinestring(mbody,"<table border=1 width=100%>");
 		Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT inv_cats.category, inv_items.itemnum,invcatnum,itemname,inv_items.description,minquant, sum(inv_detail.quantity) as current_count FROM inv_items, inv_detail, inv_cats where inv_cats.catnum in ("+stock_mail_cat+") and inv_detail.itemnum=inv_items.itemnum and inv_cats.catnum=inv_items.invcatnum GROUP BY inv_items.itemnum ORDER BY inv_cats.category, itemname");
		 while(rs.next())
                {
		String dcat=rs.getString("category");
                String dkeycode=rs.getString("description");
                String ditemname=rs.getString("itemname");
                String dminquant=rs.getString("minquant");
                String dcurrent_count=rs.getString("current_count");
                double minquant = Double.parseDouble(dminquant);
                double current_count=Double.parseDouble(dcurrent_count);
                
                if (current_count<minquant) {
                double ineeded=minquant-current_count;
		   if (!(dcat.equalsIgnoreCase(oldcat))) {
		 	if (dkeycode.equalsIgnoreCase("")) { keycode="--"; }
                        else {  keycode=dkeycode; }
		mbody=combinestring(mbody,"</table><h4> "+dcat+"</h4><table border=1 width=\"100%\">");
		mbody=combinestring(mbody,"<th>Key Code</th><th>Item Name</th><th>Min. Quant</th><th>Current<br>Quantity</th><th>Number<br>Needed</th><th>Number Issued</th>");

		}
        	oldcat=dcat;
        	mbody=combinestring(mbody,"<tr><td>"+dkeycode+"</td><td>"+ditemname+"</td><td>"+dminquant+"</td><td>"+dcurrent_count+"</td><td>"+ineeded+"</td><td>______________</td></tr>");
                }

	}
	// END OF SINGLE QUOTE HERE
	out.println(mbody);	
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetStock_Email(username);
        techemailaddress=doGetTech_Email(username);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Truck Stock Request - Truck #"+ tech_truck +" - "+s+" - "+ tech_name , mbody, smtpuser, smtppassword);
	mbody=null;
		con.close();
}

    private void doEmTruckStockSingleCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String oldcat = null;
		Format formatter;	
		Calendar now = Calendar.getInstance();
        	Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
            	String mbody = "";
		String keycode=null;
		String catnum=req.getParameter("catnum");
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		mbody="";	
		mbody=combinestring(mbody,"<html><basefont size=-1>");
		mbody=combinestring(mbody,"<html><head><title>Truck Stock Request by Category</title></head>");
		mbody=combinestring(mbody,"<h4 align=CENTER>Truck Stock Request<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		mbody=combinestring(mbody,"<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		mbody=combinestring(mbody,"<table border=1 width=100%>");
 		Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT inv_cats.category, inv_items.itemnum,invcatnum,itemname,inv_items.description,minquant, sum(inv_detail.quantity) as current_count FROM inv_items, inv_detail, inv_cats where inv_cats.catnum='"+catnum+"' and inv_detail.itemnum=inv_items.itemnum and inv_cats.catnum=inv_items.invcatnum GROUP BY inv_items.itemnum ORDER BY inv_cats.category, itemname");
		 while(rs.next())
                {
		String dcat=rs.getString("category");
                String dkeycode=rs.getString("description");
                String ditemname=rs.getString("itemname");
                String dminquant=rs.getString("minquant");
                String dcurrent_count=rs.getString("current_count");
                double minquant = Double.parseDouble(dminquant);
                double current_count=Double.parseDouble(dcurrent_count);
                
                if (current_count<minquant) {
                double ineeded=minquant-current_count;
		   if (!(dcat.equalsIgnoreCase(oldcat))) {
		 	if (dkeycode.equalsIgnoreCase("")) { keycode="--"; }
                        else {  keycode=dkeycode; }
		mbody=combinestring(mbody,"</table><h4> "+dcat+"</h4><table border=1 width=\"100%\">");
		mbody=combinestring(mbody,"<th>Key Code</th><th>Item Name</th><th>Min. Quant</th><th>Current<br>Quantity</th><th>Number<br>Needed</th><th>Number Issued</th>");

			}
        	oldcat=dcat;
        	mbody=combinestring(mbody,"<tr><td>"+dkeycode+"</td><td>"+ditemname+"</td><td>"+dminquant+"</td><td>"+dcurrent_count+"</td><td>"+ineeded+"</td><td>______________</td></tr>");
                }

	}
	// END OF SINGLE QUOTE HERE
	out.println(mbody);	
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetStock_Email(username);
        techemailaddress=doGetTech_Email(username);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Truck Stock Request - Truck #"+ tech_truck +" - "+s+" - "+ tech_name , mbody, smtpuser, smtppassword);
	mbody=null;
		con.close();
	}

    private void doTruckStockSingleCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String oldcat = null;
		String keycode=null;
		String catnum=req.getParameter("catnum");
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock by Category</title></head>");
		doMHeader(req, res, out, session, username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock by Category</title></head>");
		out.println("<h4 align=CENTER>Truck Stock Report by Category<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=1 width=100%>");
 		Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT inv_cats.category, inv_items.itemnum,invcatnum,itemname,inv_items.description,minquant, sum(inv_detail.quantity) as current_count FROM inv_items, inv_detail, inv_cats where inv_cats.catnum='"+catnum+"' and inv_detail.itemnum=inv_items.itemnum and inv_cats.catnum=inv_items.invcatnum GROUP BY inv_items.itemnum ORDER BY inv_cats.category, itemname");
		 while(rs.next())
                {
		String dcat=rs.getString("category");
                String dkeycode=rs.getString("description");
                String ditemname=rs.getString("itemname");
                String dminquant=rs.getString("minquant");
                String dcurrent_count=rs.getString("current_count");
                double minquant = Double.parseDouble(dminquant);
                double current_count=Double.parseDouble(dcurrent_count);
                
                if (current_count>0) {
                        
		 	if (dkeycode.equalsIgnoreCase("")) { keycode="--"; }
                            else {  keycode=dkeycode; }
                        if (!(dcat.equalsIgnoreCase(oldcat))) {
                out.println("</table><h4> "+dcat+"</h4><table border=1 width=\"100%\">");
                out.println("<th>Key Code</th><th>Item Name</th><th>Min. Quant</th><th>Current<br>Quantity</th></th>");        
                        }
                out.println("<tr><td>"+keycode+"</td><td>"+ditemname+"</td><td>"+dminquant+"</td><td>"+dcurrent_count+"</td></tr>");
                oldcat=dcat;
		}
		}
		con.close();
	}

                        
    private void doTruckStockCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String oldcat = null;
		String keycode=null;
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock by Category</title></head>");
		doMHeader(req, res, out, session, username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock by Category</title></head>");
		out.println("<h4 align=CENTER>Truck Stock Report by Category<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=1 width=100%>");
 		Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT inv_cats.category, inv_items.itemnum,invcatnum,itemname,inv_items.description,minquant, sum(inv_detail.quantity) as current_count FROM inv_items, inv_detail, inv_cats where inv_detail.itemnum=inv_items.itemnum and inv_cats.catnum=inv_items.invcatnum GROUP BY inv_items.itemnum ORDER BY inv_cats.category, itemname");
	        
        	
		 while(rs.next())
                {
		String dcat=rs.getString("category");
                String dkeycode=rs.getString("description");
                String ditemname=rs.getString("itemname");
                String dminquant=rs.getString("minquant");
                String dcurrent_count=rs.getString("current_count");
                double minquant = Double.parseDouble(dminquant);
                double current_count=Double.parseDouble(dcurrent_count);
                
                if (current_count>0) {
                        
		 	if (dkeycode.equalsIgnoreCase("")) { keycode="--"; }
                            else {  keycode=dkeycode; }
                        if (!(dcat.equalsIgnoreCase(oldcat))) {
                out.println("</table><h4> "+dcat+"</h4><table border=1 width=\"100%\">");
                out.println("<th>Key Code</th><th>Item Name</th><th>Min. Quant</th><th>Current<br>Quantity</th></th>");        
                        }
                out.println("<tr><td>"+keycode+"</td><td>"+ditemname+"</td><td>"+dminquant+"</td><td>"+dcurrent_count+"</td></tr>");
                oldcat=dcat;
                        
                }
            }
		con.close();
	}

  
  
  private void doTruckStockRequestCat(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String oldcat = null;
		String keycode=null;
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		String catnum=req.getParameter("catnum");
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock Request</title></head>");
		doMHeader(req, res, out, session, username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock Request</title></head>");
		out.println("<h4 align=CENTER>Truck Stock Request<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=1 width=100%>");
 		Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT inv_cats.category, inv_items.itemnum,invcatnum,itemname,inv_items.description,minquant, sum(inv_detail.quantity) as current_count FROM inv_items, inv_detail, inv_cats where inv_cats.catnum='"+catnum+"' and inv_detail.itemnum=inv_items.itemnum and inv_cats.catnum=inv_items.invcatnum GROUP BY inv_items.itemnum ORDER BY category, itemname");
		
		 while(rs.next())
                {
		String dcat=rs.getString("category");
                String dkeycode=rs.getString("description");
                String ditemname=rs.getString("itemname");
                String dminquant=rs.getString("minquant");
                String dcurrent_count=rs.getString("current_count");
                double minquant = Double.parseDouble(dminquant);
                double current_count=Double.parseDouble(dcurrent_count);
                double ineeded=minquant-current_count;
                if (current_count<minquant) {
		   if (!(dcat.equalsIgnoreCase(oldcat))) {
		 	if (dkeycode.equalsIgnoreCase("")) { keycode="--"; }
                        else {  keycode=dkeycode; }
		out.println("</table><h4> "+dcat+"</h4><table border=1 width=\"100%\">");
		out.println("<th>Key Code</th><th>Item Name</th><th>Min. Quant</th><th>Current<br>Quantity</th><th>Number<br>Needed</th><th>Number Issued</th>");

			}
        	oldcat=dcat;
                
                
        	out.println("<tr><td>"+dkeycode+"</td><td>"+ditemname+"</td><td>"+dminquant+"</td><td>"+dcurrent_count+"</td><td>"+ineeded+"</td><td>______________</td></tr>");
                }
        }
		con.close();
	}
  
  private void doTruckStockRequest(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String oldcat = null;
		String keycode=null;
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock Request</title></head>");
		doMHeader(req, res, out, session, username);
		out.println("<html><basefont size=-1>");
		out.println("<html><head><title>Truck Stock Request</title></head>");
		out.println("<h4 align=CENTER>Truck Stock Request<br>Tech: "+tech_name+"<br>Truck: "+tech_truck+"</h4>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=1 width=100%>");
 		Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT inv_cats.category, inv_items.itemnum,invcatnum,itemname,inv_items.description,minquant, sum(inv_detail.quantity) as current_count FROM inv_items, inv_detail, inv_cats where inv_detail.itemnum=inv_items.itemnum and inv_cats.catnum=inv_items.invcatnum GROUP BY inv_items.itemnum ORDER BY category, itemname");
		
		 while(rs.next())
                {
		String dcat=rs.getString("category");
                String dkeycode=rs.getString("description");
                String ditemname=rs.getString("itemname");
                String dminquant=rs.getString("minquant");
                String dcurrent_count=rs.getString("current_count");
                double minquant = Double.parseDouble(dminquant);
                double current_count=Double.parseDouble(dcurrent_count);
                double ineeded=minquant-current_count;
                if (current_count<minquant) {
		   if (!(dcat.equalsIgnoreCase(oldcat))) {
		 	if (dkeycode.equalsIgnoreCase("")) { keycode="--"; }
                        else {  keycode=dkeycode; }
		out.println("</table><h4> "+dcat+"</h4><table border=1 width=\"100%\">");
		out.println("<th>Key Code</th><th>Item Name</th><th>Min. Quant</th><th>Current<br>Quantity</th><th>Number<br>Needed</th><th>Number Issued</th>");

			}
        	oldcat=dcat;
                
                
        	out.println("<tr><td>"+dkeycode+"</td><td>"+ditemname+"</td><td>"+dminquant+"</td><td>"+dcurrent_count+"</td><td>"+ineeded+"</td><td>______________</td></tr>");
                }
        }
		con.close();
	}

  private void doSelectStockDateSpan(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select Date</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=showstockusage\" name=\"addcat\">");
	out.println("<p>Report Start Date :");
	out.println("<input type=\"date\" name=\"startdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<p>Report Stop Date :");
	out.println("<input type=\"date\" name=\"enddate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

  private void doStartLead(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Start Add New Lead</title></head><br><br><br>Is this <br><br>");
	out.println("<a href="+classdir+"UniCash?action=selexistingleadcustomer>an Existing Customer?</a><br>");
	out.println("<a href="+classdir+"UniCash?action=addleadcustomer>or a New Customer?</a><br>");
	out.println("</html>");
		con.close();
	}


private void doSelectExistingLeadCustomer(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
	out.println("<br>Select customer to add lead for: <br><br>");

	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=a&custstop=b target=phpmain>Customers A</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=b&custstop=c target=phpmain>Customers B</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=c&custstop=e target=phpmain>Customers C-D</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=e&custstop=g target=phpmain>Customers E-F</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=g&custstop=i target=phpmain>Customers G-H</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=i&custstop=l target=phpmain>Customers I-K</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=l&custstop=m target=phpmain>Customers L</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=m&custstop=n target=phpmain>Customers M</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=n&custstop=o target=phpmain>Customers N</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=o&custstop=p target=phpmain>Customers O</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=p&custstop=q target=phpmain>Customers P</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=q&custstop=s target=phpmain>Customers Q-R</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=s&custstop=t target=phpmain>Customers S</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=t&custstop=u target=phpmain>Customers T</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=leadcustomerselect&custstart=u&custstop=ZZ target=phpmain>Customers U-Z</a><br>");
		con.close();
			}
  
private void doLeadCustomerSelect(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		int counter=0;
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Select Customer</title>");
		out.println("</head>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=0 width=100%>");
		out.println("<th>Name</th><th>Address</th><th>City</th><th>State</th>");

                Vector v;
                v = UniCustomer.getAllItems(con,custstart,custstop);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCustomer t = (UniCustomer) v.elementAt(i);
			String custname = t.getCustomerName();
                        String address1 = t.getAddress1();
			String city = t.getCity();
			String state = t.getState();
			String ncustnum = t.getCusNum();
			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
			
                        out.println("<td><a href="+classdir+"UniCash?action=custleadform&custnum="+ncustnum+">");
                        out.println(custname+"</a></td>");
                        out.println("<td>");
                        out.println(address1+"</td>");
                        out.println("<td>");
                        out.println(city+"</td>");
                        out.println("<td>" + state + "</td>");
                        out.println("</tr>");
                }

                out.println("</table>");
		out.println("</table><br><br><br>");
		out.println("<a href="+classdir+"UniCash?action=addleadcustomer>Not Shown - Add Customer to Database</a><br>");
		
		con.close();
	}

  
private void doExCustLeadForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		int counter=0;
	Format formatter;	
		String tcustnum = req.getParameter("custnum");
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
		String action = req.getParameter("action");
			String custname ="";
                        String address1 ="";
			String city ="";
			String state = "";
			String zip = "";
			String ncustnum = "";
			String custsite = "";
			String sitenum = "";
			String homephone="";
			String altphone="";
		out.println("<html>");
		out.println("<head>");
		out.println("<title>New Lead Form - Existing Customer</title>");
		out.println("</head>");

			if (action.equalsIgnoreCase("custleadform"))
			{
		int custnum = Integer.parseInt(tcustnum);	
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCustomer t = (UniCustomer) v.elementAt(i);
			custname = t.getCustomerName();
                        address1 = t.getAddress1();
			city = t.getCity();
			state = t.getState();
			zip = t.getZip();
			ncustnum = t.getCusNum();
			custsite = t.getCustSite();
			sitenum = t.getSiteNum();
			homephone=t.getHomePhone();
			altphone=t.getAltPhone();

		}

		out.println("<html>");
		out.println("<head>");
		out.println("<title>Add Lead</title>");
		out.println("</head>");
		out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveexcustlead\" name=\"addlead\">");
		out.println("<input type=\"hidden\" name=\"custnum\" value=\""+ncustnum+"\"");
		out.println("<input type=\"hidden\" name=\"sitenum\" value=\""+sitenum+"\"");
		out.println("<input type=\"hidden\" name=\"custsite\" value=\""+custsite+"\"");
		}
		else {
			
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Add Lead</title>");
		out.println("</head>");
		out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savecustlead\" name=\"addlead\">");

		}
		
		out.println("<table size=100% border=0>");
		out.println("<tr><td>Date</td><td>");
		out.println("<input type=\"text\" name=\"calldate\" value=\""+s+"\"></td>");
		out.println("</tr></table><br>");
		out.println("<h4>Contact Info </h4>");
		out.println("<table size=\"100%\" border=0>");


			if (action.equalsIgnoreCase("custleadform"))
			{
		out.println("<tr><td>Name</td><td>"+custname+"</td>");
		out.println("</tr>");
		out.println("<tr><td>Address</td><td>"+address1+"</td>");
		out.println("</tr>");
		out.println("</table>");
		out.println("<table size=100% border=0>");
		out.println("<tr><td>City</td><td>"+city+"</td>");
		out.println("<td>State</td><td>"+state+"</td>");
		out.println("<td>Zip</td><td>"+zip+"</td>");
		out.println("</tr>");
		out.println("<tr><td>Customer Number</td><td>"+custsite+"</td>");
		out.println("</tr>");
		out.println("</table><br>");
		out.println("<table size=100% border=0>");
		out.println("<tr><td>Home Phone Number</td><td>"+homephone+"</td>");
		out.println("");
		out.println("<td>Cell Phone Number</td><td>");
		out.println("<input type=\"text\" name=\"cellphonenumber\"></td></tr>");
		out.println("");
		out.println("<tr><td>Work Phone Number</td><td>"+altphone+"</td>");
		out.println("");
		out.println("<td>Contact Person</td><td>");
		out.println("<input type=\"text\" name=\"contactperson\"></td></tr>");
		out.println("");
		out.println("</table>");
		out.println("<h4>Site Address Info </h4>");
		out.println("<table size=\"100%\" border=0>");
		out.println("<tr><td>Address</td><td>");
		out.println("<input type=\"text\" name=\"saddress\" size=\"45\"  value=\""+address1+"\" ></td>");
		out.println("</tr>");
		out.println("<tr><td>Site Number</td><td>");
		out.println("<input type=\"text\" name=\"custsite\" value=\""+sitenum+"\" size=\"45\"></td>");
		out.println("</tr>");
		out.println("</table>");
		out.println("<table size=100% border=0>");
		out.println("<tr><td>City</td><td>");
		out.println("<input type=\"text\" name=\"scity\" size=\"45\" value=\""+city+"\" ></td>");
		out.println("<td>State</td><td>");
		out.println("<input type=\"text\" name=\"sstate\" size=\"12\" value=\""+state+"\" ></td>");
		out.println("<td>Zip</td><td>");
		out.println("<input type=\"text\" name=\"szip\" size=\"12\" value=\""+zip+"\" ></td>");
		out.println("</tr>");
		out.println("</table><br>");
		} else {
		out.println("<tr><td>Name</td><td>");
		out.println("<input type=\"text\" name=\"name\" value=\""+custname+"\" size=\"45\"></td>");
		out.println("</tr>");
		out.println("<tr><td>Address</td><td>");
		out.println("<input type=\"text\" name=\"address\" value=\""+address1+"\" size=\"45\"></td>");
		out.println("</tr>");
		out.println("</table>");
		out.println("<table size=100% border=0>");
		out.println("<tr><td>City</td><td>");
		out.println("<input type=\"text\" name=\"city\" value=\""+city+"\" size=\"45\"></td>");
		out.println("<td>State</td><td>");
		out.println("<input type=\"text\" name=\"state\" value=\""+state+"\" size=\"12\"></td>");
		out.println("<td>Zip</td><td>");
		out.println("<input type=\"text\" name=\"zip\" value=\""+zip+"\" size=\"12\"></td>");
		out.println("</tr>");
		out.println("<tr><td>Customer Number</td><td>");
		out.println("<input type=\"text\" name=\"custsite\" value=\""+custsite+"\" size=\"45\"></td>");
		out.println("</tr>");
		out.println("</table><br>");
		out.println("<table size=100% border=0>");
		out.println("<tr><td>Home Phone Number</td><td>");
		out.println("<input type=\"text\" name=\"phonenumber\" value=\""+homephone+"\" ></td>");
		out.println("");
		out.println("<td>Cell Phone Number</td><td>");
		out.println("<input type=\"text\" name=\"cellphonenumber\"></td></tr>");
		out.println("");
		out.println("<tr><td>Work Phone Number</td><td>");
		out.println("<input type=\"text\" name=\"workphonenumber\" value=\""+altphone+"\" ></td>");
		out.println("");
		out.println("<td>Contact Person</td><td>");
		out.println("<input type=\"text\" name=\"contactperson\"></td></tr>");
		out.println("");
		out.println("</table>");
		out.println("<h4>Site Address Info </h4>");
		out.println("<table size=\"100%\" border=0>");
		out.println("<tr><td>Address</td><td>");
		out.println("<input type=\"text\" name=\"saddress\" size=\"45\"  value=\""+address1+"\" ></td>");
		out.println("</tr>");
		out.println("<tr><td>Site Number</td><td>");
		out.println("<input type=\"text\" name=\"custsite\" value=\""+sitenum+"\" size=\"45\"></td>");
		out.println("</tr>");
		out.println("</table>");
		out.println("<table size=100% border=0>");
		out.println("<tr><td>City</td><td>");
		out.println("<input type=\"text\" name=\"scity\" size=\"45\" value=\""+city+"\" ></td>");
		out.println("<td>State</td><td>");
		out.println("<input type=\"text\" name=\"sstate\" size=\"12\" value=\""+state+"\" ></td>");
		out.println("<td>Zip</td><td>");
		out.println("<input type=\"text\" name=\"szip\" size=\"12\" value=\""+zip+"\" ></td>");
		out.println("</tr>");
		out.println("</table><br>");
		}

		out.println("<h4>Appointment Info </h4>");
		out.println("<table size=100% border=0>");
		out.println("<tr><td>Comfort Specialist</td><td>");
		out.println("<input type=\"text\" name=\"salesman\"></td></tr>");
		out.println("");
		out.println("<tr><td>Appointment Date</td><td>");
		out.println("<input type=\"text\" name=\"aptdate\"></td>");
		out.println("");
		out.println("<td>Appointment Time</td><td>");
		out.println("<input type=\"text\" name=\"apttime\"></td></tr>");
		out.println("");
		out.println("<tr><td>Reason</td><td>");
		out.println("<input type=\"text\" name=\"reason\"></td>");
		out.println("");
		out.println("<td>Refer By</td><td>");
		out.println("<input type=\"text\" name=\"refby\"></td></tr>");
		out.println("");
		out.println("</table><br>");

		out.println("<table size=100% border=0>");
		out.println("<tr><td>Source:</td><td><select align=\"left\" width=50 name=source><option>-</option><option>Prev Customer</option>");
		out.println("<option>Service Department</option>");
		out.println("<option>Yellow Pages</option>");
		out.println("<option>Referral</option>");
		out.println("<option>Origional Install</option>");
		out.println("<option>T.V.</option>");
		out.println("<option>Newspaper</option>");
		out.println("<option>Radio</option>");
		out.println("<option>Home Show</option>");
		out.println("<option>Web Site</option>");
		out.println("<option>Trucks</option>");
		out.println("</select>");
		out.println("</td><td>Building:</td><td><select align=\"left\" width=50 name=building><option>-</option>");
		out.println("");
		out.println("<option>1 Story</option>");
		out.println("<option>Split</option>");
		out.println("<option>2 Story</option>");
		out.println("<option>Duplex</option>");
		out.println("<option>Crawl Space</option>");
		out.println("<option>Commercial</option>");
		out.println("</select>");
		out.println("");
		out.println("</td></tr>");
		out.println("");
		out.println("<tr><td>Fuel Type:</td><td><select align=\"left\" width=50 name=fuel><option>-</option> ");
		out.println("");
		out.println("<option>Oil</option>");
		out.println("<option>Natural gas</option>");
		out.println("<option>LP Gas</option>");
		out.println("<option>Electric</option>");
		out.println("<option>Geothermal</option>");
		out.println("<option>Wood</option>");
		out.println("</select>");
		out.println("</td><td>Heat Type:</td><td><select align=\"left\" width=50 name=heattype><option>-</option> ");
		out.println("");
		out.println("<option>Wall Furnace</option>");
		out.println("<option>Floor Furnace</option>");
		out.println("<option>Forced Air</option>");
		out.println("<option>Hot Water</option>");
		out.println("<option>Electric Baseboard</option>");
		out.println("<option>Wood Stove</option>");
		out.println("</select>");
		out.println("</td><tr>");
		out.println("<tr><td>Estimate Type:</td><td>      <select align=\"left\" width=50 name=etype1><option>-</option> ");
		out.println("<option>Gas Furnace</option>");
		out.println("<option>Oil Furnace</option>");
		out.println("<option>Gas Boiler</option>");
		out.println("<option>Oil Boiler</option>");
		out.println("<option>Air Conditioner/Conventional</option>");
		out.println("<option>Ductless Split</option>");
		out.println("<option>Unico</option>");
		out.println("<option>Heat Pump</option>");
		out.println("<option>Geothermal</option>");
		out.println("<option>Roof Top Package System</option>");
		out.println("<option>Monitor</option>");
		out.println("<option>Toester Wall Unit</option>");
		out.println("<option>Radiant</option>");
		out.println("<option>Water Heater</option>");
		out.println("<option>Baseboard</option>");
		out.println("<option>Hydro Air</option>");
		out.println("<option>Coil / Air Handler</option>");
		out.println("<option>Humidifier</option>");
		out.println("<option>Electronic Air Cleaner</option>");
		out.println("<option>Make Up Air</option>");
		out.println("<option>Pure Aire</option>");
		out.println("<option>ERV/HRV</option>");
		out.println("<option>SpaceGard</option>");
		out.println("</select>");
		out.println("</td><td>New/Replace:</td><td><select align=\"left\" width=50 name=enewrep1><option>-</option><option>New</option><option>Replace</option></select>      </td><tr>");
		out.println("</select>");
		out.println("<tr><td>Estimate Type:</td><td>      <select align=\"left\" width=50 name=etype2><option>-</option> ");
		out.println("<option>Gas Furnace</option>");
		out.println("<option>Oil Furnace</option>");
		out.println("<option>Gas Boiler</option>");
		out.println("<option>Oil Boiler</option>");
		out.println("<option>Air Conditioner/Conventional</option>");
		out.println("<option>Ductless Split</option>");
		out.println("<option>Unico</option>");
		out.println("<option>Heat Pump</option>");
		out.println("<option>Geothermal</option>");
		out.println("<option>Roof Top Package System</option>");
		out.println("<option>Monitor</option>");
		out.println("<option>Toester Wall Unit</option>");
		out.println("<option>Radiant</option>");
		out.println("<option>Water Heater</option>");
		out.println("<option>Baseboard</option>");
		out.println("<option>Hydro Air</option>");
		out.println("<option>Coil / Air Handler</option>");
		out.println("<option>Humidifier</option>");
		out.println("<option>Electronic Air Cleaner</option>");
		out.println("<option>Make Up Air</option>");
		out.println("<option>Pure Aire</option>");
		out.println("<option>ERV/HRV</option>");
		out.println("<option>SpaceGard</option>");
		out.println("</select>");
		out.println("</td><td>New/Replace:</td><td><select align=\"left\" width=50 name=enewrep2><option>-</option> <option>New</option><option>Replace</option></select>     </td><tr>");
		out.println("</table>");
		out.println("<table size=100% border=1>");
		out.println("<tr><td>Comments</td><td>");
		out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
		out.println("</td></tr>");
		out.println("</table>");
		out.println("<CENTER>");
		out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
		out.println("<INPUT TYPE=\"reset\">");
		out.println("</CENTER>");

		con.close();
	}


  private void doCheckTempSplit(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String returndb="-";
	String tempsplit="-";
	String returnwb="-";
	String outsideair="-";
	String superheat="-";
	String submit = req.getParameter("submit");
	if (submit==null) {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Check Temp Split and Superheat</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=checktempsplit\" name=\"tempsplit\">");
	out.println("<p>Outside Air Dry Bulb Temp :");
	out.println("<input type=\"text\" name=\"outsideair\" value=\""+outsideair+"\">");
	out.println("</p>");
	out.println("<p>Return Wet Bulb :");
	out.println("<input type=\"text\" name=\"returnwb\" value=\""+returnwb+"\">");
	out.println("</p>");
	out.println("<p>Return Dry Bulb :");
	out.println("<input type=\"text\" name=\"returndb\" value=\""+returndb+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	out.println("</form></html>");
			}
			else
			{

	returnwb = req.getParameter("returnwb");
	returndb = req.getParameter("returndb");
	outsideair = req.getParameter("outsideair");
	tempsplit="0.00";
        TempSplit t = new TempSplit(con, returndb, returnwb);
	tempsplit=t.getTempSplit();
	Superheat s = new Superheat(con,outsideair, returnwb);
	superheat=s.getSuperheat();

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Check Temp Split</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=checktempsplit\" name=\"tempsplit\">");
	out.println("<p>Outside Air Dry Bulb Temp :");
	out.println("<input type=\"text\" name=\"outsideair\" value=\""+outsideair+"\">");
	out.println("</p>");
	out.println("<p>Return Wet Bulb :");
	out.println("<input type=\"text\" name=\"returnwb\" value=\""+returnwb+"\">");
	out.println("</p>");
	out.println("<p>Return Dry Bulb :");
	out.println("<input type=\"text\" name=\"returndb\" value=\""+returndb+"\">");
	out.println("</p>");
	out.println("<p>Required Temp Split Supply - Return Dry Bulb :&nbsp;&nbsp;&nbsp;&nbsp;<b>"+tempsplit+"</b>");
	out.println("</p>");
	out.println("<p>Required Superheat - (Suction - Evap Saturation Temp) :&nbsp;&nbsp;&nbsp;&nbsp;<b>"+superheat+"</b>");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
	out.println("</form></html>");
	
			}

		con.close();
	}

  private void doSelectServProposalDateSpan(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String action = req.getParameter("action");
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select Date</title>");
	out.println("</head>");
			if (action.equalsIgnoreCase("selectcallrepdatespan"))
			{
				out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=callreport\" name=\"addcat\">");
			} else {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=servproposalreport\" name=\"addcat\">");
			}
	out.println("<p>Report Start Date :");
	out.println("<input type=\"date\" name=\"startdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<p>Report Stop Date :");
	out.println("<input type=\"date\" name=\"enddate\" value=\""+s+"\">");
	out.println("</p>");
			if (action.equalsIgnoreCase("selectcallrepdatespan"))
			{
	out.println("<p></p>");
			}
			else 
			{
	out.println("<p>Do Not Print Lost Job Names :");
	out.println("<input type=\"checkbox\" name=\"nolost\" value=\"TRUE\">");
	out.println("</p>");
			}
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

  private void doSelectProposalDateSpan(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select Date</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=proposalreport\" name=\"addcat\">");
	out.println("<p>Report Start Date :");
	out.println("<input type=\"date\" name=\"startdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<p>Report Stop Date :");
	out.println("<input type=\"date\" name=\"enddate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<p>Print Lost Job Names :");
	out.println("<input type=\"checkbox\" name=\"nolost\" value=\"TRUE\">");
	out.println("</p>");
	out.println("<p>Print Installed Job Names :");
	out.println("<input type=\"checkbox\" name=\"noinstalled\" value=\"TRUE\">");
	out.println("</p>");
	out.println("<p>Print Sold Job Names :");
	out.println("<input type=\"checkbox\" name=\"nosold\" value=\"TRUE\">");
	out.println("</p>");
	out.println("<p>Print New Job Names :");
	out.println("<input type=\"checkbox\" name=\"nonew\" value=\"TRUE\">");
	out.println("</p>");
	out.println("<p>Print Presented Job Names :");
	out.println("<input type=\"checkbox\" name=\"nopresented\" value=\"TRUE\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
			con.close();
	}


  private void doSelectCommisionDateSpan(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select Commision Date</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=commisionreport\" name=\"addcat\">");
	out.println("<p>Report Start Date :");
	out.println("<input type=\"date\" name=\"startdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<p>Report Stop Date :");
	out.println("<input type=\"date\" name=\"enddate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"EMail\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</form></CENTER>");
		con.close();
	}

  private void doSelectWsDateSpan(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Select Date</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=wsreport\" name=\"addcat\">");
	out.println("<p>Report Start Date :");
	out.println("<input type=\"date\" name=\"startdate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<p>Report Stop Date :");
	out.println("<input type=\"date\" name=\"enddate\" value=\""+s+"\">");
	out.println("</p>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Show\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}
	
  public static String doMHeaderString(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username, String mbody)
                throws Exception
        {
		String imagename = null;
		String imagewidth = null;
		String imagehight = null;
		String compname = null;
		String complogo = null;
		String compaddress = null;
		String compphone = null;
		String useletterhead = null;

                Vector v;
                v = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCompConfig t = (UniCompConfig) v.elementAt(i);
			imagename=t.getImage();
			imagewidth=t.getImageWidth();
			imagehight=t.getImageHight();
			compname=t.getCoName();
			complogo=t.getCoLogo();
			compaddress=t.getCoAddress();
			compphone=t.getCoPhone();
			useletterhead=t.getUseLetterHead();
		}
	if (useletterhead.equalsIgnoreCase("no")) 
	{
	mbody=combinestring(mbody,"<table align=\"center\" border=0 cellpadding=10 cols=3 width=\"95%\">");
	mbody=combinestring(mbody,"<tr><td> ");
	mbody=combinestring(mbody,"<IMG SRC=\""+imagename+"\" NAME=\"CompLogo\" ALIGN=LEFT WIDTH="+imagewidth+" HEIGHT="+imagehight+" BORDER=0><BR CLEAR=LEFT>");
	mbody=combinestring(mbody,"</td>");
	mbody=combinestring(mbody,"<font size=2><td><P ALIGN=CENTER ><b>"+compname+"<br>");
	mbody=combinestring(mbody,complogo);
	mbody=combinestring(mbody,compaddress);
	mbody=combinestring(mbody,compphone+"</b>");
	mbody=combinestring(mbody,"</font></td>");
	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"</table>");
	}
	else 
	{
	mbody=combinestring(mbody,"<br><br><br>");
	}
	return mbody;
	}


  public static void doMHeader(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String imagename = null;
		String imagewidth = null;
		String imagehight = null;
		String compname = null;
		String complogo = null;
		String compaddress = null;
		String compphone = null;
		String useletterhead = null;

                Vector v;
                v = UniCompConfig.getAllItems(con);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCompConfig t = (UniCompConfig) v.elementAt(i);
			imagename=t.getImage();
			imagewidth=t.getImageWidth();
			imagehight=t.getImageHight();
			compname=t.getCoName();
			complogo=t.getCoLogo();
			compaddress=t.getCoAddress();
			compphone=t.getCoPhone();
			useletterhead=t.getUseLetterHead();
		}
	if (useletterhead.equalsIgnoreCase("no")) 
	{
	out.println("<table align=\"center\" border=0 cellpadding=10 cols=3 width=\"95%\">");
	out.println("<tr><td> ");
	out.println("<IMG SRC=\""+imagename+"\" NAME=\"CompLogo\" ALIGN=LEFT WIDTH="+imagewidth+" HEIGHT="+imagehight+" BORDER=0><BR CLEAR=LEFT>");
	out.println("</td>");
	out.println("<font size=2><td><P ALIGN=CENTER ><b>"+compname+"<br>");
	out.println(complogo);
	out.println(compaddress);
	out.println(compphone+"</b>");
	out.println("</font></td>");
	out.println("</tr>");
	out.println("</table>");
	}
	else 
	{
	out.println("<br><br><br>");
	}
	}

  private void doShowTimeSheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String timesheetdate = req.getParameter("listdate");
		out.println("<html>");
		doStyleSheet(req, res, out, session, username);
		out.println("<head>");
		out.println("<title>Time Sheet</title>");
		out.println("</head>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");

		out.println(timesheetdate+"<br>");

		out.println("<table border=1 width=100%>");
		out.println("<th>Call Slip</th><th>Customer</th><th>Dispatched</th><th>Time In</th><th>Time Out</th><th>NC<br>Item Sold</th><th>NC<br>Amount</th><th>Com<br>Item Sold</th><th>Com<br>Amount</th><th>Amount Collected</th><th>Paid<br>With</th><th>Commision</th><th>Code</th><th>Odometer<br>Start</th><th>Odometer<br>Stop</th><th>Delete</th>");


                Vector v;
                v = UniTimeSheet.getAllItems(con,doFormatDateDb(getDateDb(timesheetdate)), username);
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniTimeSheet t = (UniTimeSheet) v.elementAt(i);
			int tsid  = t.getId();
                        String  callslip= t.CallSlip();
			String customer = t.Customer();
			String time_in = t.TimeIn();
			String time_out = t.TimeOut();
			String dispatch_time = t.DispatchTime();
			String item_sold = t.ItemSold();
			String amount = t.Amount();
			String citem_sold = t.CItemSold();
			String camount = t.CAmount();
			String amount_collected = t.AmountCollected();
			String commision = t.Commision();
			String tdate = t.TDate();
			String ctype = t.CType();
			String paytype = t.TPayType();
			int servsync = t.getServSync();
			String odostart=t.OdoStart();
			String odostop=t.OdoStop();
			

			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
		if (servsync==0) {
		out.println("<td><a href="+classdir+"UniCash?action=edittimeentry&tsid="+tsid+"&tdate="+tdate+"&callslip="+callslip+"&customer="+customer+"&time_in="+time_in+"&time_out="+time_out+"&item_sold="+item_sold+"&amount="+amount+"&amount_collected="+amount_collected+"&paytype="+paytype+"&commision="+commision+"&action=timeupdate&tsid="+tsid+"&dispatch_time="+dispatch_time+">"+callslip+"</a></td><td>"+customer+"</td><td>"+dispatch_time+"</td><td>"+time_in+"</td><td>"+time_out+"</td><td>"+item_sold+"</td><td>"+amount+"</td><td>"+citem_sold+"</td><td>"+camount+"</td><td>"+amount_collected+"</td><td>"+paytype+"</td><td>"+commision+"</td><td>"+ctype+"</td><td>"+odostart+"</td><td>"+odostop+"</td><td><a href="+classdir+"UniCash?action=deletesingletime&tsid="+tsid+"&listdate="+timesheetdate+">Delete</a></td></tr>");
		} else {
		out.println("<td><a href="+classdir+"UniCash?action=edittimeentry&tsid="+tsid+"&tdate="+tdate+"&callslip="+callslip+"&customer="+customer+"&time_in="+time_in+"&time_out="+time_out+"&item_sold="+item_sold+"&amount="+amount+"&amount_collected="+amount_collected+"&commision="+commision+"&action=timeupdate&tsid="+tsid+"&dispatch_time="+dispatch_time+">"+callslip+"</a></td><td>"+customer+"</td><td>"+dispatch_time+"</td><td>"+time_in+"</td><td>"+time_out+"</td><td>"+item_sold+"</td><td>"+amount+"</td><td>"+citem_sold+"</td><td>"+camount+"</td><td>"+amount_collected+"</td><td>"+paytype+"</td><td>"+commision+"</td><td>"+ctype+"</td><td>"+odostart+"</td><td>"+odostop+"</td><td>-</td></tr>");
			}
                }

		out.println("</table>");
		out.println("<P><P>");
		out.println("<a href="+classdir+"UniCash?action=addtimeentry&listdate="+timesheetdate+">Add an entry</a><br>");
		out.println("<a href="+classdir+"UniCash?action=printtimesheet&listdate="+timesheetdate+" target=_blank>Printable Sheet</a>");

		con.close();
	}


  private void doPrintTimeSheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
            String action = req.getParameter("action");
             ServsysTimeSheet.getIndividualItem (con, req,res, out, session, username, classdir, action,  menu);     
		con.close();
	}

  private void doPrintCommisionReport(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String enddate = req.getParameter("enddate");
		String subvalue = req.getParameter("submit");
		String startdate = req.getParameter("startdate");
		String mbody="";
		long lstart, lend, lunch_time, sstart, send, shop_time, day_shoptime, travel_time, day_jobtime, day_travel, paid_time, elapsed, end, jend, disp_time, jstart, job_time, start, dispatch;
		double day_billed, day_collected, day_commision;
		String day_end_time, day_start_time, work_time;
		int jobtime = 0;
		int tottime = 0;
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		if (subvalue.equalsIgnoreCase("email")) {
		mbody=combinestring(mbody,"<html><basefont size=-2>");
		mbody=combinestring(mbody,"<html><head><title>Comission Report</title></head>");
		mbody=combinestring(mbody,"<h4 align=CENTER>Technician Commision Report</h4>");
		mbody=combinestring(mbody,"<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff><p align=\"center\"> ");
		mbody=combinestring(mbody,"<table width=\"95%\" align=\"center\"><tr><td><h3>Date:"+ startdate+"<br>to<br>Date: "+enddate+"</h3></td><td><h3>Service Tech:"+ tech_name+"</h3></td></tr></table>");
		mbody=combinestring(mbody,"<br><br><br><table align=\"center\" border=1 width=\"100%\" cellpadding=2>");
		mbody=combinestring(mbody,"<font=-2><th>Call Slip</th><th>Customer</th><th>Date</th><th>Item Sold</th><th>Amount</th><th>Amount<br>Collected</th><th>Commision</th>");
							} else {
		out.println("<html><basefont size=-2>");
		out.println("<html><head><title>Comission Report</title></head>");
		doMHeader(req, res, out, session, username);
						
		out.println("<h4 align=CENTER>Technician Commision Report</h4>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff><p align=\"center\"> ");
		out.println("<table width=\"95%\" align=\"center\"><tr><td><h3>Date:"+ startdate+"<br>to<br>Date: "+enddate+"</h3></td><td><h3>Service Tech:"+ tech_name+"</h3></td></tr></table>");
		out.println("<br><br><br><table align=\"center\" border=1 width=\"100%\" cellpadding=2>");
		out.println("<font=-2><th>Call Slip</th><th>Customer</th><th>Date</th><th>Item Sold</th><th>Amount</th><th>Amount<br>Collected</th><th>Commision</th><th>Odometer<br>Start</th><th>Odometer<br>Stop</th>");
			}
                Vector v;
                v = UniTimeSheet.getAllItems(con,doFormatDateDb(getDateDb(startdate)),doFormatDateDb(getDateDb(enddate)), username );
		int counter=0;
		job_time=0;
		jstart=0;
		jend=0;
		disp_time=0;
		travel_time=0;
		day_collected=0;
		day_commision=0;
		day_billed=0;
		day_travel=0;
		day_shoptime=0;
		lunch_time=0;
		day_jobtime=0;
		day_start_time=null;
		day_end_time=null;
		int counter1=0;

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniTimeSheet t = (UniTimeSheet) v.elementAt(i);
			int tsid  = t.getId();
                        String  callslip= t.CallSlip();
			String customer = t.Customer();
			String time_in = t.TimeIn();
			String time_out = t.TimeOut();
			String dispatch_time = t.DispatchTime();
			String item_sold = t.ItemSold();
			String amount = t.Amount();
			String amount_collected = t.AmountCollected();
			String commision = t.Commision();
			String tdate = t.TDate();
			String odostart=t.OdoStart();
			String odostop=t.OdoStop();
			counter++;
			
			double iamount = Double.parseDouble(amount);
			double iamount_collected = Double.parseDouble(amount_collected);
			double icommision = Double.parseDouble(commision);
			dispatch = strtotime(dispatch_time);
			jstart = strtotime(time_in);
			jend = strtotime(time_out);
			job_time = jend - jstart;
			

		 if (counter1==0) 
			{
			day_billed=0;
			day_collected=0;
			day_commision=0;
			} 
		if (icommision!=0.00) {
			day_commision=day_commision+icommision;
			day_billed=day_billed+iamount;
			day_collected=day_collected+iamount_collected;
		if (subvalue.equalsIgnoreCase("email")) {
mbody=combinestring(mbody,"<tr><td>"+callslip+"</td><td>"+customer+"</td><td>"+tdate+"</td><td>"+item_sold+"</td><td>"+amount+"</td><td>"+amount_collected+"</td><td>"+commision+"</td><td>"+odostart+"</td><td>"+odostop+"</td></tr>");
					} else 
					{
out.println("<tr><td>"+callslip+"</td><td>"+customer+"</td><td>"+tdate+"</td><td>"+item_sold+"</td><td>"+amount+"</td><td>"+amount_collected+"</td><td>"+commision+"</td><td>"+odostart+"</td><td>"+odostop+"</td></tr>");
					}
			}
			counter1++;
		}

/* Free resultset */
		if (subvalue.equalsIgnoreCase("email")) {
				mbody=combinestring(mbody,"</table>");
				mbody=combinestring(mbody,"</html>");
        			String emailserver = doGetSmtpServer(username);
        			String emailsendaddress=doGetProp_Email(username);
        			String techemailaddress=doGetTech_Email(username);
      				String smtpuser = doGetSmtpUser(username);
      				String smtppassword = doGetSmtpPassword(username);
				doMailSend(emailserver, emailsendaddress, techemailaddress, "Commision Report For: "+tech_name+" - "+startdate+" - "+ enddate , mbody, smtpuser, smtppassword);
				out.println(mbody);
mbody=null;
			} else {
				out.println("</table>");
				out.println("</html>");
			}
		con.close();
	}
  

	public static String formatTimeString( long value)
	{ 
		//DecimalFormat is used to display at least two digits 
		DecimalFormat nf = new DecimalFormat( "00" ); 
		//calculate hours, minutes, and seconds 
		long remainder = 0; 
		long hours = (value / MS_HOUR); 
		remainder = value % MS_HOUR; 
		long minutes = remainder / MS_MINUTE; 
		remainder = remainder % MS_MINUTE; 
		long seconds = remainder / MS_SECOND; 
		//build "hh:mm:ss" 
		StringBuffer buffer = new StringBuffer(); 
		buffer.append(nf.format(hours)); 
		buffer.append( ":" ); 
		buffer.append(nf.format(minutes)); 
		buffer.append( ":" ); 
		buffer.append(nf.format(seconds)); 
		System.out.println(buffer);
		
		return buffer.toString(); 
	}

	public static String formatATimeString( long value)
	{ 
		//DecimalFormat is used to display at least two digits 
		DecimalFormat nf = new DecimalFormat( "00" ); 
		//calculate hours, minutes, and seconds 
		long remainder = 0; 
		long hours = (value / MS_HOUR-5); 
		remainder = value % MS_HOUR; 
		long minutes = remainder / MS_MINUTE; 
		remainder = remainder % MS_MINUTE; 
		long seconds = remainder / MS_SECOND; 
		//build "hh:mm:ss" 
		StringBuffer buffer = new StringBuffer(); 
		buffer.append(nf.format(hours)); 
		buffer.append( ":" ); 
		buffer.append(nf.format(minutes)); 
		buffer.append( ":" ); 
		buffer.append(nf.format(seconds)); 
		System.out.println(buffer);
		
		return buffer.toString(); 
	}

	
	public static long strtotime(String timestring)
                throws Exception, java.text.ParseException
        {

		DateFormat formatter = new SimpleDateFormat("HH:mm");
		Date d1 = formatter.parse(timestring);
		long dateDiff = d1.getTime();
		return dateDiff;
	
	}


  private void gmdate(String formstring, String timestring)
                throws Exception
        {
       Format formatter;
       formatter = new SimpleDateFormat(""+formstring+"");
       String s = formatter.format(timestring);
	}

  private void doMasterWsListCustomers(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String tcustnum = req.getParameter("custnum");
		String twsnum = req.getParameter("wsnum");
       		int wsnum = Integer.parseInt(twsnum);
		int counter=0;
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Select Customer</title>");
		out.println("</head>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=0 width=100%>");
		out.println("<th>Name</th><th>Address</th><th>City</th><th>State</th>");

                Vector v;
                v = UniCustomer.getAllItems(con,custstart,custstop);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCustomer t = (UniCustomer) v.elementAt(i);
			String custname = t.getCustomerName();
                        String address1 = t.getAddress1();
			String city = t.getCity();
			String state = t.getState();
			String ncustnum = t.getCusNum();
			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
			
                        out.println("<td><a href="+classdir+"UniCash?action=copymasterwstocus&ncustnum="+ncustnum+"&custnum="+tcustnum+"&wsnum="+wsnum+">");
                        out.println(custname+"</a></td>");
                        out.println("<td>");
                        out.println(address1+"</td>");
                        out.println("<td>");
                        out.println(city+"</td>");
                        out.println("<td>" + state + "</td>");
                        out.println("</tr>");
                }

                out.println("</table>");
		out.println("</table>");
		con.close();
	}

  private void doWsListCustomers(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String tcustnum = req.getParameter("custnum");
		String twsnum = req.getParameter("wsnum");
       		int crecnum = Integer.parseInt(tcustnum);
       		int wsnum = Integer.parseInt(twsnum);
		int counter=0;
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Select Customer</title>");
		out.println("</head>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=0 width=100%>");
		out.println("<th>Name</th><th>Address</th><th>City</th><th>State</th>");

                Vector v;
                v = UniCustomer.getAllItems(con,custstart,custstop);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCustomer t = (UniCustomer) v.elementAt(i);
			String custname = t.getCustomerName();
                        String address1 = t.getAddress1();
			String city = t.getCity();
			String state = t.getState();
			String ncustnum = t.getCusNum();
			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
			
                        out.println("<td><a href="+classdir+"UniCash?action=copywstocus&ncustnum="+ncustnum+"&custnum="+tcustnum+"&wsnum="+wsnum+">");
                        out.println(custname+"</a></td>");
                        out.println("<td>");
                        out.println(address1+"</td>");
                        out.println("<td>");
                        out.println(city+"</td>");
                        out.println("<td>" + state + "</td>");
                        out.println("</tr>");
                }

                out.println("</table>");
		out.println("</table>");
		con.close();
	}

  private void doListCustomerAddress(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String city = req.getParameter("listcity");
		int counter=0;
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Select Customer</title>");
		out.println("</head>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=0 width=100%>");
		out.println("<th>Name</th><th>Address</th><th>City</th><th>State</th>");

                Vector v;
                v = UniCustomer.getAllAddress(con,city);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCustomer t = (UniCustomer) v.elementAt(i);
			String custname = t.getCustomerName();
                        String address1 = t.getAddress1();
			city = t.getCity();
			String state = t.getState();
			String custnum = t.getCusNum();
			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
			
                        out.println("<td><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">");
                        out.println(custname+"</a></td>");
                        out.println("<td>");
                        out.println(address1+"</td>");
                        out.println("<td>");
                        out.println(city+"</td>");
                        out.println("<td>" + state + "</td>");
                        out.println("</tr>");
                }

                out.println("</table>");
		out.println("</table>");
		con.close();
	}

  private void doNoCustNum(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		int counter=0;
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Customers Without Customer Numbers</title>");
		out.println("</head>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=0 width=100%>");
		out.println("<th>Name</th><th>Address</th><th>City</th><th>State</th><th>Phone</th><th>Cust Num</th><th>Site Num</th>");

                Vector v;
                v = UniCustomer.getNoSiteNum(con);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCustomer t = (UniCustomer) v.elementAt(i);
			String custname = t.getCustomerName();
                        String address1 = t.getAddress1();
			String city = t.getCity();
			String state = t.getState();
			String custnum = t.getCusNum();
			String hphone=t.getHomePhone();
			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
			
                        out.println("<td>");
                        out.println(custname+"</a></td>");
                        out.println("<td>");
                        out.println(address1+"</td>");
                        out.println("<td>");
                        out.println(city+"</td>");
                        out.println("<td>" + state + "</td><td>"+hphone+"</td><td>_______________</td><td>_______________</td>");
                        out.println("</tr>");
                }

		out.println("</table>");
		con.close();
	}

  private void doListCustomerCustNum(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String city = req.getParameter("listcustnum");
		int counter=0;
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Select Customer</title>");
		out.println("</head>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=0 width=100%>");
		out.println("<th>Name</th><th>Address</th><th>City</th><th>State</th>");

                Vector v;
                v = UniCustomer.getCustSite(con,city);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCustomer t = (UniCustomer) v.elementAt(i);
			String custname = t.getCustomerName();
                        String address1 = t.getAddress1();
			city = t.getCity();
			String state = t.getState();
			String custnum = t.getCusNum();
			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
			
                        out.println("<td><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">");
                        out.println(custname+"</a></td>");
                        out.println("<td>");
                        out.println(address1+"</td>");
                        out.println("<td>");
                        out.println(city+"</td>");
                        out.println("<td>" + state + "</td>");
                        out.println("</tr>");
                }

		out.println("</table>");
		con.close();
	}

  private void doListCustomerCity(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String city = req.getParameter("listcity");
		int counter=0;
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Select Customer</title>");
		out.println("</head>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<table border=0 width=100%>");
		out.println("<th>Name</th><th>Address</th><th>City</th><th>State</th>");

                Vector v;
                v = UniCustomer.getAllCity(con,city);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCustomer t = (UniCustomer) v.elementAt(i);
			String custname = t.getCustomerName();
                        String address1 = t.getAddress1();
			city = t.getCity();
			String state = t.getState();
			String custnum = t.getCusNum();
			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
			
                        out.println("<td><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+">");
                        out.println(custname+"</a></td>");
                        out.println("<td>");
                        out.println(address1+"</td>");
                        out.println("<td>");
                        out.println(city+"</td>");
                        out.println("<td>" + state + "</td>");
                        out.println("</tr>");
                }

		out.println("</table>");
		con.close();
	}

  private void doListCustomers(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		int counter=0;
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Select Customer</title>");
		out.println("</head>");
		out.println("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		out.println("<a href="+classdir+"UniCash?action=addcustomer&custstart="+custstart+"&custstop="+custstop+"&reqsource=UniCash>Add a Customer</a><br>");
		out.println("<a href="+classdir+"UniCash?action=addcustomerserver&custstart="+custstart+"&custstop="+custstop+"&reqsource=UniCash>Add a Customer From Server</a>");
		out.println("<table border=0 width=100%>");
		out.println("<th>Name</th><th>Address</th><th>City</th><th>State</th>");

                Vector v;
                v = UniCustomer.getAllItems(con,custstart,custstop);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniCustomer t = (UniCustomer) v.elementAt(i);
			String custname = t.getCustomerName();
                        String address1 = t.getAddress1();
			String city = t.getCity();
			String state = t.getState();
			String custnum = t.getCusNum();
			counter++;
			if (counter==1) 
				{
                       	out.println("<tr BGCOLOR=#A0B8C8>");
				}
			if (counter==2) 
				{
                       	out.println("<tr>");
			counter=0;	
				}
			
                        out.println("<td><a href="+classdir+"UniCash?action=showcustdetail&custnum="+custnum+"&csection=1>");
                        out.println(custname+"</a></td>");
                        out.println("<td>");
                        out.println(address1+"</td>");
                        out.println("<td>");
                        out.println(city+"</td>");
                        out.println("<td>" + state + "</td>");
                        out.println("</tr>");
                }

                out.println("</table>");
		out.println("</table>");
		out.println("<P><P>");
		out.println("<a href="+classdir+"UniCash?action=addcustomer&custstart="+custstart+"&custstop="+custstop+"&reqsource=UniCash>Add a Customer</a><br>");
		out.println("<a href="+classdir+"UniCash?action=addcustomerserver&custstart="+custstart+"&custstop="+custstop+"&reqsource=UniCash>Add a Customer From Server</a>");
		con.close();
	}

  private void doListAllBills(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
                printHeader(req, res, out, username);
		out.println("<a href=\""+ classdir + "UniCash?action=addbill\">AddBill</a>");	
		out.println("<table COLS=5 WIDTH=\"90%\" BGCOLOR=\"#FFFFFF\" NOSAVE >");
                out.println("<th ALIGN=LEFT><h4>Payee<br>/Company</h4></th><th ALIGN=LEFT><h4>Due Date</h4></th><th ALIGN=LEFT><h4>Pay Date</h4></th> <th ALIGN=LEFT><h4>Amount</h4></th><th ALIGN=LEFT><h4>Memo</h4></th> ");

                Vector v;
                v = UniBills.getAllItems(con);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniBills t = (UniBills) v.elementAt(i);
			String bguid = t.getBillguid();

                       	out.println("<tr>");
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=showbill&billid="+bguid+">"+t.getPayee()+"</td>");
                        out.println("<td>");
                        out.println(t.getDuedate()+"</td>");
                        out.println("</td>");
                        out.println("<td>");
                        out.println(t.getPaydate()+"</td>");
                        out.println("</td>");
                        out.println("<td>");
			String balString = NumberFormat.getCurrencyInstance().format(t.getAmount());
                        out.println(balString+"</td>");
                        out.println("</td>");
                        out.println("<td>" + t.getMemo() + "</td>");
                        out.println("</tr>");
                }

                out.println("</table>");
                printFooter(req, res, out, username);
		con.close();
	}

private void doAddBillForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
            printHeader(req, res, out, username);
	    String inputid="";
	    String bbillguid="";
	    String bmemo="";
	    String bpayee="";
	    String bpaydate="";
	    String bduedate="";
	    double bamount=0.0;
	    String action = req.getParameter("action");
	    if (action.equals("showbill")){
	    	inputid = req.getParameter("billid");
                Vector v;
                v = UniBills.getAllItems(con);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniBills t = (UniBills) v.elementAt(i);
			if (inputid.equals(t.getBillguid()))
			{
				bbillguid=t.getBillguid();
				bmemo=t.getMemo();
				bpayee=t.getPayee();
				bpaydate=t.getPaydate();
				bduedate=t.getDuedate();
				bamount=t.getAmount();
			}	
		}
	    }
            String classdir = (String) config.getInitParameter("web.classdir");
	    if (action.equals("showbill")){
	    out.println("<h4><a href=\""+classdir+"UniCash?action=selectaccount&billid="+inputid+"\">Pay this bill</a></h4>");
            out.println("<p><form action= " + classdir + "UniCash?action=updatebill&billid="+inputid+" method=POST> ");
	    } else {
            out.println("<p><form action= " + classdir + "UniCash?action=savebill method=POST> ");
	    }
            out.println("<table BORDER COLS=1 WIDTH=\"90%\" NOSAVE > ");
	    out.println("<tr><td><table border cols=4 width=\"90%\" NOSAVE> "); 
            out.println("<th WIDTH=70>Due Date</th><th WIDTH=60>Pay Date</th><th WIDTH=300>Payee/Company</th><th WIDTH=65>Amount Due</th></table>");
	    out.println("</tr>");
            out.println("<tr>");
	    out.println("<td><table boder cols=6 width=\"90%\" NOSAVE> ");
            out.println("<td WIDTH=70 ALIGN=CENTER><input type=\"text\" name=\"duedate\" size=10 value=\""+bduedate +"\"></td>");
            out.println("<td WIDTH=60 ALIGN=CENTER><input type=\"text\" name=\"paydate\" size=10 value=\""+bpaydate +"\"></td>");
            out.println("<td WIDTH=300 ALIGN=CENTER><input type=\"text\" name=\"payee\" size=58 value=\""+ bpayee+"\"></td>");
	    if (action.equals("showbill")){
            out.println("<td WIDTH=65 ALIGN=CENTER><input type=\"text\" name=\"amount\" size=10 value=\""+ bamount+"\"></td>");
	    } else {
            out.println("<td WIDTH=65 ALIGN=CENTER><input type=\"text\" name=\"amount\" size=10</td>");
	    }
	    out.println("</tr>");
	    out.println("</table>");
            out.println("<center>Memo<br><input type=\"text\" name=\"memo\" size=120 value=\""+bmemo +"\"></center></td>");
            out.println("</tr>");
	    out.println("<tr>");
            out.println("<td><input type=\"submit\" name=\"submit\"></td>");
            out.println("</tr>");
            out.println("</table>");
	    out.println("</form> ");
	    out.println("<h4><a href=\""+classdir+"UniCash?action=deletebill&billid="+inputid+"\">Delete this bill</a></h4>");
	    printFooter(req, res, out, username);
		con.close();
        }

private void doSaveAddInvItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String tcatnum = req.getParameter("catnum");
                String itemname = req.getParameter("itemname");
                String keycode = req.getParameter("keycode");
                String minquantity = req.getParameter("minquantity");
		printHeader(req, res, out, username);
		String callslip = "Stock";
		String notes = "New Item Added";
		String quantity = "0";
		int catnum = Integer.parseInt(tcatnum);
		int itemnum=0;
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String tdate = formatter.format(date);
	int hour = now.get(Calendar.HOUR_OF_DAY);
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
		UniInvItem.AddInvItem(con, catnum, itemname, keycode, minquantity);
                Vector v;
                v = UniInvItem.getIndividualItem(con, itemname);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniInvItem t = (UniInvItem) v.elementAt(i);
				itemnum=t.getItemNum();
		}
                UniInvDetail.addInvTrans(con, callslip, itemnum, tdate, notes, quantity);
		out.println("INSERT INTO inv_detail (itemnum, date, callslip, quantity, notes) Values ('" + itemnum + "','" +tdate+ "','"+callslip+"','"+quantity+"','"+notes+"')");
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showcatitems&catnum="+catnum);
		printFooter(req, res, out, username);
            }


private void doSaveAddPackageItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String tcatID = req.getParameter("catnum");
                String pkgID = req.getParameter("pkgID");
                String pkgDesc = req.getParameter("pkgDesc");
                String tpkgLaborHours = req.getParameter("pkgLaborHours");
                String tpkgPartsCost = req.getParameter("pkgPartsCost");
		String adjper=req.getParameter("adjper");
                int catID  = Integer.parseInt(tcatID);
                int pkgLaborHours = Integer.parseInt(tpkgLaborHours);
                double pkgPartsCost  = Double.parseDouble(tpkgPartsCost);
		printHeader(req, res, out, username);
		UniPkgItems.addPkgItem(con, catID, pkgID, pkgDesc, pkgLaborHours, pkgPartsCost);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showpackageitems&catnum="+catID+"&adjper="+adjper);
            }

private void doSaveAddQuoteItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String tcatnum = req.getParameter("catnum");
                String itemname = req.getParameter("itemname");
                String investment = req.getParameter("investment");
                String mannum = req.getParameter("mannum");
		printHeader(req, res, out, username);
		int catnum = Integer.parseInt(tcatnum);
		UniQuoteItem.AddItem(con, catnum, itemname, mannum, investment);
		res.sendRedirect(""+classdir+"UniCash?action=showquotecatitems&catnum="+catnum);
		con.close();
		printFooter(req, res, out, username);
            }

private void doUpdateQuoteItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String titemnum = req.getParameter("itemnum");
                String tcatnum = req.getParameter("catnum");
                String itemname = req.getParameter("itemname");
                String mannum = req.getParameter("mannum");
                String investment = req.getParameter("investment");
		printHeader(req, res, out, username);
		int itemnum = Integer.parseInt(titemnum);
		int catnum = Integer.parseInt(tcatnum);
		UniQuoteItem.UpdateItem(con, itemnum, catnum, itemname, mannum, investment);
		out.println("Your item has been updated in the database<br>");
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showquotecatitems&catnum="+catnum);
		printFooter(req, res, out, username);
            }

private void doUpdateInvItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
                String titemnum = req.getParameter("itemnum");
                String tcatnum = req.getParameter("catnum");
                String itemname = req.getParameter("itemname");
                String keycode = req.getParameter("keycode");
                String minquantity = req.getParameter("minquantity");
		printHeader(req, res, out, username);
		int itemnum = Integer.parseInt(titemnum);
		int catnum = Integer.parseInt(tcatnum);
               
		 UniInvItem.UpdateItem(con, itemnum, catnum, itemname, keycode, minquantity);
		out.println("Your item has been updated in the database<br>");
		out.println("<a href=\""+ classdir + "UniCash?action=showcatitems&catnum="+catnum+"\">Return to List</a>");
		con.close();
		printFooter(req, res, out, username);
            }
  
  private void doListAllReminders(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
                printHeader(req, res, out, username);
		out.println("<a href=\""+ classdir + "UniCash?action=addremind\">Add Reminder</a>");	
		out.println("<table COLS=5 WIDTH=\"90%\" BGCOLOR=\"#FFFFFF\" NOSAVE >");
                out.println("<th ALIGN=LEFT><h4>Remind On<br>Date</h4></th><th ALIGN=LEFT><h4>Due Date</h4></th><th ALIGN=LEFT><h4>Short Description</h4></th> <th ALIGN=LEFT><h4>Notes</h4></th><th ALIGN=LEFT></th> ");

                Vector v;
                v = UniRemind.getAllItems(con);

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniRemind t = (UniRemind) v.elementAt(i);
			int bguid = t.getReminderguid();

                       	out.println("<tr>");
                        out.println("<td>");
                        out.println(t.getReminddate()+"</td>");
                        out.println("<td>");
                        out.println(t.getDuedate()+"</td>");
                        out.println("</td>");
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=showonereminder&reminderid="+bguid+">"+t.getShortDesc()+"</td>");
                        out.println("</td>");
                        out.println("<td>");
                        out.println(t.getNotes()+"</td>");
                        out.println("</td>");
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=deletereminder&reminderid="+bguid+">Delete</td>");
                        out.println("</tr>");
                }

                out.println("</table>");
                printFooter(req, res, out, username);
		con.close();
	}

private void doEditReminder(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
            printHeader(req, res, out, username);
                String sreminderguid = req.getParameter("reminderid");
                int reminderguid = Integer.parseInt(sreminderguid);
	    String inputid="";
	    String rname="";
	    String rdate="";
	    String rshortdesc="";
	    String rallusers="";
	    String rnotes="";
	    String rduedate="";
	    String rguid="";
            String classdir = (String) config.getInitParameter("web.classdir");
		Vector v;
                v = UniRemind.getSingleItem(con, reminderguid);

                for (int i = 0 ; i < v.size(); i++)
                {
                        UniRemind t = (UniRemind) v.elementAt(i);
                        int bguid = t.getReminderguid();
			rshortdesc = t.getShortDesc();
			String notes = t.getNotes();
			rdate = t.getReminddate();
			rduedate = t.getDuedate();		
            
 	out.println("<p><form action= " + classdir + "UniCash?action=updateremind method=POST> ");
	    out.println("<table boder=1 cols=2 width=\"90%\" NOSAVE> ");
            out.println("<tr><td>Due Date:</td><td><input type=\"text\" name=\"duedate\" size=10 value=\""+rduedate +"\"></td></tr>");
            out.println("<tr><td>Remind On:</td><td><input type=\"text\" name=\"reminddate\" size=10 value=\""+rdate +"\"></td></tr>");
            out.println("<tr><td>Short Description</td><td><input type=\"text\" name=\"shortdesc\" size=58 value=\""+rshortdesc +"\"></td></tr>");
		out.println("<tr><td>Notes:</td><td>");
		out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width:500px\">"+notes+"</textarea>");
		out.println("</td></tr>");
            out.println("<tr><td>Save</td><td><input type=\"submit\" name=\"submit\"></td></tr>");
            out.println("</table>");
	out.println("<input type=\"hidden\" name=\"remid\" value=\""+bguid+"\">");
	    out.println("</form><br><br> ");
	    out.println("<a href=\""+ classdir + "UniCash?action=reminders\">Return to Reminder List</a>");
		con.close();
       } 
}

private void doAddRemindForm(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
            printHeader(req, res, out, username);
	    String inputid="";
	    String rname="";
	    String rdate="";
	    String rshortdesc="";
	    String rallusers="";
	    String rnotes="";
	    String rduedate="";
	    String rguid="";
            String classdir = (String) config.getInitParameter("web.classdir");
            out.println("<p><form action= " + classdir + "UniCash?action=saveremind method=POST> ");
	    out.println("<table boder=1 cols=2 width=\"90%\" NOSAVE> ");
            out.println("<tr><td>Due Date:</td><td><input type=\"text\" name=\"duedate\" size=10 value=\""+rduedate +"\"></td></tr>");
            out.println("<tr><td>Remind On:</td><td><input type=\"text\" name=\"reminddate\" size=10 value=\""+rdate +"\"></td></tr>");
            out.println("<tr><td>Short Description</td><td><input type=\"text\" name=\"shortdesc\" size=58 value=\""+rshortdesc +"\"></td></tr>");
		out.println("<tr><td>Notes:</td><td>");
		out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width:500px\"></textarea>");
		out.println("</td></tr>");
            out.println("<tr><td>Save</td><td><input type=\"submit\" name=\"submit\"></td></tr>");
            out.println("</table>");
	    out.println("</form><br><br> ");
	    out.println("<a href=\""+ classdir + "UniCash?action=reminders\">Return to Reminder List</a>");
		con.close();
        }

private void doSaveNote(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
				 String classdir = (String) config.getInitParameter("web.classdir");
			String action = req.getParameter("action");
			String custnum  = req.getParameter("custnum");
			String custsitenum = req.getParameter("custsitenum");
			String sitenum = req.getParameter("sitenum");
			String callslip = req.getParameter("callslip");
			String psource = req.getParameter("psource");
			String crecnum=req.getParameter("crecnum");
			String note = req.getParameter("note");
			String ndate=req.getParameter("ndate");
			int servsync=0;	
	    if (psource.equalsIgnoreCase("editinspection")) {
            InspectNotes.AddItem(con, custsitenum, sitenum, username, callslip, ndate, note, servsync);
	    res.sendRedirect(""+classdir+"UniCash?action=editinspection&icrecnum="+crecnum+"&custnum="+custnum+"");
	    }
	    if (psource.equalsIgnoreCase("editcallslip")) {
            CallslipNotes.AddItem(con, custsitenum, sitenum, username, callslip, ndate, note, servsync);
	    res.sendRedirect(""+classdir+"UniCash?action=editcallslip&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"");
	    }
	
	    con.close();
        }


private void doDeleteNote(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
				 String classdir = (String) config.getInitParameter("web.classdir");
			String action = req.getParameter("action");
			String custnum  = req.getParameter("custnum");
			String custsitenum = req.getParameter("custsitenum");
			String sitenum = req.getParameter("sitenum");
			String callslip = req.getParameter("callslip");
			String psource = req.getParameter("psource");
			String crecnum=req.getParameter("crecnum");
			String note = req.getParameter("note");
			String recnum=req.getParameter("recnum");
			String ndate=req.getParameter("ndate");
			int servsync=0;	
	    if (psource.equalsIgnoreCase("editinspection")) {
            InspectNotes.deleteItem(con, recnum);
	    res.sendRedirect(""+classdir+"UniCash?action=editinspection&icrecnum="+crecnum+"&custnum="+custnum+"");
	    }
	   if (psource.equalsIgnoreCase("editcallslip")) {
            CallslipNotes.deleteItem(con, recnum);
	    res.sendRedirect(""+classdir+"UniCash?action=editcallslip&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"");
	    }
	    con.close();
        }

private void doAddNote(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
			String action = req.getParameter("action");
			String custnum  = req.getParameter("custnum");
			String custsitenum = req.getParameter("custsite");
			String sitenum = req.getParameter("sitenum");
			String callslip = req.getParameter("callslip");
			String psource = req.getParameter("psource");
			String crecnum=req.getParameter("crecnum");
			Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        printHeader(req, res, out, username);
       SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
       formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
            String classdir = (String) config.getInitParameter("web.classdir");
            out.println("<p><form action= " + classdir + "UniCash?action=savenote method=POST> ");
	    out.println("<table border=1 cols=2 width=\"90%\" NOSAVE> ");
	    out.println("<tr><td>Notes:</td><td>");
	    out.println("<textarea name=\"note\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width:500px\"></textarea>");
	    out.println("</td></tr>");
            out.println("<tr><td>Save</td><td><input type=\"submit\" name=\"submit\"></td></tr>");
            out.println("</table>");
	    out.println("<input type=\"hidden\" name=\"ndate\" value=\""+s+"\">");
	    out.println("<input type=\"hidden\" name=\"userlogin\" value=\""+username+"\">");
	    out.println("<input type=\"hidden\" name=\"custsitenum\" value=\""+custsitenum+"\">");
	    out.println("<input type=\"hidden\" name=\"sitenum\" value=\""+sitenum+"\">");
	    out.println("<input type=\"hidden\" name=\"callslip\" value=\""+callslip+"\">");
	    out.println("<input type=\"hidden\" name=\"psource\" value=\""+psource+"\">");
	    out.println("<input type=\"hidden\" name=\"custnum\" value=\""+custnum+"\">");
	    out.println("<input type=\"hidden\" name=\"crecnum\" value=\""+crecnum+"\">");
	    out.println("</form><br><br> ");
	    if (psource.equalsIgnoreCase("editinspection")) {
	    out.println("<a href=\""+ classdir + "UniCash?action=editinspection&icrecnum="+crecnum+"&custnum="+custnum+"\">Return to Inspection</a>");
	    }
	    if (psource.equalsIgnoreCase("editcallslip")) {
	    out.println("<a href=\""+ classdir + "UniCash?action=editcallslip&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"\">Return to Inspection</a>");
	    }	
	    con.close();
        }

private void doSaveRemind(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		String inputid="";
		String action = req.getParameter("action");
		if (action.equals("updateremind")){
	    		inputid = req.getParameter("remid");
		}
                String duedate = req.getParameter("duedate");
                String reminddate = req.getParameter("reminddate");
                String shortdesc = req.getParameter("shortdesc");
                String notes = req.getParameter("notes");

                if (duedate == null || duedate.length() < 1)
	               {
                         out.println("Due Date is missing - Use the back key on your browser");
                         return;
	                 }
                if (reminddate  == null || reminddate.length() < 1)
                  {
                      out.println("Reminder Date is missing - Use back key on your browser");
                      return;
                  }
                if (shortdesc  == null || shortdesc.length() < 1)
                  {
                      out.println("Short Description is missing - Use back key on your browser");
                      return;
                  }
                 
		printHeader(req, res, out, username);
                
		if (action.equals("updateremind")){
		UniRemind.UpdateItem(con, duedate, reminddate, shortdesc, notes, inputid);
               	} else { 
		UniRemind.addRemindItem(con, duedate, reminddate, shortdesc, notes);
		}
		con.close();
		if (action.equals("updateremind")){
		res.sendRedirect(""+classdir+"UniCash?action=reminders");

		}else {
		res.sendRedirect(""+classdir+"UniCash?action=reminders");
		}
		printFooter(req, res, out, username);
            }


private void doSaveSurvey(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
		String custnum = req.getParameter("custnum");
                String recnum = req.getParameter("recnum");
                String action = req.getParameter("action");
		int intrecnum=0;
		if (action.equalsIgnoreCase("updatesurvey"))
	                        {
                intrecnum = Integer.parseInt(recnum);
				}
                int intcustnum = Integer.parseInt(custnum);
        	int ecustnum=0;
        	int eenum=0;
        	String brand=req.getParameter("brand");
        	String sdate=req.getParameter("sdate");
        	String modelnum=req.getParameter("modulenum");
        	String serialnum=req.getParameter("serialnum");
        	String filter=req.getParameter("filter");
        	String notes=req.getParameter("notes");
		String gpipingsize=req.getParameter("gpipingsize");
		String dwaterfeedsize=req.getParameter("dwaterfeedsize");
		String dwatersupplysize=req.getParameter("dwatersupplysize");
		String bwatersupplysize=req.getParameter("bwatersupplysize");
		String bwaterreturnsize=req.getParameter("bwaterreturnsize");
		String numzones=req.getParameter("numzones");
		String supplymanifold=req.getParameter("supplymanifold");
		String returnmanifold=req.getParameter("returnmanifold");
		String zonecontrol=req.getParameter("zonecontrol");
		String nfloors=req.getParameter("nfloors");
		String olength=req.getParameter("olength");
		String owidth=req.getParameter("owidth");
		String oheight=req.getParameter("oheight");
		String buse=req.getParameter("buse");
		String bage=req.getParameter("bage");
		String bventalation=req.getParameter("bventalation");
		String bhumidification=req.getParameter("bhumidification");
		String bcontrols=req.getParameter("bcontrols");
		String ecurrentvoltage=req.getParameter("ecurrentvoltage");
		String ecurrentphase=req.getParameter("ecurrentphase");
		String evoltageneeded=req.getParameter("evoltageneeded");
		String ephaseneeded=req.getParameter("ephaseneeded");
		String epanbrand=req.getParameter("epanbrand");
		String epanelroom=req.getParameter("epanelroom");
		String epanlocation=req.getParameter("epanlocation");
		String eaddwork=req.getParameter("eaddwork");
		String fueltype=req.getParameter("fueltype");
		String furntype=req.getParameter("furntype");
		String windowtype=req.getParameter("windowtype");
		String glasstype=req.getParameter("glasstype");
		String stormwindows=req.getParameter("stormwindows");
		String doortype=req.getParameter("doortype");
		String infiltration=req.getParameter("infiltration");
//		String ="-";
//
		if (action.equalsIgnoreCase("savesurvey"))
	                        {
 				Survey.AddItem(con, intcustnum, gpipingsize, dwaterfeedsize, dwatersupplysize, bwatersupplysize, bwaterreturnsize, supplymanifold, returnmanifold, numzones, zonecontrol, nfloors, olength, owidth, oheight, buse, bage, bventalation, bhumidification, bcontrols, ecurrentvoltage, ecurrentphase, evoltageneeded, ephaseneeded, epanbrand, epanelroom, epanlocation, eaddwork, fueltype, furntype, windowtype, glasstype, stormwindows, doortype, infiltration, doFormatDateDb(getDateDb(sdate)));		
				}
//
		if (action.equalsIgnoreCase("updatesurvey"))
	                        {
 				Survey.UpdateItem(con, intrecnum, intcustnum, gpipingsize, dwaterfeedsize, dwatersupplysize, bwatersupplysize, bwaterreturnsize, supplymanifold, returnmanifold, numzones, zonecontrol, nfloors, olength, owidth, oheight, buse, bage, bventalation, bhumidification, bcontrols, ecurrentvoltage, ecurrentphase, evoltageneeded, ephaseneeded, epanbrand, epanelroom, epanlocation, eaddwork, fueltype, furntype, windowtype, glasstype, stormwindows, doortype, infiltration,  doFormatDateDb(getDateDb(sdate)));		
				}

		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=1&custnum="+custnum);
	}

private void doAddSurvey(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	formatter = new SimpleDateFormat("MM-dd-yyyy");
	String s = formatter.format(date);
		int intrecnum=0;
		String custnum = req.getParameter("custnum");
                String action = req.getParameter("action");
		if (action.equalsIgnoreCase("editsurvey"))
	                        {
                String recnum  = req.getParameter("recnum");
                intrecnum = Integer.parseInt(recnum);
				}
                int intcustnum = Integer.parseInt(custnum);
        	int ecustnum=0;
        	int eenum=0;
		String sdate=null;
        	String brand=null;
        	String modelnum=null;
        	String serialnum=null;
        	String filter=null;
        	String notes=null;
		String gpipingsize="-";
		String dwaterfeedsize="-";
		String dwatersupplysize="-";
		String bwatersupplysize="-";
		String bwaterreturnsize="-";
		String supplymanifold="-";
		String returnmanifold="-";
		String numzones="-";
		String zonecontrol="-";
		String nfloors="-";
		String olength="-";
		String owidth="-";
		String oheight="-";
		String buse="-";
		String bage="-";
		String bventalation="-";
		String bhumidification="-";
		String bcontrols="-";
		String ecurrentvoltage="-";
		String ecurrentphase="-";
		String evoltageneeded="-";
		String ephaseneeded="-";
		String epanbrand="-";
		String epanelroom="-";
		String epanlocation="-";
		String eaddwork="-";
		String fueltype="-";
		String furntype="-";
		String windowtype="-";
		String glasstype="-";
		String stormwindows="-";
		String doortype="-";
		String infiltration="-";
//		String ="-";
//
	
		int counter=0;
                Vector v;
//
		if (action.equalsIgnoreCase("editsurvey"))
	                        {

        	v = Survey.getIndItem(con, intrecnum);
		
                for (int i = 0 ; i < v.size(); i++)
                {
                Survey t = (Survey) v.elementAt(i);

        	intrecnum=t.getRecnum();
        	intcustnum=t.getCustnum();
		gpipingsize=t.getPipingsize();
		dwaterfeedsize=t.getDwaterfeedsize();
		dwatersupplysize=t.getDwatersupplysize();
		bwatersupplysize=t.getBwatersupplysize();
		bwaterreturnsize=t.getBwaterreturnsize();
		supplymanifold=t.getSupplymanifold();
		returnmanifold=t.getReturnmanifold();
		numzones=t.getNumzones();
		zonecontrol=t.getZonecontrol();
		nfloors=t.getNfloors();
		olength=t.getOlength();
		owidth=t.getOwidth();
		oheight=t.getOheight();
		buse=t.getBuse();
		bage=t.getBage();
		bventalation=t.getBventalation();
		bhumidification=t.getBhumidification();
		bcontrols=t.getBcontrols();
		ecurrentvoltage=t.getEcurrentvoltage();
		ecurrentphase=t.getEcurrentphase();
		evoltageneeded=t.getEvoltageneeded();
		ephaseneeded=t.getEphaseneeded();
		epanbrand=t.getEpanbrand();
		epanelroom=t.getEpanelroom();
		epanlocation=t.getEpanlocation();
		eaddwork=t.getEaddwork();
		fueltype=t.getFueltype();
		furntype=t.getFurntype();
		windowtype=t.getWindowtype();
		glasstype=t.getGlasstype();
		stormwindows=t.getStormwindows();
		doortype=t.getDoortype();
		infiltration=t.getInfiltration();
		sdate= doFormatDate(getDate(t.getSdate()));
			}
				}	

		out.println("<html>");
		if (action.equalsIgnoreCase("editsurvey"))
	                        {
		out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatesurvey&custnum="+custnum+"\" name=\"addsurvey\">");
				} else {
		out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savesurvey&custnum="+custnum+"\" name=\"addsurvey\">");
				}
//ALL BUILDING INFORMATION HERE
//
//
		if (action.equalsIgnoreCase("editsurvey"))
	                        {
		out.println("<input type=\"hidden\" name=\"recnum\" value=\""+intrecnum+"\">");
				}
		if (action.equalsIgnoreCase("editsurvey"))
	                        {
		out.println("<tr>");
		out.println("<td width=\"40%\">Survey Date:</td><td>");
		out.println("<input type=\"text\" name=\"sdate\" size=\"30\" value=\""+sdate +"\">");
				} else {
		out.println("<tr>");
		out.println("<td width=\"40%\">Survey Date:</td><td>");
		out.println("<input type=\"text\" name=\"sdate\" size=\"30\" value=\""+s +"\">");
				}

		out.println("</td>");
		
		out.println("<h3>Building</h3>");
		out.println("<table border=\"1\" width=\"100%\" >");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Number Floors:</td><td>");
		out.println("<input type=\"text\" name=\"nfloors\" size=\"30\" value=\""+nfloors +"\">");
		out.println("</td>");
		out.println("</tr>");

		out.println("<tr>");
		out.println("<td width=\"40%\">Outside Length:</td><td>");
		out.println("<input type=\"text\" name=\"olength\" size=\"30\" value=\""+olength +"\">");
		out.println("</td>");
		out.println("</tr>");

		out.println("<tr>");
		out.println("<td width=\"40%\">Outside Width:</td><td>");
		out.println("<input type=\"text\" name=\"owidth\" size=\"30\" value=\""+owidth +"\">");
		out.println("</td>");
		out.println("</tr>");

		out.println("<tr>");
		out.println("<td width=\"40%\">Outside Height (conditioned):</td><td>");
		out.println("<input type=\"text\" name=\"oheight\" size=\"30\" value=\""+oheight +"\">");
		out.println("</td>");
		out.println("</tr>");

		out.println("<tr>");
		out.println("<td width=\"40%\">Building Use:</td><td>");
		out.println("<input type=\"text\" name=\"buse\" size=\"30\" value=\""+buse +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Building Age:</td><td>");
		out.println("<input type=\"text\" name=\"bage\" size=\"30\" value=\""+bage +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">System Type:</td><td>");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Ventalation:</td><td>");
		out.println("<input type=\"text\" name=\"bventalation\" size=\"30\" value=\""+bventalation +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Humidification:</td><td>");
		out.println("<input type=\"text\" name=\"bhumidification\" size=\"30\" value=\""+bhumidification +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Controls Used:</td><td>");
		out.println("<input type=\"text\" name=\"bcontrols\" size=\"30\" value=\""+bcontrols +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Supply Distribution:</td><td>");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Return System:</td><td>");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("</table>");

		out.println("<h3>Electrical</h3>");
		out.println("<table border=\"1\" width=\"100%\" >");
// Current Electrical
//
		out.println("<tr>");
		out.println("<td width=\"40%\">Current Voltage:</td>");
		out.println("<td width=\"50%\" align=\"left\"><select align=\"left\" width=\"50\" name=\"ecurrentvoltage\" value=\""+ecurrentvoltage +"\">");
                v = SupEVoltage.getAllItems(con);
		out.println("<option value=\""+ecurrentvoltage+"\">"+ecurrentvoltage+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupEVoltage t = (SupEVoltage) v.elementAt(i);
		out.println("<option value="+t.getEVoltage()+">"+t.getEVoltage()+"</option>");
		}
		out.println("</select></td></tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Current Phase:</td>");
		out.println("<td width=\"51%\" align=\"left\"><select width=\"50\" name=\"ecurrentphase\" value=\""+ecurrentphase +"\">");
                v = SupEPhase.getAllItems(con);
		out.println("<option value=\""+ecurrentphase+"\">"+ecurrentphase+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupEPhase t = (SupEPhase) v.elementAt(i);
		out.println("<option value="+t.getEPhase()+">"+t.getEPhase()+"</option>");
		}
		out.println("</select></td></tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Voltage Needed:</td>");
		out.println("<td width=\"50%\" align=\"left\"><select width=\"50\" name=\"evoltageneeded\" value=\""+evoltageneeded +"\">");
                v = SupEVoltage.getAllItems(con);
		out.println("<option value=\""+evoltageneeded+"\">"+evoltageneeded+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupEVoltage t = (SupEVoltage) v.elementAt(i);
		out.println("<option value="+t.getEVoltage()+">"+t.getEVoltage()+"</option>");
		}
		out.println("</select></td></tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Phase Needed:</td>");
		out.println("<td width=\"50%\" align=\"left\"><select width=\"50\" name=\"ephaseneeded\" value=\""+ephaseneeded +"\">");
                v = SupEPhase.getAllItems(con);
		out.println("<option value=\""+ephaseneeded+"\">"+ephaseneeded+"</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupEPhase t = (SupEPhase) v.elementAt(i);
		out.println("<option value="+t.getEPhase()+">"+t.getEPhase()+"</option>");
		out.println("<option value=\"-\">-</option>");
		}
		out.println("</select></td></tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Brand of Panel:</td>");
		out.println("<td><input type=\"text\" name=\"epanbrand\" size=\"30\" value=\""+epanbrand +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Room in Panel:</td>");
		out.println("<td width=\"50%\" align=\"left\"><select width=\"50\" name=\"epanelroom\" value=\""+epanelroom +"\">");
                v = SupYesNo.getAllItems(con);
		out.println("<option value=\""+epanelroom+"\">"+epanelroom+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupYesNo t = (SupYesNo) v.elementAt(i);
		out.println("<option value="+t.getAnswer()+">"+t.getAnswer()+"</option>");
		}
		out.println("</select></td></tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Panel Location:</td>");
		out.println("<td><input type=\"text\" name=\"epanlocation\" size=\"30\" value=\""+epanlocation +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Additional Electrical Work:</td>");
		out.println("<td><input type=\"text\" name=\"eaddwork\" size=\"60\" value=\""+eaddwork +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("</table>");
		
// Equipment Information
//
		out.println("<h3>Equipment Type</h3>");
		out.println("<table border=\"1\" width=\"100%\" >");

// Fuel Type Here	
//
		out.println("<tr><td width=\"40%\">Fuel Type</td>");
		out.println("<td width=\"50%\"><select width=\"50\" name=\"fueltype\" value=\""+fueltype +"\">");
                v = SupFuelType.getAllItems(con);
		out.println("<option value=\""+fueltype+"\">"+fueltype+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupFuelType t = (SupFuelType) v.elementAt(i);
		out.println("<option value="+t.FuelType()+">"+t.FuelType()+"</option>");
		}
		out.println("</select></td></tr>");

// Furnace Type Here
//
	
		out.println("<tr><td width=\"40%\">Furn Type</td>");
		out.println("<td width=\"50%\"><select width=\"50\" name=\"furntype\" value=\""+furntype +"\">");
                v = SupFurnType.getAllItems(con);
		out.println("<option value=\""+furntype+"\">"+furntype+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupFurnType t = (SupFurnType) v.elementAt(i);
		out.println("<option value="+t.FurnType()+">"+t.FurnType()+"</option>");
		}
		out.println("</select></td></tr>");


		out.println("</table>");


//Piping size here
		
		out.println("<h3>Hydronic/Piping Information</h3>");
		out.println("<table border=\"1\" width=\"100%\" >");
		out.println("<tr>");
		out.println("<td width=\"40%\">Gas Pipe Size:</td>");
		out.println("<td><input type=\"text\" name=\"gpipingsize\" size=\"60\" value=\""+gpipingsize +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Domestic Water Feed Size:</td>");
		out.println("<td><input type=\"text\" name=\"dwaterfeedsize\" size=\"60\" value=\""+dwaterfeedsize +"\">");
		out.println("</td>");
		out.println("</tr>");
		
		out.println("<tr>");
		out.println("<td width=\"40%\">Domestic Water Supply Size:</td>");
		out.println("<td><input type=\"text\" name=\"dwatersupplysize\" size=\"60\" value=\""+dwatersupplysize +"\">");
		out.println("</td>");
		out.println("</tr>");

		
		out.println("<tr>");
		out.println("<td width=\"40%\">Boiler Water Supply Size:</td>");
		out.println("<td><input type=\"text\" name=\"bwatersupplysize\" size=\"60\" value=\""+bwatersupplysize +"\">");
		out.println("</td>");
		out.println("</tr>");

		
		out.println("<tr>");
		out.println("<td width=\"40%\">Boiler Water Return Size:</td>");
		out.println("<td><input type=\"text\" name=\"bwaterreturnsize\" size=\"60\"  value=\""+bwaterreturnsize +"\">");
		out.println("</td>");
		out.println("</tr>");


		out.println("<tr><td width=\"40%\">Supply Manifold:</td>");
		out.println("<td width=\"50%\"><select width=\"50\" name=\"supplymanifold\" value=\""+supplymanifold +"\">");
                v = SupYesNo.getAllItems(con);
		out.println("<option value=\""+supplymanifold+"\">"+supplymanifold+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupYesNo t = (SupYesNo) v.elementAt(i);
		out.println("<option value="+t.getAnswer()+">"+t.getAnswer()+"</option>");
		}
		out.println("</select></td></tr>");


		out.println("<tr><td width=\"40%\">Return Manifold:</td>");
		out.println("<td width=\"50%\"><select width=\"50\" name=\"returnmanifold\" value=\""+returnmanifold +"\">");
                v = SupYesNo.getAllItems(con);
		out.println("<option value=\""+returnmanifold+"\">"+returnmanifold+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupYesNo t = (SupYesNo) v.elementAt(i);
		out.println("<option value="+t.getAnswer()+">"+t.getAnswer()+"</option>");
		}
		out.println("</select></td></tr>");

		
		out.println("<tr>");
		out.println("<td width=\"40%\">Number Zones:</td>");
		out.println("<td><input type=\"text\" name=\"numzones\" size=\"60\" value=\""+numzones +"\">");
		out.println("</td>");
		out.println("</tr>");

		
		out.println("<tr>");
		out.println("<td width=\"40%\">Zones Control:</td>");
		out.println("<td><input type=\"text\" name=\"zonecontrol\" size=\"60\"  value=\""+zonecontrol +"\">");
		out.println("</td>");
		out.println("</tr>");

		out.println("</table>");


// Window Type Here	
//
/*		out.println("<h3>Windows</h3>");
		out.println("<table border=\"1\" width=\"100%\" >");
		out.println("<tr><td width=\"40%\">Window Type</td>");
		out.println("<td width=\"50%\"><select width=\"50\" name=\"windowtype\" value=\""+windowtype +"\">");
                v = SupWinType.getAllItems(con);
		out.println("<option value=\""+windowtype+"\">"+windowtype+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupWinType t = (SupWinType) v.elementAt(i);
		out.println("<option value="+t.WinType()+">"+t.WinType()+"</option>");
		}
		out.println("</select></td></tr>");
// Glass Type Here
//
		out.println("<tr><td width=\"40%\">Glass Type</td>");
		out.println("<td width=\"50%\"><select width=\"50\" name=\"glasstype\" value=\""+glasstype +"\">");
                v = SupGlassType.getAllItems(con);
		out.println("<option value=\""+glasstype+"\">"+glasstype+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupGlassType t = (SupGlassType) v.elementAt(i);
		out.println("<option value="+t.GlassType()+">"+t.GlassType()+"</option>");
		}
		out.println("</select></td></tr>");

// Storm Windows Here
//
		out.println("<tr><td width=\"40%\">Storm Windows</td>");
		out.println("<td width=\"50%\"><select width=\"50\" name=\"stormwindows\" value=\""+stormwindows +"\">");
                v = SupYesNo.getAllItems(con);
		out.println("<option value=\""+stormwindows+"\">"+stormwindows+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupYesNo t = (SupYesNo) v.elementAt(i);
		out.println("<option value="+t.getAnswer()+">"+t.getAnswer()+"</option>");
		}
		out.println("</select></td></tr>");

// Door Types Here
//
		out.println("<tr><td width=\"40%\">Door Type</td>");
		out.println("<td width=\"50%\"><select width=\"50\" name=\"doortype\" value=\""+doortype +"\">");
                v = SupDoorType.getAllItems(con);
		out.println("<option value=\""+doortype+"\">"+doortype+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupDoorType t = (SupDoorType) v.elementAt(i);
		out.println("<option value="+t.DoorType()+">"+t.DoorType()+"</option>");
		}
		out.println("</select></td></tr>");

// Infiltration 
//
		out.println("<tr><td width=\"40%\">Infiltration</td>");
		out.println("<td width=\"50%\"><select width=\"50\" name=\"infiltration\" value=\""+infiltration +"\">" );
		out.println("<option value=\""+infiltration+"\">"+infiltration+"</option>");
		out.println("<option value=\"-\">-</option>");
                v = SupInfiltration.getAllItems(con);
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupInfiltration t = (SupInfiltration) v.elementAt(i);
		out.println("<option value="+t.Infiltration()+">"+t.Infiltration()+"</option>");
		}
		out.println("</select></td></tr>");


		out.println("</table>");
	*/
// Current Equipment
//
		out.println("<h3>Existing Equipment</h3>");

        v = UniEquip.getAllItems(con,intcustnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Number</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniEquip t = (UniEquip) v.elementAt(i);
		eenum=t.getId();
		ecustnum=t.getCustnum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		notes=t.getNotes();
                out.println("<tr><td>"+eenum+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
                }
		out.println("</table><br><br>");

		out.println("</table>");
		out.println("<h3>Select Existing Equipment</h3>");
		out.println("<table size=100% border=1>");
		out.println("<tr><td>Equipment 1</td><td><input type=\"text\" name=\"equip1\" size=\"30\"</td><td>Equipment 2</td><td><input type=\"text\" name=\"equip2\" size=\"30\"></td></tr>");
		out.println("<tr><td>Equipment 3</td><td><input type=\"text\" name=\"equip3\" size=\"30\"</td><td>Equipment 4</td><td><input type=\"text\" name=\"equip4\" size=\"30\"></td></tr>");
		out.println("<tr><td>Equipment 5</td><td><input type=\"text\" name=\"equip5\" size=\"30\"</td><td>Equipment 6</td><td><input type=\"text\" name=\"equip6\" size=\"30\"></td></tr>");
		out.println("</table>");


		out.println("<br><br>");
		out.println("<CENTER>");
		out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
		out.println("<INPUT TYPE=\"reset\">");
		out.println("</CENTER>");
		out.println("</form>");
		out.println("</html>");

		con.close();
	}


  private void doStyleSheet2(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<style type=\"text/css\"><!-- body,table { color: #000000; background-color: #ffffff; margin-left: 0px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; font-size: .5em; font-family: Arial, Helvetica, sans-serif; } ");
	out.println(" .tableoffcolor { font-family: Arial, Helvetica, sans-serif; font-size: 1em; background-color: #A0B8C8; height: auto; width: auto; margin: 1em; padding: 1em; border: thin solid; } ");
	out.println(" .tableoffcolor2 { font-family: Arial, Helvetica, sans-serif; font-size: 1em; background-color: #grey; height: auto; width: auto; margin: 1em; padding: 1em; border: thin solid; } ");
	out.println("--> </style>");
	}


  public static void doStyleSheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<style type=\"text/css\"><!-- body,table { color: #000000; background-color: #ffffff; margin-left: 0px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; font-size: .9em; font-family: Arial, Helvetica, sans-serif; } ");
	out.println(" .tableoffcolor { font-family: Arial, Helvetica, sans-serif; font-size: 1em; background-color: #A0B8C8; height: auto; width: auto; margin: 1em; padding: 1em; border: thin solid; } ");
	out.println(" .tableoffcolor2 { font-family: Arial, Helvetica, sans-serif; font-size: 1em; background-color: #grey; height: auto; width: auto; margin: 1em; padding: 1em; border: thin solid; } ");
	out.println("--> </style>");
	}

	 public static String doStyleSheetString(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username, String mbody)
                throws Exception
        {
	mbody=combinestring(mbody,"<style type=\"text/css\"><!-- body,table { color: #000000; background-color: #ffffff; margin-left: 0px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; font-size: .9em; font-family: Arial, Helvetica, sans-serif; } ");
	mbody=combinestring(mbody," .tableoffcolor { font-family: Arial, Helvetica, sans-serif; font-size: 1em; background-color: #A0B8C8; height: auto; width: auto; margin: 1em; padding: 1em; border: thin solid; } ");
	mbody=combinestring(mbody," .tableoffcolor2 { font-family: Arial, Helvetica, sans-serif; font-size: 1em; background-color: #grey; height: auto; width: auto; margin: 1em; padding: 1em; border: thin solid; } ");
	mbody=combinestring(mbody,"--> </style>");
	return mbody;
	}
	
public static void doMenuStyleSheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
	      throws Exception
      {
      out.println("<style type=\"text/css\"><!-- body,table { color: #000000; background-color: #A0B8C8; margin-left: 2px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; font-size: .9em; font-family: Arial, Helvetica, sans-serif; } ");
      out.println(" .tableoffcolor { font-family: Arial, Helvetica, sans-serif; font-size: 1em; background-color: #A0B8C8; height: auto; width: auto; margin: 1em; padding: 1em; border: thin solid; } ");
      out.println("--> </style>");
      }


private void doWsToProposalOpt(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		String action = req.getParameter("action");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String wsnum = req.getParameter("wsnum");
		String fsellprice = req.getParameter("fsellprice");
		String lsellprice = req.getParameter("lsellprice");
		String printorder=req.getParameter("printorder");

		int pcontnum=0;
		int combineopts=0;
		int counter=0;
		double totinvestment=0.00;
		String pcustnum=null;
		String pstartdate=null;
		String penddate=null;
		String pcost=null;
		String pnotes=null;
	        int propnum=0;
                String pdate=null;
		int qcustnum=0;
                String psummary=null;
		double ptotal=0;
                int intcustnum = Integer.parseInt(tcustnum);
		String qstatus="-";

		if (action.equalsIgnoreCase("addoptiontoquote"))
		{
	out.println("<P><P>");
	out.println("Select Proposal to Add as Option");
		}
		if (action.equalsIgnoreCase("wstoproposalopt"))
		{
	out.println("<P><P>");
	out.println("Select Proposal to Add Option To");
		}

                Vector vv;
                vv = UniQuotes.getAllItems(con,intcustnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Proposal #</th><th>Date</th><th>Summary</th><th>Cost</th>");
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniQuotes tt = (UniQuotes) vv.elementAt(i);
		propnum=tt.getQuoteNum();
		qcustnum=tt.getCrecNum();
		pdate=doFormatDate(getDate(tt.getQDate()));
		psummary=tt.getQDescription();
		qstatus=tt.getQStatus();
		totinvestment=0.00;
		combineopts=tt.getCombineOpts();

                Vector vp;
                vp = UniQuoteParts.getAllItems(con,propnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniQuoteParts tp = (UniQuoteParts) vp.elementAt(j);
		ptotal=tp.getQuoteTotal();
		totinvestment=totinvestment+ptotal;
		}

		if (action.equalsIgnoreCase("wstoproposalopt"))
		{
                out.println("<tr><td><a href=\""+classdir+"UniCash?action=addoption&optquotenum="+propnum+"&wsnum="+wsnum+"&fsellprice="+fsellprice+"&lsellprice="+lsellprice+"&custnum="+qcustnum+"\">"+propnum+"</a></td><td>"+pdate+"</td><td>"+psummary+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td></tr>");
		}
		if (action.equalsIgnoreCase("addoptiontoquote"))
		{
		String quotenum = req.getParameter("quotenum");
                out.println("<tr><td><a href=\""+classdir+"UniCash?action=addoptionsave&optquotenum="+propnum+"&quotenum="+quotenum+"&custnum="+qcustnum+"&printorder="+printorder+"\">"+propnum+"</a></td><td>"+pdate+"</td><td>"+psummary+"</td><td>"+NumberFormat.getCurrencyInstance().format(totinvestment)+"</td></tr>");
		}

                }

		con.close();
	}

private void doEditCForms(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String action = req.getParameter("action");
		String csection = req.getParameter("csection");
		String formnum = req.getParameter("formnum");
		String questionnum=req.getParameter("questionnum");
		String savenext=req.getParameter("save_next");
		String formquestion=req.getParameter("formquestion");
		String formanswer = req.getParameter("formanswer");
		String recnum=req.getParameter("recnum");
		int iquestionnum=Integer.parseInt(questionnum);
		if (action.equalsIgnoreCase("updatecustformquestion"))
		{
			if (savenext.equalsIgnoreCase("Save-Next")) {
				CustFormParts.UpdateItem(con,recnum,formnum,formquestion,formanswer);
		iquestionnum++;	
		String n = EditCustomerForm.getIndividualItem (con, req, res, out, session, username, classdir, tcustnum, custstart, custstop, action, csection, formnum, ""+iquestionnum+"");
			} else 
				if (savenext.equalsIgnoreCase("Save-Prev")) {
				CustFormParts.UpdateItem(con,recnum,formnum,formquestion,formanswer);
		iquestionnum--;
		String n = EditCustomerForm.getIndividualItem (con, req, res, out, session, username, classdir, tcustnum, custstart, custstop, action, csection, formnum, ""+iquestionnum+"");
		} else if (savenext.equalsIgnoreCase("Exit")) {
			CustFormParts.UpdateItem(con,recnum,formnum,formquestion,formanswer);
        		res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&custnum="+tcustnum+"&csection=7");
			}
		}
		if (action.equalsIgnoreCase("editcustform")) {
		String n = EditCustomerForm.getIndividualItem (con, req, res, out, session, username, classdir, tcustnum, custstart, custstop, action, csection, formnum, ""+iquestionnum+"");
		}	

		}

private void doPrintPackageCompare(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String propnum = req.getParameter("recnum");
		String action = req.getParameter("action");
		String csection = req.getParameter("csection");
		if (csection==null) {
		       csection="6";
		}	       
		String n = PackageCompare2.getIndividualItem (con, req, res, out, session, username, classdir, action, propnum, tcustnum);
		}

private void doShowPropCompair(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String propnum = req.getParameter("csrec");
		String action = req.getParameter("action");
		String csection = req.getParameter("csection");
		if (csection==null) {
		       csection="1";
		}	       
		String n = PackageCompare.getIndividualItem (con, req, res, out, session, username, classdir, action, propnum, tcustnum);
		}

private void doShowCustDetail(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String action = req.getParameter("action");
		String csection = req.getParameter("csection");
		if (csection==null) {
		       csection="1";
		}	       
		String n = ShowCustomerDetail.getIndividualItem (con, req, res, out, session, username, classdir, tcustnum, custstart, custstop, action, csection);
		}


private void doAddPackCompare(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		String custsitenum = req.getParameter("custsitenum");
		String sitenum = req.getParameter("sitenum");
		String action = req.getParameter("action");
		String csection = req.getParameter("csection");

	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String packdate = formatter.format(date);
		if (csection==null) {
		       csection="6";
		}	       
		String n = AddPackCompareForm.getIndividualItem (con, req, res, out, session, username, classdir, tcustnum, custsitenum, sitenum, packdate);
		}
		
private void doAddHeatLoad(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		String custsitenum = req.getParameter("custsitenum");
		String sitenum = req.getParameter("sitenum");
		String action = req.getParameter("action");
		String csection = req.getParameter("csection");
		String recnum=req.getParameter("recnum");

	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String packdate = formatter.format(date);
		if (csection==null) {
		       csection="7";
		}	       
		String n = HeatLoadForm.getIndividualItem (con, req, res, out, session, username, classdir, tcustnum, custsitenum, sitenum, packdate, recnum);
		out.println(n+"<br>");
		con.close();
		}
private void doPrintHeatLoad(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
		throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		String custsitenum = req.getParameter("custsitenum");
		String sitenum = req.getParameter("sitenum");
		String action = req.getParameter("action");
		String csection = req.getParameter("csection");
		String recnum=req.getParameter("recnum");

	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String packdate = formatter.format(date);
		if (csection==null) {
		       csection="7";
		}	       
		String n = HeatLoadPrint.getIndividualItem (con, req, res, out, session, username, classdir, tcustnum, custsitenum, sitenum, packdate, recnum);
		out.println(n+"<br>");
		con.close();
		}

		
private void doEditEquip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String tcustnum = req.getParameter("custnum");
	String tenum = req.getParameter("eenum");
        int custnum = Integer.parseInt(tcustnum);
        int eenum = Integer.parseInt(tenum);
	String brand=null;
	String modelnum=null;
	String serialnum=null;
	String filter=null;
	String notes =null;
	String etype =null;
	String cseer =null;
	String btuout =null;
		
 	Statement stmt = con.createStatement();
	ResultSet rs = stmt.executeQuery("SELECT * FROM equipment where enum='"+eenum+"'");

		 while(rs.next())
                {
	brand=rs.getString("brand");
	modelnum=rs.getString("modelnum");
	serialnum=rs.getString("serialnum");
	filter=rs.getString("filter");
	notes=rs.getString("notes");
	etype = rs.getString("etype");
	cseer= rs.getString("cseer");
	btuout = rs.getString("btuout");

	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateequipmententry&custnum="+custnum+"&eenum="+eenum+"\" name=\"addcat\">");
	out.println("<p>Brand        :");
	out.println("<input type=\"text\" name=\"brand\" value=\""+brand+"\">");
	out.println("</p>");
	out.println("<p>Model Number :");
	out.println("<input type=\"text\" name=\"modelnum\" size=\"40\" value=\""+modelnum+"\">");
	out.println("</p>");
	out.println("<p>Serial Number :");
	out.println("<input type=\"text\" name=\"serialnum\" size=\"40\" value=\""+serialnum+"\">");
	out.println("</p>");
	out.println("<p>Filter Size  :");
	out.println("<input type=\"text\" name=\"filter\" size=\"40\" value=\""+filter+"\">");
	out.println("</p>");
	out.println("<p>Type         :");
	out.println("<input type=\"text\" name=\"etype\" size=\"40\" value=\""+etype+"\">");
	out.println("</p>");
	out.println("<p>SEER         :");
	out.println("<input type=\"text\" name=\"etype\" size=\"40\" value=\""+cseer+"\">");
	out.println("</p>");
	out.println("<p>BTU Output         :");
	out.println("<input type=\"text\" name=\"etype\" size=\"40\" value=\""+btuout+"\">");
	out.println("</p>");
	out.println("<p>Notes        :");
	out.println("<input type=\"text\" name=\"notes\" size=\"40\" value=\""+notes+"\">");
	out.println("</p>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Update\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		}

		con.close();
	}

private void doEditCallslip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String tcrecnum = req.getParameter("crecnum");
	String action = req.getParameter("action");
        int crecnum = Integer.parseInt(tcrecnum);
	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
         int eenum=0;
        int ecustnum=0;
        String brand=null;
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
	String callslip=null;
	String custsite=null;
	String sitenum=null;
	String cdate=null;
	String crectype=null;
	int equip1=0;
	int equip2=0;
	int equip3=0;
	int equip4=0;
	String reason=null;
	String services=null;
	String recommendations=null;
	String rscheduled=null;
	String charges="0.00";
		String sfollowup=null;
	String collected="0.00";
	int followup=0;
	String descript;
	String ccallslip;
	String codcallslip;
	int codenum;
	String complcode;
	String compltext;
	double quant;
	double price;
	double total;
	int recnum;
	String parts=null;

 	Statement stmt = con.createStatement();
	ResultSet rs = stmt.executeQuery("SELECT *  FROM callslip where crecnum='"+crecnum+"' ORDER BY cdate;");
		 while(rs.next())
                {
		crecnum=rs.getInt("crecnum");
		callslip=rs.getString("callslip");
		cdate=rs.getString("cdate");
		equip1=rs.getInt("equip1");
		equip2=rs.getInt("equip2");
		equip3=rs.getInt("equip3");
		equip4=rs.getInt("equip4");
		reason=rs.getString("reason");
		reason=rs.getString("reason");
		services=rs.getString("services");
		custsite=rs.getString("custsite");
		sitenum=rs.getString("sitenum");
		recommendations=rs.getString("recommendations");
		rscheduled=rs.getString("rscheduled");
		//charges=rs.getString("charges");
		//collected=rs.getString("collected");
		crectype=rs.getString("crectype");
		//notes=rs.getString("notes");
		parts=rs.getString("parts");
		followup=rs.getInt("followup");
		if (followup==1)
			{
			sfollowup=null;
			} else {
			sfollowup="0";
			}
		}
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Call Slip</title>");
	out.println("</head>");
			if (action.equalsIgnoreCase("reditcallslip"))
	                        {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=rupdatecallslip&custnum="+custnum+"&crecnum="+crecnum+"\" name=\"addcat\">");
				}
			else if (action.equalsIgnoreCase("rceditcallslip"))
	                        {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=rcupdatecallslip&custnum="+custnum+"&crecnum="+crecnum+"\" name=\"addcat\">");
				}
			else
				{
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatecallslip&custnum="+custnum+"&crecnum="+crecnum+"\" name=\"addcat\">");
				}
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"cdate\" value="+doFormatDate(getDate(cdate)) +"></td>");
	out.println("</tr>");
	out.println("<tr><td>Call Slip</td><td>");
	out.println("<input type=\"text\" name=\"callslip\" value="+callslip +"></td>");
	out.println("</tr>");
	out.println("<tr><td>Reason</td><td>");
	out.println("<input type=\"text\" name=\"reason\" size=\"60\" value=\""+reason +"\"></td></tr>");
	out.println("<tr><td>Services</td><td>");
	out.println("<textarea name=\"services\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+services +"</textarea>");
	out.println("</td></tr>");

	out.println("<tr><td>Recommendations</td><td>");
	out.println("<textarea name=\"recommendations\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+ recommendations+"</textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Repair Scheduled</td><td>");
	out.println("<textarea name=\"rscheduled\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+rscheduled +"</textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Parts Needed</td><td>");
	out.println("<textarea name=\"parts\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+parts+"</textarea>");
	out.println("</td></tr>");
	//out.println("<tr><td>Notes</td><td>");
	//out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+notes +"</textarea>");
	//out.println("</td></tr>");

	out.println("<tr><td>Add Follow-up</td><td>");
	if (followup==0)
		{
	out.println("<input type=\"checkbox\" name=\"followup\" value="+sfollowup +"></td></tr>");
		} else {
	out.println("<input type=\"checkbox\" name=\"followup\" value="+sfollowup +" checked></td></tr>");
	}
	//out.println("<input type=\"checkbox\" name=\"followup\" value="true"></td></tr>");

	out.println("</table>");


		out.println("<h3>Notes</h3>");

	Vector vn;
        vn = CallslipNotes.getAllItems(con,custsite, sitenum, callslip);
        out.println("<table border=1 width=100%>");
        out.println("<th>Date</th><th>User</th><th>Note</th>");
	String note="";
	String ndate="";
	String ncallslip="";
	String nuserlogin="";
	String nnote="";
	int nrecnum=0;
	int nservsync=0;
		
                for (int in = 0 ; in < vn.size(); in++)
                {
                CallslipNotes tn = (CallslipNotes) vn.elementAt(in);
		nnote=tn.getNote();
		ncallslip=tn.getCallslip();
		nuserlogin=tn.getUserLogin();
		nrecnum=tn.getRecNum();
		ndate=tn.getNDate();
		nservsync=tn.getServsync();
                out.println("<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td>");
		if ((nuserlogin.equalsIgnoreCase(username))&&(nservsync==0)) {
			out.println("<td><a href="+classdir+"UniCash?action=deletenote&recnum="+nrecnum+"&custnum="+custnum+"&custsite="+custsite+"&sitenum="+sitenum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+action+">Delete</a></td>");
		}
			out.println("</tr>");
                }

		out.println("</table><a href="+classdir+"UniCash?action=addnote&custnum="+custnum+"&custsite="+custsite+"&sitenum="+sitenum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+action+">Add Notes to Callslip</a><br><br>");
	
	
	
	out.println("<h3>Equipment List</h3>");
        Vector v;
        v = UniEquip.getAllItems(con,custnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Number</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniEquip t = (UniEquip) v.elementAt(i);
		eenum=t.getId();
		ecustnum=t.getCustnum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		notes=t.getNotes();
                out.println("<tr><td>"+eenum+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
                }
	out.println("</table>");

	out.println("<h3>Enter Equipment Number</h3>");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Equipment 1</td><td><input type=\"text\" name=\"equip1\" size=\"30\" value="+equip1+"></td><td>Equipment 2</td><td><input type=\"text\" name=\"equip2\" size=\"30\" value="+equip2+"></td></tr>");
	out.println("<tr><td>Equipment 3</td><td><input type=\"text\" name=\"equip3\" size=\"30\" value="+equip3+"></td><td>Equipment 4</td><td><input type=\"text\" name=\"equip4\" size=\"30\" value="+equip4+"></td></tr>");
	out.println("</table>");
	out.println("<input type=\"hidden\" name=\"crecnum\" value=\""+crecnum+"\" >");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\" >");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<input type=\"hidden\" name=\"collected\" value=\""+collected+"\">");
	out.println("<input type=\"hidden\" name=\"charges\" value=\""+charges+"\">");
	out.println("<input type=\"hidden\" name=\"crectype\" value=\""+crectype+"\">");
	
	
	out.println("<h3>Inventory Used</h3>");
	out.println("<table width=\"100%\" align=\"center\" border=1>");
	out.println("<font size=1>");
	out.println("<th>Key</th><th>Part</th><th>Quantity</th><th>Date</th><th>Delete</th>");
	
	
	Vector ci;
	ci = InvUse.getAllCallslipItems(con, callslip, cdate);
	for (int cc = 0 ; cc < ci.size(); cc++)
	{
		InvUse ti = (InvUse) ci.elementAt(cc);
		String keycode = ti.getKeyCode();
		String itemname = ti.getItemName();
		String pquant = ti.getQuantity();
		String idate = doFormatDate(getDate(ti.getTDate()));
		int transnum = ti.getItemnum();
		out.println("<tr><td>"+keycode+"</td><td>"+itemname+"</td><td>"+pquant+"</td><td>"+idate+"</td>");
		out.println("<td><a href="+classdir+"UniCash?action=delinvtrans2&transnum="+transnum+"&psource=editcallslip&callslip="+callslip+"&crecnum="+crecnum+"&cdate="+cdate+"&custnum="+custnum+">Delete</a></td>");
		out.println("</tr>");
		}
	out.println("</font>");
	out.println("</table>");
	
	out.println("</table><br><br><a href="+classdir+"UniCash?action=addinvmenu&custnum="+custnum+"&psource=editcallslip&callslip="+callslip+"&crecnum="+crecnum+"&cdate="+cdate+">Add Inventory to Callslip</a>");
	out.println("<br><br>");

	out.println("<h3>Charges</h3>");
        v = UniSvcCharges.getAllItems(con,callslip);
        out.println("<table border=1 width=100%>");
        out.println("<th>Code</th><th>Quantity</th><th>Description</th><th>Price</th><th>Sub Total</th>");
		int frcode=0;	
                for (int i = 0 ; i < v.size(); i++)
                {
                UniSvcCharges t = (UniSvcCharges) v.elementAt(i);
		recnum=t.getRecnum();
		callslip=t.getCallslip();
		quant=t.getQuant();
		descript=t.getDescript();
		price=t.getPrice();
		total=t.getTotal();
		frcode=t.getFrcode();
		
               out.println("<tr><td>"+frcode+"</td><td>"+quant+"</td><td><a href="+classdir+"UniCash?action=editchargerec&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&chargerec="+recnum+"&custstart="+custstart+"&custstop="+custstop+"&psource="+action+">"+descript+"</a></td><td>"+NumberFormat.getCurrencyInstance().format(price)+"</td><td>"+NumberFormat.getCurrencyInstance().format(total)+"</td><td><a href="+classdir+"UniCash?action=delchargerec&psource="+action+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&chargerec="+recnum+"&psource=editcallslip>Delete</a></tr>");
                }
	out.println("</table><br><br><a href="+classdir+"UniCash?action=addchargemenu&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+action+">Add Charges to Callslip</a>");
	out.println("<br><br>");

	out.println("<h3>Completion</h3>");
        v = UniSvcCompl.getAllItems(con,callslip);
        out.println("<table border=1 width=100%>");
        out.println("<th>Code</th><th>Text</th><th>Delete</th>");
		
                for (int i = 0 ; i < v.size(); i++)
                {
                UniSvcCompl t = (UniSvcCompl) v.elementAt(i);
		recnum=t.getRecnum();
		callslip=t.getCallslip();
		codenum=t.getCodeNum();
		complcode=t.getComplCode();
		compltext=t.getComplText();
		out.println("<tr><td>"+codenum+"-"+complcode+"</td><td>"+compltext+"</td><td><a href=\""+ classdir + "UniCash?action=deletesvccomplcodec&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&recnum="+recnum+"\">Delete</a></td></td>");
		
		}
	out.println("</table><br><br><a href="+classdir+"UniCash?action=addaddcompl&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+">Add Completion to Callslip</a>");
	out.println("<br><br>");
out.println("<CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
}


private void doShowDocCatList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String role =(String)session.getAttribute("role");
	out.println("<h3>Documentation Categories</h3>");
        if (role.equalsIgnoreCase("admin"))
                                {
	out.println("<br><a href="+classdir+"UniCash?action=adddoccat>Add Documentation Category</a><br><br><br>");
				}
        out.println("<table border=0 width=50%>");
                Vector v;
                v = DocCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	DocCat t = (DocCat) v.elementAt(i);
                      	int CatNum = t.getCatnum();
                        String category = t.Category();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=showdoclist&catnum="+CatNum+">"+category+"</a></td>");
                        out.println("</td>");
                        out.println("</tr>");
                }
	out.println("</table><br><br>");

        if (role.equalsIgnoreCase("admin"))
                                {
	out.println("<br><a href="+classdir+"UniCash?action=adddoccat>Add Documentation Category</a>");
out.println("<br><br><a href="+classdir+"UniCash?action=uploaddoclist>Update Server (MUST HAVE INTERNET CONNECT)</a><br><br>");
				}
		con.close();
	}


private void doShowDocList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session,String username)
                throws Exception
        {
		String catnum=req.getParameter("catnum");
	String role =(String)session.getAttribute("role");
	out.println("<h3>Available Documentation</h3>");
        if (role.equalsIgnoreCase("admin"))
                                {
	out.println("<br><a href="+classdir+"UniCash?action=adddoc&catnum="+catnum+">Add Documentation in this Category</a><br><br><br>");
				}
		out.println("<a href=\""+ classdir + "UniCash?action=showdoccatlist\">Return To Category List</a><br>");
        	out.println("<br><table border=1 width=100%>");
                out.println("<th>Document Description<br>Doc Date</th><th>Doc Category</th><th>Edit</th>");
		int counter=0;
                Vector v;
                v = Docs.getAllItems(con,catnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	Docs t = (Docs) v.elementAt(i);
                      	int docid = t.getDocId();
		        String doctype = t.getDocType();
        		String filepath = t.getFilePath();
        		String docdate=t.getDocDate();
        		String key1 = t.getKey1();
        		String key2 = t.getKey2();
        		String key3 = t.getKey3();
        		String docdesc = t.getDocDesc();
                        out.println("<tr><td><a href="+filepath+">"+docdesc+"</a></td><td>"+docdate+"</td><td>Edit</td>");
                        out.println("</tr>");
                }

	out.println("</table><br><br>");
		out.println("<a href=\""+ classdir + "UniCash?action=showdoccatlist\">Return To Category List</a><br>");
        if (role.equalsIgnoreCase("admin"))
                                {
	out.println("<br><a href="+classdir+"UniCash?action=adddoc&catnum="+catnum+">Add Documentation in this Category</a><br><br><br>");
				}
		con.close();
	}



private void doAddSvcCompl(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String tcrecnum = req.getParameter("crecnum");
        int crecnum = Integer.parseInt(tcrecnum);
	String callslip = req.getParameter("callslip");

//////////////////////////////////////////
//Show Categories
/////////////////////////////////////////
	out.println("<h3>Completion Categories</h3>");
        out.println("<table border=0 width=50%>");
                Vector v;
                v = UniComplCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniComplCat t = (UniComplCat) v.elementAt(i);
                      	int CatNum = t.getCatnum();
                        String category = t.Category();
                        out.println("<td>");
                        out.println("<a href="+classdir+"UniCash?action=showsvccomplcatcodes&catnum="+CatNum+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+">"+category+"</a></td>");
                        out.println("</td>");
                        out.println("</tr>");
                }
	out.println("</table><br><br>");

                out.println("<a href="+classdir+"UniCash?action=editcallslip&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+" target=phpmain>Return To Call Slip</a><br>");

//////////////////////////////////////////
// Show current codes
// //////////////////////////////////////
	out.println("<h3>Current Completion Codes</h3>");
        v = UniSvcCompl.getAllItems(con,callslip);
        out.println("<table border=1 width=100%>");
        out.println("<th>Code</th><th>Text</th><th>Delete</th>");
		
                for (int i = 0 ; i < v.size(); i++)
                {
                UniSvcCompl t = (UniSvcCompl) v.elementAt(i);
		int recnum=t.getRecnum();
		int codenum=t.getCodeNum();
		String complcode=t.getComplCode();
		String compltext=t.getComplText();
		out.println("<tr><td>"+complcode+"</td><td>"+compltext+"</td><td>");
		out.println("<a href="+classdir+"UniCash?action=deletesvccomplcode&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&recnum="+recnum+">");
		out.println("Delete</a></td></tr>");
		}
	out.println("</table>");
		con.close();
	}

private void doShowSvcComplCatCodes(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String tcrecnum = req.getParameter("crecnum");
        int crecnum = Integer.parseInt(tcrecnum);
	String callslip = req.getParameter("callslip");
		String catnum=req.getParameter("catnum");
		out.println("<a href=\""+ classdir + "UniCash?action=addaddcompl&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"\">Return To Category List</a><br>");
        	out.println("<br><table border=1 width=100%>");
                out.println("<th>Completion<br>Code</th><th>Completion Text</th>");
		int counter=0;
                Vector v;
                v = UniComplCodes.getAllItems(con,catnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniComplCodes t = (UniComplCodes) v.elementAt(i);
                      	int CatNum = t.getCatNum();
			int transnum = t.getCodeNum();
                        String complcode = t.getComplCode();
                        String compltext = t.getComplText();
                        out.println("<td>");
                        out.println("<tr><td><a href="+classdir+"UniCash?action=savesvccomplcode&catnum="+CatNum+"&transnum="+transnum+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+">"+complcode+"</a></td><td>"+compltext+"</td>");
                        out.println("</tr>");
                }

	out.println("</table><br><br>");
		out.println("<br><br><a href=\""+ classdir + "UniCash?action=addaddcompl&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"\">Return To Category List</a>");
		con.close();
	}


private void doSaveSvcComplCode(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String tcrecnum = req.getParameter("crecnum");
        int crecnum = Integer.parseInt(tcrecnum);
	String callslip = req.getParameter("callslip");
		String catnum=req.getParameter("catnum");
		String codenum=req.getParameter("transnum");

                 UniSvcCompl.AddItem(con, callslip, codenum);
		con.close();
                 res.sendRedirect(""+classdir+"UniCash?action=addaddcompl&catnum="+catnum+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"");
            }


private void doDelSvcComplCodec(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
	String trecnum = req.getParameter("recnum");
        int recnum = Integer.parseInt(trecnum);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String tcrecnum = req.getParameter("crecnum");
        int crecnum = Integer.parseInt(tcrecnum);
	String callslip = req.getParameter("callslip");
		String catnum=req.getParameter("catnum");
		String codenum=req.getParameter("transnum");

                 UniSvcCompl.deleteItem(con, recnum);
		con.close();
                 res.sendRedirect(""+classdir+"UniCash?action=editcallslip&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"");
            }

private void doDelSvcComplCode(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
	String trecnum = req.getParameter("recnum");
        int recnum = Integer.parseInt(trecnum);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String tcrecnum = req.getParameter("crecnum");
        int crecnum = Integer.parseInt(tcrecnum);
	String callslip = req.getParameter("callslip");
		String catnum=req.getParameter("catnum");
		String codenum=req.getParameter("transnum");

                 UniSvcCompl.deleteItem(con, recnum);
		con.close();
                 res.sendRedirect(""+classdir+"UniCash?action=addaddcompl&catnum="+catnum+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"");
            }


private void doPrintAirQuality(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String etype="";
		
	String tech_init = doGetTechInfo_init(username);
	String tech_name = doGetTechInfo_name(username);
	String tech_truck = doGetTechInfo_truck(username);

	out.println("<html><basefont size=-1>");
	out.println("<html><head><title>AC Cover Disclaimer</title></head>");
	doMHeader(req, res, out, session, username);

 	Statement stmt = con.createStatement();
	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
                {
	cname=rs.getString("cname");
	address1=rs.getString("address1");
	address2=rs.getString("address2");
	city =rs.getString("city");
	state=rs.getString("state");
	zip=rs.getString("zip");
	homephone=rs.getString("homephone");
	altphone=rs.getString("altphone");
	cust_notes=rs.getString("cust_notes");
	}	
	out.println("<table width=\"100%\"><tr>");
	out.println("<td width=\"50%\">");
	out.println("<b>Customer:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;"+cname+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+address1+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+city+","+state+" ");
	out.println("</td>");
	out.println("<td>Dated: "+s+"</td></tr>");
	out.println("</table>");

	out.println("<h4><ul>Indoor Air Quality Agreement/Disclaimer</ul></h4><br>");
	out.println("<table width=\"80%\"><tr><td>");
	out.println("I have been advised by the "+doGetCompanyName()+" Servce Technician that there are indoor air quality conditions that exist in my home that could be hazardous and require additional investigation. I understand that the indicated examinations are necassary in order to further diagnose the Indoor Air Quality issues that may exist at this location. This is a:  <br>_____ Health related concern, mold/fungi, mildew, carbon monoxide, exhaust leaks, etc.<br>_____ Comfort related concern, duct system, equipment sizing.<br>_____ Efficiency related concern, duct system, equipment sizing.<br><br>");
	out.println("</td></tr></table>");
	out.println("<table width=\"80%\"><tr><td>");
	out.println("<br>NOTICE: If this is a health related concern, the future health and safety of your family could be compromised. There  may be substances present in your home that can cause illness or even be fatal to immunocompromised individuals such as the elderly, young children, and pets.</b><br><br>");
	out.println("</td></tr></table>");
	out.println("<table width=\"80%\"><tr><td>");
	out.println("Comfort and Efficiency related testing rates vary depending on the number of systems, square footage, etc. We will have a Comfort Specialist contact you with additional information if you are interested.<br><br>");
	out.println("</td></tr></table>");
	out.println("<table width=\"80%\"><tr><td>");
	out.println("Molds/fungi and moisture problems may be hidden behind walls, under carpets, or between other building materials, which were not visible or may not show up in an air sample. In the interest of cost some homeowners may opt for one area to be tested overlooking other problems or ignoring "+doGetCompanyName()+"'s recommendations. The client assumes all other liabilities with regard to the structure, health effects, or acceptable procedures and the results are interpreted to the best available information to us at the time of the examination. "+doGetCompanyName()+" accepts no other responsibilities either expressed or implied other than the problems where identified.<br><br>");
	out.println("</td></tr></table>");
	out.println("<table width=\"95%\" align=\"center\">");
	out.println("<font size=1>");
	out.println("<tr>");
	out.println("<P></p><br><br>");
	out.println("<td>____________________________________</td><td>"+tech_name+"</td>");
	out.println("</tr><tr><td><h5>Customer Signature</h5></td><td><h5>Service Tech</h5></td>");
	out.println("</tr></font></table>");
	out.println("</body>");
	out.println("</html>");
		con.close();
}

private void doPrintAcCover(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String etype="";
		
	String tech_init = doGetTechInfo_init(username);
	String tech_name = doGetTechInfo_name(username);
	String tech_truck = doGetTechInfo_truck(username);

	out.println("<html><basefont size=-1>");
	out.println("<html><head><title>AC Cover Disclaimer</title></head>");
	doMHeader(req, res, out, session, username);

 	Statement stmt = con.createStatement();
	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
                {
	cname=rs.getString("cname");
	address1=rs.getString("address1");
	address2=rs.getString("address2");
	city =rs.getString("city");
	state=rs.getString("state");
	zip=rs.getString("zip");
	homephone=rs.getString("homephone");
	altphone=rs.getString("altphone");
	cust_notes=rs.getString("cust_notes");
	}	
	out.println("<table width=\"100%\"><tr>");
	out.println("<td width=\"50%\">");
	out.println("<b>Customer:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;"+cname+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+address1+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+city+","+state+" ");
	out.println("</td>");
	out.println("<td>Dated: "+s+"</td></tr>");
	out.println("</table>");

	out.println("<h4><ul>Air Conditioning Cover</ul></h4><br>");
	out.println("<table width=\"75%\"><tr><td>");
	out.println("We are very happy to provide you with your new air conditioning cover. This cover will help to keep your unit clean while not in use, and can also help to protect your unit from falling ice, which could seriously damage your unit. We think that you have made a wise investment that could prolong the life and efficiency of your air conditioning system.<br><br>");
	out.println("</td></tr></table>");
	out.println("<h4>DISCLAIMER</h4><br>");
	out.println("<table width=\"75%\"><tr><td>");
	out.println("I understand that I should not run my air conditioning, until the cover has been removed from the outdoor condensing unit. I understand that, should I start the unit without removing the cover that it could cause severe damage to my air conditioning system. I also acknowledge that "+doGetCompanyName()+" is not responsible for damage caused by my running the air conditioning system with the cover on.<br><br>");
	out.println("</td></tr></table>");
	out.println("<table width=\"95%\" align=\"center\">");
	out.println("<font size=1>");
	out.println("<tr>");
	out.println("<P></p><br><br>");
	out.println("<td>____________________________________</td><td>"+tech_name+"</td>");
	out.println("</tr><tr><td><h5>Customer Signature</h5></td><td><h5>Service Tech</h5></td>");
	out.println("</tr></font></table>");
	out.println("</body>");
	out.println("</html>");
		con.close();
}

private void doPrintSpaceHeater(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String etype="";
		
	String tech_init = doGetTechInfo_init(username);
	String tech_name = doGetTechInfo_name(username);
	String tech_truck = doGetTechInfo_truck(username);

	out.println("<html><basefont size=-1>");
	out.println("<html><head><title>Release of Liability</title></head>");
	doMHeader(req, res, out, session, username);

 	Statement stmt = con.createStatement();
	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
                {
	cname=rs.getString("cname");
	address1=rs.getString("address1");
	address2=rs.getString("address2");
	city =rs.getString("city");
	state=rs.getString("state");
	zip=rs.getString("zip");
	homephone=rs.getString("homephone");
	altphone=rs.getString("altphone");
	cust_notes=rs.getString("cust_notes");
	}	
	out.println("<table width=\"100%\"><tr>");
	out.println("<td width=\"50%\">");
	out.println("<b>Customer:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;"+cname+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+address1+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+city+","+state+" ");
	out.println("</td>");
	out.println("<td>Dated: "+s+"</td></tr>");
	out.println("</table>");

	out.println("<table width=\"75%\"><tr><td>");
	out.println("<br>I, <b>"+cname+"<b>, understand that "+doGetCompanyName()+" is loaning me space heaters for a short time while they work on what is necessary to take care of my heating system. I have been informed that it is not safe to leave an electric space heater unattended, or leave it on overnight. I also have been informed that it is not safe to operate any space heater near combustible materials. I will not hold "+doGetCompanyName()+" responsible for any damage or hazard resulting from the space heater(s) they have let me borrow.<br><br><br>");

	out.println("</td></tr></table>");
	out.println("<table width=\"95%\" align=\"center\">");
	out.println("<font size=1>");
	out.println("<tr>");
	out.println("<P></p><br><br>");
	out.println("<td>____________________________________</td><td>"+tech_name+"</td>");
	out.println("</tr><tr><td><h5>Customer Signature</h5></td><td><h5>Service Tech</h5></td>");
	out.println("</tr></font></table>");
	out.println("</body>");
	out.println("</html>");
		con.close();
}



private void doPrintEquipmentList(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String etype="";
	String brand=null;
	String modelnum=null;
	String serialnum=null;
	String filter=null;
	String notes=null;
	int eenum=0;
	int ecustnum=0;
		
	String tech_init = doGetTechInfo_init(username);
	String tech_name = doGetTechInfo_name(username);
	String tech_truck = doGetTechInfo_truck(username);

	out.println("<html><basefont size=-1>");
	out.println("<html><head><title>Equipment List</title></head><basefontsize=-1");
	doMHeader(req, res, out, session, username);

 	Statement stmt = con.createStatement();
	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
                {
	cname=rs.getString("cname");
	address1=rs.getString("address1");
	address2=rs.getString("address2");
	city =rs.getString("city");
	state=rs.getString("state");
	zip=rs.getString("zip");
	homephone=rs.getString("homephone");
	altphone=rs.getString("altphone");
	cust_notes=rs.getString("cust_notes");
	}	
	out.println("<p font=-1><table width=\"100%\"><tr>");
	out.println("<td width=\"50%\">");
	out.println("<h4><b>Equipment List For:</b></h4><br>&nbsp;&nbsp;&nbsp;&nbsp;"+cname+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+address1+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+city+","+state+" ");
	out.println("</td>");
	out.println("<td>Dated: "+s+"</td></tr>");
	out.println("</table><br><br><br>");
        Vector v;
        v = UniEquip.getAllItems(con,custnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Brand</th><th>Type</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");

		int counter=0;
	for (int i = 0 ; i < v.size(); i++)
	{
	UniEquip t = (UniEquip) v.elementAt(i);
	eenum=t.getId();
	ecustnum=t.getCustnum();
	brand=t.getBrand();
	modelnum=t.getModelnum();
	serialnum=t.getSerialnum();
	filter=t.getFilter();
	notes=t.getNotes();
	etype=t.getEtype();
	if (etype==null) { 
		etype = "-";
		}

	out.println("<tr><td>"+brand+"</td><td>"+etype+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</td><td></tr>");
	}
out.println("</table><br><br>");

out.println("<table width=\"95%\" align=\"center\">");
out.println("<font size=1>");
out.println("<tr>");
out.println("<P></p><br><br>");
out.println("<td><h5>"+tech_name+"<h5></td>");
out.println("</tr></td><td><h5>Service Tech</h5></td>");
out.println("</tr></font></table>");
out.println("</body>");
out.println("</html>");
		con.close();
}


private void doPrintCallslip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
	throws Exception
{
Format formatter;
Calendar now = Calendar.getInstance();
Date date = new Date();
formatter = new SimpleDateFormat("yyyy-MM-dd");
String s = formatter.format(date);
int hour = now.get(Calendar.HOUR_OF_DAY); 
int second = now.get(Calendar.SECOND);
int year = now.get(Calendar.YEAR);
int month = now.get(Calendar.MONTH);
int minute = now.get(Calendar.MINUTE);
int millisecond = now.get(Calendar.MILLISECOND);
String tcustnum = req.getParameter("custnum");
String action = req.getParameter("action");
int custnum = Integer.parseInt(tcustnum);
String tcrecnum = req.getParameter("crecnum");
int crecnum = Integer.parseInt(tcrecnum);
String nate_id=doGetTechInfo_nateid(username);
int nateid=Integer.parseInt(nate_id);
 int eenum=0;
int ecustnum=0;
String brand=null;
String modelnum=null;
String serialnum=null;
String filter=null;
String notes=null;
String callslip=null;
String cdate=null;
int equip1=0;
int equip2=0;
int equip3=0;
int equip4=0;
int frcode=0;
String reason=null;
String services=null;
String recommendations=null;
String rscheduled=null;
String charges=null;
String collected=null;
int followup=0;
String descript;
String ccallslip;
double quant;
double price;
double total;
double totalcharge=0.00;
int recnum;
String cname=null;
String address1=null;
String address2=null;
String city =null;
String state=null;
String zip=null;
String homephone=null;
String altphone=null;
String cust_notes=null;
String etype="";
String techid="";
String custsite=null;
String cemail=null;
String sitenum=null;
String parts=null;
	
String tech_init = doGetTechInfo_init(username);
String tech_name = doGetTechInfo_name(username);
String tech_truck = doGetTechInfo_truck(username);

out.println("<html><basefont size=-1>");
out.println("<head><title>Service Invoice</title></head>");

		if (!action.equalsIgnoreCase("viewpcallslip")) 
				{
doMHeader(req, res, out, session, username);
				}
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("SELECT *  FROM callslip where crecnum='"+crecnum+"' ORDER BY cdate;");
	 while(rs.next())
	{
	crecnum=rs.getInt("crecnum");
	callslip=rs.getString("callslip");
	custsite=rs.getString("custsite");
	sitenum=rs.getString("sitenum");
	techid=rs.getString("techid");
	cdate=rs.getString("cdate");
	equip1=rs.getInt("equip1");
	equip2=rs.getInt("equip2");
	equip3=rs.getInt("equip3");
	equip4=rs.getInt("equip4");
	reason=rs.getString("reason");
	services=rs.getString("services");
	recommendations=rs.getString("recommendations");
	rscheduled=rs.getString("rscheduled");
	charges=rs.getString("charges");
	collected=rs.getString("collected");
//	notes=rs.getString("notes");
						notes="";		
		Vector vcn;
		vcn = CallslipNotes.getAllItems(con,custsite, sitenum, callslip);
		if (vcn.size() > 0 ) {
		notes=combinestring(notes,"<table border=1 width=100%>");
		notes=combinestring(notes,"<th>Date</th><th>User</th><th>Note</th>");
		String note="";
		String ndate="";
		String ncallslip="";
		String nuserlogin="";
		String nnote="";
		int nrecnum=0;
		int nservsync=0;
                for (int icn = 0 ; icn < vcn.size(); icn++)
                {
                CallslipNotes tcn = (CallslipNotes) vcn.elementAt(icn);
		nnote=tcn.getNote();
		ncallslip=tcn.getCallslip();
		nuserlogin=tcn.getUserLogin();
		nrecnum=tcn.getRecNum();
		ndate=tcn.getNDate();
		nservsync=tcn.getServsync();
                notes=combinestring(notes,"<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td></tr>");
		}
			notes=combinestring(notes,"</table>");
		}
	parts = rs.getString("parts");
	followup=rs.getInt("followup");
}
out.println("<br><font size=2>");
out.println("<table border=0 width=\"95%\" align=\"center\"><td width=\"30%\">");
out.println("<b align=Left>Service Invoice:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;Call Slip: "+callslip+"<br>&nbsp;&nbsp;&nbsp;&nbsp;Call Date: "+doFormatDate(getDate(cdate))+"<br><br>");
out.println("</td>");


                Vector vc;
                vc = UniCustomer.getIndItem(con, custnum);
                int counter=0;
                String custtype = null;
                for (int ic = 0 ; ic < vc.size(); ic++)
                {
                        UniCustomer tc = (UniCustomer) vc.elementAt(ic);
                        custtype = tc.getCustType();
			cname=tc.getCustomerName();
			address1=tc.getAddress1();
			address2=tc.getAddress2();
			city =tc.getCity();
			state=tc.getState();
			zip=tc.getZip();
			homephone=tc.getHomePhone();
			altphone=tc.getAltPhone();
			cust_notes=tc.getCustomerNotes();
			custsite=tc.getCustSite();
			sitenum=tc.getSiteNum();
			cemail=tc.getCEmail();
		}	

out.println("<td width=\"30%\">");
out.println("<b>Customer:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;"+cname+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+address1+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+city+","+state+"<br>&nbsp;&nbsp;&nbsp;"+cemail+"");
out.println("</td>");

out.println("<td width=\"30%\">");
out.println("Customer Number / Site:&nbsp;&nbsp;&nbsp;"+custsite+"&nbsp;/&nbsp;"+sitenum+"<br>Home Phone:&nbsp;&nbsp;&nbsp;"+homephone+"<br>Alt. Phone:&nbsp;&nbsp;&nbsp;"+altphone+"");
out.println("</td>");

out.println("</table>");

out.println("<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parts Used</h4>");
out.println("<table width=\"95%\" align=\"center\" border=1>");
out.println("<font size=1>");
out.println("<th>Key</th><th>Part</th><th>Quantity</th><th>Date</th><th>Location</th>");
Vector ci;
ci = InvUse.getAllCallslipItems(con, callslip, cdate);
for (int cc = 0 ; cc < ci.size(); cc++)
{
	InvUse ti = (InvUse) ci.elementAt(cc);
	String keycode = ti.getKeyCode();
	String itemname = ti.getItemName();
	String pquant = ti.getQuantity();
	String invloc = ti.getInvLoc();
	String idate = doFormatDate(getDate(ti.getTDate()));
	out.println("<tr><td>"+keycode+"</td><td>"+itemname+"</td><td>"+pquant+"</td><td>"+idate+"</td><td>"+invloc+"</td></tr>");
	}

	out.println("</font>");
	out.println("</table>");

	out.println("<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Equipment</h4>");
	out.println("<table width=\"95%\" align=\"center\" border=1>");
	out.println("<font size=1>");
stmt = con.createStatement();
rs = stmt.executeQuery("SELECT * FROM  equipment where enum='"+equip1+"' or enum='"+equip2+"' or enum='"+equip3+"' or enum='"+equip4+"';");
out.println("<th>Type</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
	 while(rs.next())
	{
	brand = rs.getString("brand");
	modelnum = rs.getString("modelnum");
	serialnum = rs.getString("serialnum");
	filter = rs.getString("filter");
	notes = rs.getString("notes");
// Add type here
	etype = rs.getString("etype");
if (etype==null) { 
	etype = "-";
	}

out.println("<tr><td>"+etype+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
	}
	out.println("</font>");
	out.println("</table>");

/////////////////////////////////////
//Completion Codes Here
////////////////////////////////////

Vector r = UniSvcCompl.getAllItems(con,callslip);
if ((r.size()>0) )
		{
	out.println("<br><table border=0 width=95% align=\"center\"><font size=1><tr><td><h4>Resolution</h4></td></tr>");
        out.println("<tr><td><table border=1 width=100% align=\"center\"><font size=1>");
        out.println("<th>Code</th><th>Resolution</th>");
		
                for (int i = 0 ; i < r.size(); i++)
                {
                UniSvcCompl t = (UniSvcCompl) r.elementAt(i);
		int corecnum=t.getRecnum();
		int codenum=t.getCodeNum();
		String complcode=t.getComplCode();
		String compltext=t.getComplText();
		out.println("<tr><td>"+complcode+"</td><td>"+compltext+"</td><tr>");
		}
	out.println("</table></td></tr></table>");
		}

		
		out.println("<font size=1>");
		out.println("<table width=\"95%\" size=\"95%\" align=\"center\" border=1 height=5>");
		out.println("<font size=1");
if ((services!=null)||(recommendations!=null)||(rscheduled!=null)||(notes!=null)) {
		out.println("<br>");
		out.println("<table width=\"95%\" size=\"95%\" align=\"center\" border=1>");
		out.println("<font size=1>");
		if (services.length()>1) {
		out.println("<tr><td><h4>Services</h4></td></tr><tr><td>"+services+"");
		out.println("</td></tr>");
		}

		if (recommendations.length()>1) {
		out.println("<P></P><br>");
		out.println("<tr><td><h4>Our Trained Technician Recommends</h4></td></tr><tr><td>"+recommendations+"");
		out.println("<table><font size=1><tr><td>Customer Accepts Recomendations</td><td>______________</td><td>Customer Declines Recommendations</td><td>________________</td></tr></font></table></tr>");
		out.println("</td></tr>");
		}
	
		if (rscheduled.length()>1) {
		out.println("<tr><td><h4>Repair Scheduled</h4></td></tr><tr><td>"+rscheduled+"");
		out.println("</td></tr>");
		}
		if (parts==null) {
			parts="-";
		}
		if (parts.length()>1) {
		out.println("<tr><td><h4>Parts Needed</h4></td></tr><tr><td>"+parts+"");
		out.println("</td></tr>");
			}
		if ((notes.length()>1)&&action.equalsIgnoreCase("viewpcallslip")) {
		out.println("<tr><td><h4>THESE NOTES ARE NOT GIVEN TO CUSTOMER!!!</h4></td></tr><tr><td>"+notes+"");
		out.println("</td></tr>");
			}
	out.println("</font>");
	out.println("</table>");
	out.println("");
	}
        Vector v;
        v = UniSvcCharges.getAllItems(con,callslip);
	if ((v.size()>0)) {
	out.println("<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Charges</h4>");
        out.println("<table border=1 width=95% align=\"center\">");
		out.println("<font size=1>");
        out.println("<th>Code</th><th>Quantity</th><th>Description</th><th>Price</th><th>Sub Total</th>");
		
                for (int i = 0 ; i < v.size(); i++)
                {
                UniSvcCharges t = (UniSvcCharges) v.elementAt(i);
		recnum=t.getRecnum();
		callslip=t.getCallslip();
		quant=t.getQuant();
		descript=t.getDescript();
		price=t.getPrice();
		frcode = t.getFrcode();
		total=t.getTotal();
		totalcharge=totalcharge+total;
                out.println("<tr><td>"+frcode+"</td><td>"+quant+"</td><td>"+descript+"</td><td>"+NumberFormat.getCurrencyInstance().format(price)+"</td><td>"+NumberFormat.getCurrencyInstance().format(total)+"</td></tr>");
		}
	out.println("</font>");
        out.println("</table>");
		}
	out.println("</font>");
	out.println("<table width=\"95%\" align=\"center\">");
	out.println("<font size=1>");
	out.println("<tr>");
	String itech_name = doGetTechInfo_name(techid);
	out.println("<P></p><br><br>");
	if (totalcharge>0) {
		out.println("<td>____________________________________</td><td>"+itech_name+"</td><td>Amount Due</td><td><b>"+NumberFormat.getCurrencyInstance().format(totalcharge)+"</b></td>");

	} else {
		out.println("<td>____________________________________</td><td>"+itech_name+"</td><td>Amount Due</td><td><b>_________________</b></td>");
	}
out.println("</tr><tr><td><h5>Customer Signature</h5></td><td><h5>Service Tech</h5></td><td>Amount Paid</td><td>_________________</td></tr></font></table>");

// Put the discount information in here...

		if (!action.equalsIgnoreCase("viewpcallslip")) 
				{
	out.println("<table width=\"95%\" align=\"center\">");
	out.println("<font size=1>");
                        if (nateid==0) {
                        if (custtype.equalsIgnoreCase("T")) {

		out.println("<tr><td></td><td><b>Please ask our technician how you could save money on this call with a Planned Service Agreement!</b></td></tr>");
                        }
			else if (custtype.equalsIgnoreCase("F")) {

		out.println("<tr><td></td><td><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
                        else {
		out.println("<tr><td></td><td><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
			//NO NATE ID - DO NOT PRINT NATE INFO
			} else {
	out.println("<tr><td> ");
	out.println("<IMG SRC=\"http://127.0.0.1:8080/servsys/natelogo.gif\" NAME=\"NateLogo\" ALIGN=LEFT WIDTH=60 HEIGHT=60 BORDER=0><BR CLEAR=LEFT>");
	out.println("</td>");
                        if (custtype.equalsIgnoreCase("T")) {

		out.println("<td>Your Service Technician is NATE Certified - ID: "+nate_id+"<br><b>Please ask our technician how you could save money on this call with a Planned Service Agreement!</b></td></tr>");
                        }
			else if (custtype.equalsIgnoreCase("F")) {

		out.println("<td>Your Service Technician is NATE Certified - ID: "+nate_id+"<br><b>Thank you for calling "+doGetCompanyName()+"</td></tr>");
			}
                        else {
		out.println("<td>Your Service Technician is NATE Certified - ID: "+nate_id+"<br><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
			}
			}
out.println("</font></table>");

out.println("</body>");
out.println("</html>");
	
		con.close();
		if (action.equalsIgnoreCase("viewpcallslip")) 
				{
                out.println("<br><br><a href="+classdir+"UniCash?action=showcustdetail&csection=2&custnum="+custnum+">Click here to continue</a>");
				}
}


private void doPrintInspection(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String mbody=ServsysPrintInspection.getIndividualItem (con, req,res, out, session, username, classdir); 
		con.close();
				
			}


private void doEditInspection(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String custstart = req.getParameter("custstart");
	String icrecnum = req.getParameter("icrecnum");
	String action=req.getParameter("action");
	if (icrecnum==null) {
	icrecnum = req.getParameter("crecnum");
	}
	String custstop = req.getParameter("custstop");
        int eenum=0;
        int ecustnum=0;
        String brand=null;
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
	String callslip = null;
        String idate = null;
        int equip1 = 0;
        int equip2 = 0;
        int equip3 = 0;
        int equip4 = 0;
	int crecnum = Integer.parseInt(icrecnum);
        String mbearing = null;
        String mblades = null;
        String ecoil = null;
        String dline = null;
        String dpan = null;
        String ielect = null;
        String mcap = null;
        String hstrips = null;
        String gpreassures = null;
        String ignition = null;
        String burners = null;
        String limits = null;
        String flame = null;
        String dinducer = null;
        String humidifier = null;
        String atemp = null;
        String tempsplit = null;
        String crlaa = null;
        String crlar = null;
        String ccapr = null;
        String ccapa = null;
        String frlaa = null;
        String frlar = null;
        String fcapr = null;
	String fcapa = null;
        String fbearing = null;
        String coilcond = null;
        String cleancoil = null;
        String contactor = null;
        String scap = null;
        String ctimedelay = null;
        String oelectrical = null;
        String comppad = null;
        String recommendations = null;
        String services = null;
        String dueamount = null;
        String paidamount = null;
        String lpres = null;
        String hpres = null;
        String startco = null;
        String runco = null;
        String stacktemp = null;
        String ventpipe = null;
        String oleaks = null;
        String ochimney = null;
        String opump = null;
        String ocontrols = null;
        String otstat = null;
        String oprimesafety = null;
        String osafetime = null;
        String oigntrans = null;
        String olubemotors = null;
        String ofulemix = null;
        String onozzle = null;
        String ogross = null;
        String onet = null;
        String osmoke = null;
        String oco2 = null;
        String oo2 = null;
        String oco = null;
        String oexcessair = null;
        String obreachdraft = null;
        String ofiredraft = null;
        String oeffic = null;
        String orating = null;
        String opower = null;
        String otank = null;
        String otcond = null;
        String odheat = null;
        String ocombustion = null;
        String oelectrodes = null;
        String obrush = null;
        String ofilters = null;
        int followup = 0;
	String sfollowup = null;
	String airflow=null;
	String spres_rated=null;
	String spres_supply=null;
	String spres_return=null;
	String g_filter = null;
	String g_electrical = null;
	String g_looppres=null;
	String g_cleancoil=null;
	String g_cleandrain=null;
	String g_pansensor=null;
	String g_cleancomp=null;
	String g_cleanunit=null;
	String g_oilblower=null;
	String g_cleanpump=null;
	String g_tsplit=null;
	String g_pampr=null;
	String g_pampa=null;
	String g_compar=null;
	String g_compaa=null;
	String g_bampr=null;
	String g_bampa=null;
	String g_pdrop=null;
	String rductsize=null;
	String sductsize=null;
	String sucttemp=null;
	String liqtemp=null;
	String r_temp=null;
	String rw_temp=null;
	String s_temp=null;
	String mcfm=null;
	String out_temp=null;
	String expansion=null;
	String ahage=null;
	String conage=null;
	int servsync=0;
	String parts=null;
			String  im_cleanbin=null;
		String  im_limeaway=null;
		String  im_bleach=null;
		String  im_watercomp=null;
		String  im_icecomp=null;
		String  im_filter=null;
		String  im_float=null;
		String  im_wpump=null;
		String  im_binsensor=null;
		String  im_testdump=null;
		String  im_electrical=null;
		String  im_comprated=null;
		String  im_compactual=null;
		String  ref_condcoilcond=null;
		String  ref_condcoilcleaned=null;
		String  ref_evapcoilcond=null;
		String  ref_evapcoilcleaned=null;
		String  ref_fanbladecond=null;
		String  ref_fanbladecleaned=null;
		String  ref_condensateline=null;
		String  ref_condfan=null;
		String  ref_doorgasket=null;
		String  ref_doorsclose=null;
		String  ref_productboxcond=null;
		String  ref_checkscrews=null;
		String  ref_evaptempin=null;
		String  ref_evaptempout=null;
		String  ref_boxtemp=null;
		String  ref_sightglasslevel=null;
		String  ref_refrigerant=null;
		String  ref_defrostclock=null;
		String  ref_defrosttimes=null;
		String  ref_doorheater=null;
		String  ref_electrical=null;
		String  ref_compamprated=null;
		String  ref_compampactual=null;
		String custsite=null;
		String sitenum=null;
//////////////////////////////////////////////////////
// Get Origional Call Information
//////////////////////////////////////////////////////


        Vector v;
        v = UniInspection.getIndItems(con, custnum, crecnum);
		
                for (int i = 0 ; i < v.size(); i++)
                {
                UniInspection t = (UniInspection) v.elementAt(i);
		crecnum=t.getCrecnum();
		custnum=t.getCustnum();
		custsite=t.getCustSite();
		sitenum=t.getSiteNum();
                callslip=t.getCallslip();
                idate=t.getIdate();
                equip1=t.getEquip1();
                equip2=t.getEquip2();
                equip3=t.getEquip3();
                equip4=t.getEquip4();
                mbearing=t.getMbearing();
                mblades=t.getMblades();
                ecoil=t.getEcoil();
                dline=t.getDline();
                dpan=t.getDpan();
                ielect=t.getIelect();
                mcap=t.getMcap();
                hstrips=t.getHstrips();
                filter=t.getFilter();
                gpreassures=t.getGpreassures();
                ignition=t.getIgnition();
                burners=t.getBurners();
                limits=t.getLimits();
                flame=t.getFlame();
                dinducer=t.getDinducer();
                humidifier=t.getHumidifier();
                atemp=t.getAtemp();
                tempsplit=t.getTempsplit();
                crlaa=t.getCrlaa();
                crlar=t.getCrlar();
                ccapr=t.getCcapr();
                ccapa=t.getCcapa();
                frlaa=t.getFrlaa();
                frlar=t.getFrlar();
		fcapr=t.getFcapr();
                fcapa=t.getFcapa();
                fbearing=t.getFbearing();
                coilcond=t.getCoilcond();
                cleancoil=t.getCleancoil();
                contactor=t.getContactor();
                scap=t.getScap();
                ctimedelay=t.getCtimedelay();
                oelectrical=t.getOelectrical();
                comppad=t.getComppad();
                recommendations=t.getRecommendations();
                services=t.getServices();
                dueamount=t.getDueamount();
                paidamount=t.getPaidamount();
                notes=t.getNotes();
                lpres=t.getLpres();
                hpres=t.getHpres();
                startco=t.getStartco();
                runco=t.getRunco();
                stacktemp=t.getStacktemp();
                ventpipe=t.getVentpipe();
                oleaks=t.getOleaks();
                ochimney=t.getOchimney();
                opump=t.getOpump();
                ocontrols=t.getOcontrols();
                otstat=t.getOtstat();
                oprimesafety=t.getOprimesafety();
                osafetime=t.getOsafetime();
                oigntrans=t.getOigntrans();
                olubemotors=t.getOlubemotors();
		ofulemix=t.getOfulemix();
                onozzle=t.getOnozzle();
                ogross=t.getOgross();
                onet=t.getOnet();
                osmoke=t.getOsmoke();
                oco2=t.getOco2();
                oo2=t.getOo2();
                oco=t.getOco();
                oexcessair=t.getOexcessair();
                obreachdraft=t.getObreachdraft();
                ofiredraft=t.getOfiredraft();
                oeffic=t.getOeffic();
                orating=t.getOrating();
                opower=t.getOpower();
                otank=t.getOtank();
                otcond=t.getOtcond();
                odheat=t.getOdheat();
                ocombustion=t.getOcombustion();
                oelectrodes=t.getOelectrodes();
                obrush=t.getObrush();
                ofilters=t.getOfilters();
                followup=t.getFollowup();
		
		if (followup==1)
			{
			sfollowup=null;
			} else {
			sfollowup="0";
			}
		airflow=t.getAirflow();
		expansion=t.getExpansion();
		ahage=t.getAHAge();
		conage=t.getConAge();
		spres_rated=t.getSpresRated();
		spres_supply=t.getSpresSupply();
		spres_return=t.getSpresReturn();
		g_filter=t.getGFilter();
		g_electrical=t.getGElectrical();
		g_looppres=t.getGLooppres();
		g_cleancoil=t.getGCleanCoil();
		g_cleandrain=t.getGCleanDrain();
		g_pansensor=t.getGPanSensor();
		g_cleancomp=t.getGCleanComp();
		g_cleanunit=t.getGCleanUnit();
		g_oilblower=t.getGOilBlower();
		g_cleanpump=t.getGCleanPump();
		g_tsplit=t.getGTsplit();
		g_pampr=t.getGPampr();
		g_pampa=t.getGPampa();
		g_compar=t.getGCompar();
		g_compaa=t.getGCompaa();
		g_bampr=t.getGBampr();
		g_bampa=t.getGBampa();
		g_pdrop=t.getGPdrop();
		rductsize=t.getRDuctSize();
		sductsize=t.getSDuctSize();
		liqtemp=t.getLiqTemp();
		sucttemp=t.getSuctTemp();
		r_temp=t.getRTemp();
		s_temp=t.getSTemp();
		rw_temp=t.getRWTemp();
		mcfm=t.getMCfm();
		out_temp=t.getOutTemp();
		servsync=t.getServSync();
		parts=t.getParts();
		im_cleanbin=t.im_cleanbin();
		im_limeaway=t.im_limeaway();
		im_bleach=t.im_bleach();
		im_watercomp=t.im_watercomp();
		im_icecomp=t.im_icecomp();
		im_filter=t.im_filter();
		im_float=t.im_float();
		im_wpump=t.im_wpump();
		im_binsensor=t.im_binsensor();
		im_testdump=t.im_testdump();
		im_electrical=t.im_electrical();
		im_comprated=t.im_comprated();
		im_compactual=t.im_compactual();
		ref_condcoilcond=t.ref_condcoilcond();
		ref_condcoilcleaned=t.ref_condcoilcleaned();
		ref_evapcoilcond=t.ref_evapcoilcond();
		ref_evapcoilcleaned=t.ref_evapcoilcleaned();
		ref_fanbladecond=t.ref_fanbladecond();
		ref_fanbladecleaned=t.ref_fanbladecleaned();
		ref_condensateline=t.ref_condensateline();
		ref_condfan=t.ref_condfan();
		ref_doorgasket=t.ref_doorgasket();
		ref_doorsclose=t.ref_doorsclose();
		ref_productboxcond=t.ref_productboxcond();
		ref_checkscrews=t.ref_checkscrews();
		ref_evaptempin=t.ref_evaptempin();
		ref_evaptempout=t.ref_evaptempout();
		ref_boxtemp=t.ref_boxtemp();
		ref_sightglasslevel=t.ref_sightglasslevel();
		ref_refrigerant=t.ref_refrigerant();
		ref_defrostclock=t.ref_defrostclock();
		ref_defrosttimes=t.ref_defrosttimes();
		ref_doorheater=t.ref_doorheater();
		ref_electrical=t.ref_electrical();
		ref_compamprated=t.ref_compamprated();
		ref_compampactual=t.ref_compampactual();
		}


///////////////////////////////////////////////////////
// Actual calls start here
//////////////////////////////////////////////////////



///////////////////////////////////////////////////////
// Old Callslip Information
//////////////////////////////////////////////////////
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Inspection</title>");
	out.println("</head>");

///////////////////////////////////////////////////////
// New Information 
//////////////////////////////////////////////////////

			if (action.equalsIgnoreCase("editinspection"))
	                        {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateinspection&custnum="+custnum+"\" name=\"addcat\">");
				}
			else if (action.equalsIgnoreCase("rceditinspection"))
	                        {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=rcupdateinspection&custnum="+custnum+"\" name=\"addcat\">");
				}
				else
				{
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=rupdateinspection&custnum="+custnum+"\" name=\"addcat\">");
				}
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"idate\" value="+doFormatDate(getDate(idate))+"></td>");
	out.println("<td>Call Slip</td><td>");
	out.println("<input type=\"text\" name=\"callslip\" value=\""+callslip+"\" size=15></td>");
	out.println("</tr>");
	out.println("</table>");
	out.println("<p></p><p><p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Air Handler</h3></th>");
	out.println("<tr><td>Filter</td><td><input type=\"text\" name=\"filter\" size=\"30\" value=\""+filter+"\"></td>");
	out.println("<td>Motor Bearings</td><td><input type=\"text\" name=\"mbearing\" size=\"30\" value=\""+mbearing+"\"></td></tr>");
	out.println("<tr><td>Motor Blades</td><td><input type=\"text\" name=\"mblades\" size=\"30\" value=\""+mblades+"\"></td>");
	out.println("<td>Evaporator Coil</td><td><input type=\"text\" name=\"ecoil\" size=\"30\" value=\""+ecoil+"\"></td></tr>");
	out.println("<tr><td>Drain Line</td><td><input type=\"text\" name=\"dline\" size=\"30\" value=\""+dline+"\"></td>");
	out.println("<td>Drain Pan</td><td><input type=\"text\" name=\"dpan\" size=\"30\" value=\""+dpan+"\"></td></tr>");
	out.println("<tr><td>Electrical</td><td><input type=\"text\" name=\"ielect\" size=\"30\" value=\""+ielect+"\"></td>");
	out.println("<td>Motor Capacitor</td><td><input type=\"text\" name=\"mcap\" size=\"30\" value=\""+mcap+"\"></td></tr>");
	out.println("<tr><td>Humidifier</td><td><input type=\"text\" name=\"humidifier\" size=\"30\" value=\""+humidifier+"\"></td>");
	out.println("<td>Temp Split</td><td><input type=\"text\" name=\"tempsplit\" size=\"30\" value=\""+tempsplit+"\"></td></tr>");
	out.println("<tr><td>Supply Temp</td><td><input type=\"text\" name=\"s_temp\" size=\"30\" value=\""+s_temp+"\"></td>");
	out.println("<td>Return Db Temp</td><td><input type=\"text\" name=\"r_temp\" size=\"30\" value=\""+r_temp+"\"></td></tr>");
	out.println("<tr><td>Return Wb Temp</td><td><input type=\"text\" name=\"rw_temp\" size=\"30\" value=\""+rw_temp+"\"></td>");
	out.println("<td>Heat Strips</td><td><input type=\"text\" name=\"hstrips\" size=\"30\" value=\""+hstrips+"\"></td><td></td></tr>");
	out.println("<tr><td>Expansion Device</td><td><input type=\"text\" name=\"expansion\" size=\"30\" value=\""+expansion+"\"></td>");
	out.println("<td>Air Handler Age</td><td><input type=\"text\" name=\"ahage\" size=\"30\" value=\""+ahage+"\"></td><td></td></tr>");
	
	out.println("</table>");

	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Gas Heat</h3></th><th></th>");
	
	out.println("<tr><td>Gas Pressure</td><td><input type=\"text\" name=\"gpreassures\" size=\"30\" value=\""+gpreassures+"\"></td>");
	out.println("<td>Ignition</td><td><input type=\"text\" name=\"ignition\" size=\"30\" value=\""+ignition+"\"></td></tr>");
	out.println("<tr><td>Burners</td><td><input type=\"text\" name=\"burners\" size=\"30\" value=\""+burners+"\"></td>");
	out.println("<td>Limits</td><td><input type=\"text\" name=\"limits\" size=\"30\" value=\""+limits+"\"></td></tr>");
	out.println("<tr><td>Flame</td><td><input type=\"text\" name=\"flame\" size=\"30\" value=\""+flame+"\"></td>");
	out.println("<td>Draft Inducer</td><td><input type=\"text\" name=\"dinducer\" size=\"30\" value=\""+dinducer+"\"></td></tr>");
	out.println("<tr><td>Start CO</td><td><input type=\"text\" name=\"startco\" size=\"30\" value=\""+startco+"\"></td>");
	out.println("<td>Run CO</td><td><input type=\"text\" name=\"runco\" size=\"30\" value=\""+runco+"\"></td></tr>");
	out.println("<tr><td>Stack Temp</td><td><input type=\"text\" name=\"stacktemp\" size=\"30\" value=\""+stacktemp+"\"></td>");
	out.println("<td>Vent Pipe</td><td><input type=\"text\" name=\"ventpipe\" size=\"30\" value=\""+ventpipe+"\"></td></tr>");
	out.println("</table>");

	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Air Flow/Quality</h3></th><th></th>");
	out.println("<tr><td>Air Flow</td><td><input type=\"text\" name=\"airflow\" size=\"30\" value=\""+airflow+"\"></td>");
	out.println("<td>Rated Static Pressure</td><td><input type=\"text\" name=\"spres_rated\" size=\"30\" value=\""+spres_rated+"\"></td></tr>");
	out.println("<tr><td>Supply Duct Size</td><td><input type=\"text\" name=\"sductsize\" size=\"30\" value=\""+sductsize+"\"></td>");
	out.println("<td>Return Duct Size</td><td><input type=\"text\" name=\"rductsize\" size=\"30\" value=\""+rductsize+"\"></td></tr>");
	out.println("<tr><td>Supply Static Pressure</td><td><input type=\"text\" name=\"spres_supply\" size=\"30\" value=\""+spres_supply+"\"></td>");
	out.println("<td>Return Static Pressure</td><td><input type=\"text\" name=\"spres_return\" size=\"30\" value=\""+spres_return+"\"></td></tr>");
	out.println("<tr><td>Measured CFM</td><td><input type=\"text\" name=\"mcfm\" size=\"30\" value=\""+mcfm+"\"></td></tr>");
	out.println("</table>");

	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Condensor</h3></th><th></th>");
	out.println("<tr><td>Suction Line Temp</td><td><input type=\"text\" name=\"sucttemp\" size=\"30\" value=\""+sucttemp+"\"></td>");
	out.println("<td>Liquid Line Temp</td><td><input type=\"text\" name=\"liqtemp\" size=\"30\" value=\""+liqtemp+"\"></td></tr>");
	out.println("<tr><td>Approach Temp</td><td><input type=\"text\" name=\"atemp\" size=\"30\" value=\""+atemp+"\"></td>");
	out.println("<td>Outdoor Temp</td><td><input type=\"text\" name=\"out_temp\" size=\"30\" value=\""+out_temp+"\"></td></tr>");
	out.println("<tr><td>Comp. Rated Amps</td><td><input type=\"text\" name=\"crlar\" size=\"30\" value=\""+crlar+"\"></td>");
	out.println("<td>Comp. Actual Amps</td><td><input type=\"text\" name=\"crlaa\" size=\"30\" value=\""+crlaa+"\"></td></tr>");
	out.println("<tr><td>Fan Amps Rated</td><td><input type=\"text\" name=\"frlar\" size=\"30\" value=\""+frlar+"\"></td>");
	out.println("<td>Fan Amps Actual</td><td><input type=\"text\" name=\"frlaa\" size=\"30\" value=\""+frlaa+"\"></td></tr>");
	out.println("<tr><td>Comp. Cap Rated</td><td><input type=\"text\" name=\"ccapr\" size=\"30\" value=\""+ccapr+"\"></td>");
	out.println("<td>Comp. Cap Actual</td><td><input type=\"text\" name=\"ccapa\" size=\"30\" value=\""+ccapa+"\"></td></tr>");
	out.println("<tr><td>Fan Cap. Rated</td><td><input type=\"text\" name=\"fcapr\" size=\"30\" value=\""+fcapr+"\"></td>");
	out.println("<td>Fan Cap. Actual</td><td><input type=\"text\" name=\"fcapa\" size=\"30\" value=\""+fcapa+"\"></td></tr>");
	out.println("<tr><td>Coil Conditions</td><td><input type=\"text\" name=\"coilcond\" size=\"30\" value=\""+coilcond+"\"></td>");
	out.println("<td>Cleaned Coil</td><td><input type=\"text\" name=\"cleancoil\" size=\"30\" value=\""+cleancoil+"\"></td></tr>");
	out.println("<tr><td>Start Capacitor</td><td><input type=\"text\" name=\"scap\" size=\"30\" value=\""+scap+"\"></td>");
	out.println("<td>Time Delay</td><td><input type=\"text\" name=\"ctimedelay\" size=\"30\" value=\""+ctimedelay+"\"></td></tr>");
	out.println("<tr><td>Electrical</td><td><input type=\"text\" name=\"oelectrical\" size=\"30\" value=\""+oelectrical+"\"></td>");
	out.println("<td>Contactor</td><td><input type=\"text\" name=\"contactor\" size=\"30\" value=\""+contactor+"\"></td></tr>");
	out.println("<tr><td>Condensor Pad</td><td><input type=\"text\" name=\"comppad\" size=\"30\" value=\""+comppad+"\"></td>");
	out.println("<td>Fan Bearings</td><td><input type=\"text\" name=\"fbearing\" size=\"30\" value=\""+fbearing+"\"></td></tr>");
	out.println("<tr><td>Low Pressure</td><td><input type=\"text\" name=\"lpres\" size=\"30\" value=\""+lpres+"\"></td>");
	out.println("<td>High Pressure</td><td><input type=\"text\" name=\"hpres\" size=\"30\" value=\""+hpres+"\"></td></tr>");
	out.println("<tr><td>Condensor Age</td><td><input type=\"text\" name=\"conage\" size=\"30\" value=\""+conage+"\"></td>");
	out.println("</table>");

	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Oil Heat</h3></th><th></th>");
	out.println("<tr><td>Oil Leaks</td><td><input type=\"text\" name=\"oleaks\" value=\""+oleaks+"\" size=\"30\"></td>");
	out.println("<td>Chimney and Flue</td><td><input type=\"text\" name=\"ochimney\" value=\""+ochimney+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Pump Pressure</td><td><input type=\"text\" name=\"opump\" value=\""+opump+"\" size=\"30\"></td>");
	out.println("<td>Controls</td><td><input type=\"text\" name=\"ocontrols\" value=\""+ocontrols+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Thermostat</td><td><input type=\"text\" name=\"otstat\" value=\""+otstat+"\" size=\"30\"></td>");
	out.println("<td>Primary Control Safety</td><td><input type=\"text\" name=\"oprimesafety\" value=\""+oprimesafety+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Safety Timing</td><td><input type=\"text\" name=\"osafetime\" value=\""+osafetime+"\" size=\"30\"></td>");
	out.println("<td>Ignition Transformer</td><td><input type=\"text\" name=\"oigntrans\" value=\""+oigntrans+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Lubricate Motors</td><td><input type=\"text\" name=\"olubemotors\" value=\""+olubemotors+"\" size=\"30\"></td>");
	out.println("<td>Fuel/Air Mix</td><td><input type=\"text\" name=\"ofulemix\" value=\""+ofulemix+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Nozzle Size</td><td><input type=\"text\" name=\"onozzle\" value=\""+onozzle+"\" size=\"30\"></td>");
	out.println("<td>Gross Stack Temp</td><td><input type=\"text\" name=\"ogross\" value=\""+ogross+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Net Stack Temp</td><td><input type=\"text\" name=\"onet\" value=\""+onet+"\" size=\"30\"></td>");
	out.println("<td>Smoke</td><td><input type=\"text\" name=\"osmoke\" value=\""+osmoke+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>CO2</td><td><input type=\"text\" name=\"oco2\" value=\""+oco2+"\" size=\"30\"></td>");
	out.println("<td>O2</td><td><input type=\"text\" name=\"oo2\" value=\""+oo2+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>CO</td><td><input type=\"text\" name=\"oco\" value=\""+oco+"\" size=\"30\"></td>");
	out.println("<td>Excess Air</td><td><input type=\"text\" name=\"oexcessair\" value=\""+oexcessair+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Breech Draft</td><td><input type=\"text\" name=\"obreachdraft\" value=\""+obreachdraft+"\" size=\"30\"></td>");
	out.println("<td>Overfire Draft</td><td><input type=\"text\" name=\"ofiredraft\" value=\""+ofiredraft+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Efficiency</td><td><input type=\"text\" name=\"oeffic\" value=\""+oeffic+"\" size=\"30\"></td>");
	out.println("<td>Rating (Excellent, Good, Fair, Poor)</td><td><input type=\"text\" name=\"orating\" value=\""+orating+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Chimney/Power Vent</td><td><input type=\"text\" name=\"opower\" value=\""+opower+"\" size=\"30\"></td>");
	out.println("<td>Tank Size</td><td><input type=\"text\" name=\"otank\" value=\""+otank+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Tank Condition</td><td><input type=\"text\" name=\"otcond\" value=\""+otcond+"\" size=\"30\"></td>"); 
	out.println("<td>Domestic Hot Water</td><td><input type=\"text\" name=\"odheat\" value=\""+odheat+"\" size=\"30\"></td></tr>");
	out.println("<tr><td>Combustion Chamber</td><td><input type=\"text\" name=\"ocombustion\" value=\""+ocombustion+"\" size=\"30\"></td>");
	out.println("<td>Electrodes</td><td><input type=\"text\" name=\"oelectrodes\" value=\""+oelectrodes+"\" size=\"30\"></td></tr>"); 
	out.println("<tr><td>Boiler/Furnace Brush/Vacuum</td><td><input type=\"text\" name=\"obrush\" value=\""+obrush+"\" size=\"30\"></td>");
	out.println("<td>Filters</td><td><input type=\"text\" name=\"ofilters\" value=\""+ofilters+"\" size=\"30\"></td></tr>");
	out.println("</table>");



	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Geothermal</h3></th><th></th>");
	out.println("<tr><td>Loop Pressure</td><td><input type=\"text\" name=\"g_looppres\" size=\"30\" value=\""+g_looppres+"\"></td>");
	out.println("<td>Pressure Drop</td><td><input type=\"text\" name=\"g_pdrop\" size=\"30\" value=\""+g_pdrop+"\"></td></tr>");
	out.println("<tr><td>Comp. Rated Amps</td><td><input type=\"text\" name=\"g_compar\" size=\"30\" value=\""+g_compar+"\"></td>");
	out.println("<td>Comp. Actual Amps</td><td><input type=\"text\" name=\"g_compaa\" size=\"30\" value=\""+g_compaa+"\"></td></tr>");
	out.println("<tr><td>Blower Amps Rated</td><td><input type=\"text\" name=\"g_bampr\" size=\"30\" value=\""+g_bampr+"\"></td>");
	out.println("<td>Blower Amps Actual</td><td><input type=\"text\" name=\"g_bampa\" size=\"30\" value=\""+g_bampa+"\"></td></tr>");
	out.println("<tr><td>Pump Amps Rated</td><td><input type=\"text\" name=\"g_pampr\" size=\"30\" value=\""+g_pampr+"\"></td>");
	out.println("<td>Pump Amps Actual</td><td><input type=\"text\" name=\"g_pampa\" size=\"30\" value=\""+g_pampa+"\"></td></tr>");
	out.println("<tr><td>Cleaned Coil</td><td><input type=\"text\" name=\"g_cleancoil\" size=\"30\" value=\""+g_cleancoil+"\"></td>");
	out.println("<td>Cleaned Compartments</td><td><input type=\"text\" name=\"g_cleancomp\" size=\"30\" value=\""+g_cleancomp+"\"></td></tr>");
	out.println("<tr><td>Clean Drainlines</td><td><input type=\"text\" name=\"g_cleandrain\" size=\"30\" value=\""+g_cleandrain+"\"></td>");
	out.println("<td>Oil Blower</td><td><input type=\"text\" name=\"g_oilblower\" size=\"30\" value=\""+g_oilblower+"\"></td></tr>");
	out.println("<tr><td>Clean Cond. Pump</td><td><input type=\"text\" name=\"g_cleanpump\" size=\"30\" value=\""+g_cleanpump+"\"></td>");
	out.println("<td>Temp Split</td><td><input type=\"text\" name=\"g_tsplit\" size=\"30\" value=\""+g_tsplit+"\"></td></tr>");
	out.println("<tr><td>Electrical</td><td><input type=\"text\" name=\"g_electrical\" size=\"30\" value=\""+g_electrical+"\"></td>");
	out.println("<td>Filter</td><td><input type=\"text\" name=\"g_filter\" size=\"30\" value=\""+g_filter+"\"></td></tr>");
	out.println("<tr><td>Cleaned Unit</td><td><input type=\"text\" name=\"g_cleanunit\" size=\"30\" value=\""+g_cleanunit+"\"></td>");
	out.println("<td>Checked Pan Sensor</td><td><input type=\"text\" name=\"g_pansensor\" size=\"30\" value=\""+g_pansensor+"\"></td></tr>");
	out.println("</table>");
	out.println("<p></p><p></p>");

		
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Ice Machine</h3></th><th></th>");
	out.println("<tr><td>Clean Ice Bin</td><td><input type=\"text\" name=\"im_cleanbin\" size=\"30\" value=\""+im_cleanbin+"\"></td>");
	out.println("<td>Clean With LimeAway</td><td><input type=\"text\" name=\"im_limeaway\" size=\"30\" value=\""+im_limeaway+"\"></td></tr>");
	out.println("<tr><td>Clean With Bleach</td><td><input type=\"text\" name=\"im_bleach\" size=\"30\" value=\""+im_bleach+"\"></td>");
	out.println("<td>Clean All Water Components</td><td><input type=\"text\" name=\"im_watercomp\" size=\"30\" value=\""+im_watercomp+"\"></td></tr>");
	out.println("<tr><td>Clean All Ice Components</td><td><input type=\"text\" name=\"im_icecomp\" size=\"30\" value=\""+im_icecomp+"\"></td>");
	out.println("<td>Clean / Check Water Filter</td><td><input type=\"text\" name=\"im_filter\" size=\"30\" value=\""+im_filter+"\"></td></tr>");
	out.println("<tr><td>Clean Float</td><td><input type=\"text\" name=\"im_float\" size=\"30\" value=\""+im_float+"\"></td>");
	out.println("<td>Clean Water Pump</td><td><input type=\"text\" name=\"im_wpump\" size=\"30\" value=\""+im_wpump+"\"></td></tr>");
	out.println("<tr><td>Check Bin Sensor</td><td><input type=\"text\" name=\"im_binsensor\" size=\"30\" value=\""+im_binsensor+"\"></td>");
	out.println("<td>Run 3 Batches and Dump</td><td><input type=\"text\" name=\"im_testdump\" size=\"30\" value=\""+im_testdump+"\"></td></tr>");
	out.println("<tr><td>Check Electrical</td><td><input type=\"text\" name=\"im_electrical\" size=\"30\" value=\""+im_electrical+"\"></td>");
	out.println("<td>Compressor Amps Rated</td><td><input type=\"text\" name=\"im_comprated\" size=\"30\" value=\""+im_comprated+"\"></td></tr>");
	out.println("<tr><td>Compressor Amps Actual</td><td><input type=\"text\" name=\"im_compactual\" size=\"30\" value=\""+im_compactual+"\"></td></tr>");
	out.println("</table>");
	out.println("<p></p><p></p>");


	out.println("<table size=100% border=1>");
	out.println("<th><h3>Refrigeration</h3></th><th></th>");
	out.println("<tr><td>Condensor Coil Condition</td><td><input type=\"text\" name=\"ref_condcoilcond\" size=\"30\" value=\""+ref_condcoilcond+"\"></td>");
	out.println("<td>Condensor Coil Cleaned</td><td><input type=\"text\" name=\"ref_condcoilcleaned\" size=\"30\" value=\""+ref_condcoilcleaned+"\"></td></tr>");
	out.println("<tr><td>Evaperator Coil Condition</td><td><input type=\"text\" name=\"ref_evapcoilcond\" size=\"30\" value=\""+ref_evapcoilcond+"\"></td>");
	out.println("<td>Evaperator Coil Cleaned</td><td><input type=\"text\" name=\"ref_evapcoilcleaned\" size=\"30\" value=\""+ref_evapcoilcleaned+"\"></td></tr>");
	out.println("<tr><td>Fan Blade Condition</td><td><input type=\"text\" name=\"ref_fanbladecond\" size=\"30\" value=\""+ref_fanbladecond+"\"></td>");
	out.println("<td>Fan Blade Cleaned</td><td><input type=\"text\" name=\"ref_fanbladecleaned\" size=\"30\" value=\""+ref_fanbladecleaned+"\"></td></tr>");
	out.println("<tr><td>Cleaned Condensate Line</td><td><input type=\"text\" name=\"ref_condensateline\" size=\"30\" value=\""+ref_condensateline+"\"></td>");
	out.println("<td>Condensor Fan</td><td><input type=\"text\" name=\"ref_condfan\" size=\"30\" value=\""+ref_condfan+"\"></td></tr>");
	out.println("<tr><td>Door Gaskets</td><td><input type=\"text\" name=\"ref_doorgasket\" size=\"30\" value=\""+ref_doorgasket+"\"></td>");
	out.println("<td>Doors Close Properly</td><td><input type=\"text\" name=\"ref_doorsclose\" size=\"30\" value=\""+ref_doorsclose+"\"></td></tr>");
	out.println("<tr><td>Product Box Condition</td><td><input type=\"text\" name=\"ref_productboxcond\" size=\"30\" value=\""+ref_productboxcond+"\"></td>");
	out.println("<td>Check Screws</td><td><input type=\"text\" name=\"ref_checkscrews\" size=\"30\" value=\""+ref_checkscrews+"\"></td></tr>");
	out.println("<tr><td>Evaporator Air Temp In</td><td><input type=\"text\" name=\"ref_evaptempin\" size=\"30\" value=\""+ref_evaptempin+"\"></td>");
	out.println("<td>Evaporator Air Temp Out</td><td><input type=\"text\" name=\"ref_evaptempout\" size=\"30\" value=\""+ref_evaptempout+"\"></td></tr>");
	out.println("<tr><td>Box Temp</td><td><input type=\"text\" name=\"ref_boxtemp\" size=\"30\" value=\""+ref_boxtemp+"\"></td>");
	out.println("<td>Sight Glass Level</td><td><input type=\"text\" name=\"ref_sightglasslevel\" size=\"30\" value=\""+ref_sightglasslevel+"\"></td></tr>");
	out.println("<tr><td>Refrigerant</td><td><input type=\"text\" name=\"ref_refrigerant\" size=\"30\" value=\""+ref_refrigerant+"\"></td>");
	out.println("<td>Defrost Clock</td><td><input type=\"text\" name=\"ref_defrostclock\" size=\"30\" value=\""+ref_defrostclock+"\"></td></tr>");
	out.println("<tr><td>Defrost Times</td><td><input type=\"text\" name=\"ref_defrosttimes\" size=\"30\" value=\""+ref_defrosttimes+"\"></td>");
	out.println("<td>Check Electrical</td><td><input type=\"text\" name=\"ref_electrical\" size=\"30\" value=\""+ref_electrical+"\"></td></tr>");
	out.println("<tr><td>Compressor Amp Rated</td><td><input type=\"text\" name=\"ref_compamprated\" size=\"30\" value=\""+ref_compamprated+"\"></td>");
	out.println("<td>Compressor Amp Actual</td><td><input type=\"text\" name=\"ref_compampactual\" size=\"30\" value=\""+ref_compampactual+"\"></td></tr>");	
	out.println("</table>");
	out.println("<p></p><p></p>");
		
	
	
	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
///////////////////////////////////////////////////////
// Here is where the services - recomm - notes area is
//////////////////////////////////////////////////////
	out.println("<tr><td>Services</td><td>");
	out.println("<textarea name=\"services\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+services+"</textarea>");
	out.println("</td></tr>");

	out.println("<tr><td>Recommendations</td><td>");
	out.println("<textarea name=\"recommendations\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+recommendations+"</textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Parts Needed</td><td>");
	out.println("<textarea name=\"parts\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+parts+"</textarea>");
	out.println("</td></tr>");
	
	
	out.println("<tr><td>Add Follow-up</td><td>");
	if (followup==0)
		{
	out.println("<input type=\"checkbox\" name=\"followup\" value="+sfollowup +"></td></tr>");
		} else {
	out.println("<input type=\"checkbox\" name=\"followup\" value="+sfollowup +" checked></td></tr>");
	}
	//out.println("<input type=\"checkbox\" name=\"followup\" value=1></td></tr>");

	out.println("</table>");

	
	//out.println("<tr><td>Notes</td><td>");
	
		out.println("<h3>Notes</h3>");

	Vector vn;
        vn = InspectNotes.getAllItems(con,custsite, sitenum, callslip);
        out.println("<table border=1 width=100%>");
        out.println("<th>Date</th><th>User</th><th>Note</th>");
	String note="";
	String ndate="";
	String ncallslip="";
	String nuserlogin="";
	String nnote="";
	int nrecnum=0;
	int nservsync=0;
		
                for (int in = 0 ; in < vn.size(); in++)
                {
                InspectNotes tn = (InspectNotes) vn.elementAt(in);
		nnote=tn.getNote();
		ncallslip=tn.getCallslip();
		nuserlogin=tn.getUserLogin();
		nrecnum=tn.getRecNum();
		ndate=tn.getNDate();
		nservsync=tn.getServsync();
                out.println("<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td>");
		if ((nuserlogin.equalsIgnoreCase(username))&&(nservsync==0)) {
			out.println("<td><a href="+classdir+"UniCash?action=deletenote&recnum="+nrecnum+"&custnum="+custnum+"&custsite="+custsite+"&sitenum="+sitenum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+action+">Delete</a></td>");
		}
			out.println("</tr>");
                }

		out.println("</table><a href="+classdir+"UniCash?action=addnote&custnum="+custnum+"&custsite="+custsite+"&sitenum="+sitenum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+action+">Add Notes to Callslip</a><br><br>");

	//out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+notes+"</textarea>");
	//out.println("</td></tr></table>");

	
/////////////////////////////////////////////
// Here is where the equipment section starts 
/////////////////////////////////////////////

        //Vector v;
        v = UniEquip.getAllItems(con,custnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Number</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniEquip t = (UniEquip) v.elementAt(i);
		eenum=t.getId();
		ecustnum=t.getCustnum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		notes=t.getNotes();
                out.println("<tr><td>"+eenum+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
                }
	out.println("</table>");

	out.println("</table>");
	out.println("<h3>Enter Equipment Number</h3>");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Equipment 1</td><td><input type=\"text\" name=\"equip1\" size=\"30\" value=\""+equip1+"\"></td><td>Equipment 2</td><td><input type=\"text\" name=\"equip2\" size=\"30\" value=\""+equip2+"\"></td></tr>");
	out.println("<tr><td>Equipment 3</td><td><input type=\"text\" name=\"equip3\" size=\"30\" value=\""+equip3+"\"></td><td>Equipment 4</td><td><input type=\"text\" name=\"equip4\" size=\"30\" value=\""+equip4+"\"></td></tr>");
	out.println("</table>");


	out.println("<input type=\"hidden\" name=\"icrecnum\" value=\""+crecnum+"\" >");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\" >");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("</CENTER>");
	
	out.println("<h3>Inventory Used</h3>");

	
	out.println("<table width=\"100%\" align=\"center\" border=1>");
	out.println("<font size=1>");
	out.println("<th>Key</th><th>Part</th><th>Quantity</th><th>Date</th><th>Delete</th>");

	Vector ci;
	ci = InvUse.getAllCallslipItems(con, callslip, idate);
	for (int cc = 0 ; cc < ci.size(); cc++)
	{
		InvUse ti = (InvUse) ci.elementAt(cc);
		String keycode = ti.getKeyCode();
		String itemname = ti.getItemName();
		String pquant = ti.getQuantity();
		String iidate = doFormatDate(getDate(ti.getTDate()));
		int transnum = ti.getItemnum();
		out.println("<tr><td>"+keycode+"</td><td>"+itemname+"</td><td>"+pquant+"</td><td>"+iidate+"</td>");
		out.println("<td><a href="+classdir+"UniCash?action=delinvtrans2&transnum="+transnum+"&psource=editinspection&callslip="+callslip+"&crecnum="+crecnum+"&cdate="+idate+"&custnum="+custnum+">Delete</a></td>");
		out.println("</tr>");
		}
	out.println("</font>");
	out.println("</table>");
	out.println("</table><br><br><a href="+classdir+"UniCash?action=addinvmenu&custnum="+custnum+"&psource=editinspection&callslip="+callslip+"&crecnum="+crecnum+"&cdate="+idate+">Add Inventory to Callslip</a>");
	out.println("<br><br>");

	out.println("<h3>Charges</h3>");
        v = UniSvcCharges.getAllItems(con,callslip);
        out.println("<table border=1 width=100%>");
        out.println("<th>Code</th><th>Quantity</th><th>Description</th><th>Price</th><th>Sub Total</th>");
	String descript;
	int recnum;
	int frcode=0;
	double price=0.00;
	double total=0.00;
	double quant=0.00;
	
		
                for (int i = 0 ; i < v.size(); i++)
                {
                UniSvcCharges t = (UniSvcCharges) v.elementAt(i);
		recnum=t.getRecnum();
		callslip=t.getCallslip();
		quant=t.getQuant();
		frcode=t.getFrcode();
		descript=t.getDescript();
		price=t.getPrice();
		total=t.getTotal();
		
               out.println("<tr><td>"+frcode+"</td><td>"+quant+"</td><td><a href="+classdir+"UniCash?action=editchargerec&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&chargerec="+recnum+"&custstart="+custstart+"&custstop="+custstop+"&psource="+action+">"+descript+"</a></td><td>"+NumberFormat.getCurrencyInstance().format(price)+"</td><td>"+NumberFormat.getCurrencyInstance().format(total)+"</td><td><a href="+classdir+"UniCash?action=delchargerec&psource="+action+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&chargerec="+recnum+">Delete</a></tr>");
                }
	out.println("</table><br><br><a href="+classdir+"UniCash?action=addchargemenu&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+action+">Add Charges to Callslip</a>");
	out.println("<br><br>");
	
	
	
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Update\">");
	out.println("<INPUT TYPE=\"reset\">");
		con.close();
	}


private void doUpdateCallslip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String tcrecnum = req.getParameter("crecnum");
       		 int crecnum = Integer.parseInt(tcrecnum);
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
                String callslip = req.getParameter("callslip");
                String reason= req.getParameter("reason");
                String services= req.getParameter("services");
                String cdate= req.getParameter("cdate");
                String recommendations= req.getParameter("recommendations");
		String parts=req.getParameter("parts");
                String rscheduled= req.getParameter("rscheduled");
                String charges= req.getParameter("charges");
                String collected= req.getParameter("collected");
                String notes= req.getParameter("notes");
                String equip1= req.getParameter("equip1");
		String equip2= req.getParameter("equip2");
                String equip3= req.getParameter("equip3");
		String equip4= req.getParameter("equip4");
		String tfollowup= req.getParameter("followup");
		String crectype= req.getParameter("crectype");
		String action= req.getParameter("action");
		int followup=0;	
       		//int followup = Integer.parseInt(tfollowup);
		if (tfollowup != null) {
       		followup = 1;
		} else {
		followup =0;
			}

		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
			
                UniCallslip.UpdateItem(con, crecnum,custnum, callslip, doFormatDateDb(getDateDb(cdate)), equip1, equip2,equip3, equip4, reason, services, recommendations, rscheduled, charges, collected, notes, followup, CustNum, SiteNum, crectype, username, parts);
		con.close();
			if (action.equalsIgnoreCase("rupdatecallslip"))
	                        {
                res.sendRedirect(""+classdir+"UniCash?action=followupreport");
				} 
			else if (action.equalsIgnoreCase("rcupdatecallslip"))
	                        {
                res.sendRedirect(""+classdir+"UniCash?action=selectcallrepdatespan");
				} 
			else
				{
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"&csection=2");
				}
            }
	


private void doUpdateCheckme(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String tcrecnum = req.getParameter("crecnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String crectype = req.getParameter("crectype");
       		 int custnum = Integer.parseInt(tcustnum);
                String callslip = req.getParameter("callslip");
                String reason= req.getParameter("reason");
                String services= req.getParameter("services");
                String cdate= req.getParameter("cdate");
                String recommendations= req.getParameter("recommendations");
                String rscheduled= req.getParameter("rscheduled");
                String charges= req.getParameter("charges");
                String collected= req.getParameter("collected");
                String notes= req.getParameter("notes");
                String equip1= req.getParameter("equip1");
		String equip2= req.getParameter("equip2");
                String equip3= req.getParameter("equip3");
		String equip4= req.getParameter("equip4");
		String tfollowup= req.getParameter("followup");
       		//int followup = Integer.parseInt(tfollowup);
       		int crecnum = Integer.parseInt(tcrecnum);
		String tservices = services.replaceAll("\n","<br>");	
		String trecommendations = recommendations.replaceAll("\n","<br>");	
	String oa1= req.getParameter("oa1");
	String oa2= req.getParameter("oa2");
	String rwb1= req.getParameter("rwb1");
	String rwb2= req.getParameter("rwb2");
	String rdb1= req.getParameter("rdb1");
	String rdb2= req.getParameter("rdb2");
	String sdb1= req.getParameter("sdb1");
	String sdb2= req.getParameter("sdb2");
	String slt1= req.getParameter("slt1");
	String slt2= req.getParameter("slt2");
	String est1= req.getParameter("est1");
	String est2= req.getParameter("est2");
	String cst1= req.getParameter("cst1");
	String cst2= req.getParameter("cst2");
	String llt1= req.getParameter("llt1");
	String llt2= req.getParameter("llt2");
	String lp1= req.getParameter("lp1");
	String lp2= req.getParameter("lp2");
	String hp1= req.getParameter("hp1");
	String hp2= req.getParameter("hp2");
	String ss1= req.getParameter("ss1");
	String ss2= req.getParameter("ss2");
	String rs1= req.getParameter("rs1");
	String rs2= req.getParameter("rs2");
	String rfc1= req.getParameter("rfc1");
	String rca1= req.getParameter("rca1");
	String afcor= req.getParameter("afcor");
	String csp= req.getParameter("csp");
	String newins= req.getParameter("newins");
	String acsuite= req.getParameter("acsuite");
	String acn= req.getParameter("acn");
	String comp= req.getParameter("comp");
	String ttype= req.getParameter("ttype");
	String actype= req.getParameter("actype");
	String manyear= req.getParameter("manyear");
	String min1= req.getParameter("min1");
	String min2= req.getParameter("min2");
	String rtype= req.getParameter("rtype");
	String trueflow= req.getParameter("trueflow");
	String hport= req.getParameter("hport");
	String mdevice= req.getParameter("mdevice");
	String targetas=req.getParameter("targetas");
		int followup=0;
		if (tfollowup != null) {
       		followup = 1;
		} else {
		followup =0;
		}

		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
			
                UniCheckMe.UpdateItem(con, crecnum, custnum, callslip, doFormatDateDb(getDateDb(cdate)), equip1, equip2, equip3, equip4, reason, tservices, trecommendations, rscheduled, charges, collected, notes, followup, CustNum, SiteNum, crectype, username, oa1, oa2, rwb1,rwb2, rdb1, rdb2, sdb1, sdb2, slt1, slt2, est1, est2,cst1,cst2,llt1, llt2, lp1, lp2, hp1, hp2, ss1, ss2, rs1, rs2, rfc1, rca1, afcor, csp, newins, acsuite, acn, comp, ttype, actype, manyear, min1, min2, rtype, trueflow, hport, mdevice, targetas);
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=7&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }

private void doSaveCheckme(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String crectype = req.getParameter("crectype");
       		 int custnum = Integer.parseInt(tcustnum);
                String callslip = req.getParameter("callslip");
                String reason= req.getParameter("reason");
                String services= req.getParameter("services");
                String cdate= req.getParameter("cdate");
                String recommendations= req.getParameter("recommendations");
                String rscheduled= req.getParameter("rscheduled");
                String charges= req.getParameter("charges");
                String collected= req.getParameter("collected");
                String notes= req.getParameter("notes");
                String equip1= req.getParameter("equip1");
		String equip2= req.getParameter("equip2");
                String equip3= req.getParameter("equip3");
		String equip4= req.getParameter("equip4");
		String tfollowup= req.getParameter("followup");
       		//int followup = Integer.parseInt(tfollowup);
		String tservices = services.replaceAll("\n","<br>");	
		String trecommendations = recommendations.replaceAll("\n","<br>");	
	String oa1= req.getParameter("oa1");
	String oa2= req.getParameter("oa2");
	String rwb1= req.getParameter("rwb1");
	String rwb2= req.getParameter("rwb2");
	String rdb1= req.getParameter("rdb1");
	String rdb2= req.getParameter("rdb2");
	String sdb1= req.getParameter("sdb1");
	String sdb2= req.getParameter("sdb2");
	String slt1= req.getParameter("slt1");
	String slt2= req.getParameter("slt2");
	String est1= req.getParameter("est1");
	String est2= req.getParameter("est2");
	String cst1= req.getParameter("cst1");
	String cst2= req.getParameter("cst2");
	String llt1= req.getParameter("llt1");
	String llt2= req.getParameter("llt2");
	String lp1= req.getParameter("lp1");
	String lp2= req.getParameter("lp2");
	String hp1= req.getParameter("hp1");
	String hp2= req.getParameter("hp2");
	String ss1= req.getParameter("ss1");
	String ss2= req.getParameter("ss2");
	String rs1= req.getParameter("rs1");
	String rs2= req.getParameter("rs2");
	String rfc1= req.getParameter("rfc1");
	String rca1= req.getParameter("rca1");
	String afcor= req.getParameter("afcor");
	String csp= req.getParameter("csp");
	String newins= req.getParameter("newins");
	String acsuite= req.getParameter("acsuite");
	String acn= req.getParameter("acn");
	String comp= req.getParameter("comp");
	String ttype= req.getParameter("ttype");
	String actype= req.getParameter("actype");
	String manyear= req.getParameter("manyear");
	String min1= req.getParameter("min1");
	String min2= req.getParameter("min2");
	String rtype= req.getParameter("rtype");
	String trueflow= req.getParameter("trueflow");
	String hport= req.getParameter("hport");
	String mdevice= req.getParameter("mdevice");
	String targetas=req.getParameter("targetas");
		int followup=0;
		if (tfollowup != null) {
       		followup = 1;
		} else {
		followup =0;
		}

		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
			
                UniCheckMe.AddItem(con, custnum, callslip, doFormatDateDb(getDateDb(cdate)), equip1, equip2, equip3, equip4, reason, tservices, trecommendations, rscheduled, charges, collected, notes, followup, CustNum, SiteNum, crectype, username, oa1, oa2, rwb1,rwb2, rdb1, rdb2, sdb1, sdb2, slt1, slt2, est1, est2,cst1,cst2,llt1, llt2, lp1, lp2, hp1, hp2, ss1, ss2, rs1, rs2, rfc1, rca1, afcor, csp, newins, acsuite, acn, comp, ttype, actype, manyear, min1, min2, rtype, trueflow, hport, mdevice, targetas);
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=7&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }


private void doSaveCallslip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String crectype = req.getParameter("crectype");
       		 int custnum = Integer.parseInt(tcustnum);
                String callslip = req.getParameter("callslip");
                String reason= req.getParameter("reason");
                String services= req.getParameter("services");
                String cdate= req.getParameter("cdate");
                String recommendations= req.getParameter("recommendations");
                String rscheduled= req.getParameter("rscheduled");
                String charges= req.getParameter("charges");
                String collected= req.getParameter("collected");
                String notes= req.getParameter("notes");
                String equip1= req.getParameter("equip1");
		String equip2= req.getParameter("equip2");
                String equip3= req.getParameter("equip3");
		String equip4= req.getParameter("equip4");
		String tfollowup= req.getParameter("followup");
       		//int followup = Integer.parseInt(tfollowup);
		String tservices = services.replaceAll("\n","<br>");	
		String trecommendations = recommendations.replaceAll("\n","<br>");	
		String parts=req.getParameter("parts");

	String oa1= req.getParameter("oa1");
	String oa2= req.getParameter("oa2");
	String rwb1= req.getParameter("rwb1");
	String rwb2= req.getParameter("rwb2");
	String rdb1= req.getParameter("rdb1");
	String rdb2= req.getParameter("rdb2");
	String sdb1= req.getParameter("sdb1");
	String sdb2= req.getParameter("sdb2");
	String slt1= req.getParameter("slt1");
	String slt2= req.getParameter("slt2");
	String est1= req.getParameter("est1");
	String est2= req.getParameter("est2");
	String cst1= req.getParameter("cst1");
	String cst2= req.getParameter("cst2");
	String llt1= req.getParameter("llt1");
	String llt2= req.getParameter("llt2");
	String lp1= req.getParameter("lp1");
	String lp2= req.getParameter("lp2");
	String hp1= req.getParameter("hp1");
	String hp2= req.getParameter("hp2");
	String ss1= req.getParameter("ss1");
	String ss2= req.getParameter("ss2");
	String rs1= req.getParameter("rs1");
	String rs2= req.getParameter("rs2");
	String rfc1= req.getParameter("rfc1");
	String rca1= req.getParameter("rca1");
	String afcor= req.getParameter("afcor");
	String csp= req.getParameter("csp");
	String newins= req.getParameter("newins");
	String acsuite= req.getParameter("acsuite");
	String acn= req.getParameter("acn");
	String comp= req.getParameter("comp");
	String ttype= req.getParameter("ttype");
	String actype= req.getParameter("actype");
	String manyear= req.getParameter("manyear");
	String min1= req.getParameter("min1");
	String min2= req.getParameter("min2");
	String rtype= req.getParameter("rtype");
	String trueflow= req.getParameter("trueflow");
	String hport= req.getParameter("hport");
	String mdevice= req.getParameter("mdevice");
	String targetas= req.getParameter("targetas");
				if ((callslip.length()<=3))
				{
					out.println("You must click the back key and fill in the callslip number<br>.");
					out.println("The data can not be saved without it.<br><br>If you do not have this information please call the office.<br>");
				} else 
		{
		int followup=0;
		if (tfollowup != null) {
       		followup = 1;
		} else {
		followup =0;
		}

		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
			

                UniCallslip.AddItem(con, custnum, callslip, doFormatDateDb(getDateDb(cdate)), equip1, equip2,equip3, equip4, reason, services, recommendations, rscheduled, charges, collected, notes, followup, CustNum, SiteNum, crectype, username,parts);
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=2&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
		}
            }



private void doUpdateInspection(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

	String icrecnum = req.getParameter("icrecnum");
        int crecnum = Integer.parseInt(icrecnum);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
	String callslip = req.getParameter("callslip");
        String idate = req.getParameter("idate");
        String tequip1 = req.getParameter("equip1");
        String tequip2 = req.getParameter("equip2");
        String tequip3 = req.getParameter("equip3");
	String expansion= req.getParameter("expansion");
	String ahage= req.getParameter("ahage");
	String conage= req.getParameter("conage");
        String tequip4 = req.getParameter("equip4");
        int equip1 = Integer.parseInt(tequip1);
        int equip2 = Integer.parseInt(tequip2);
        int equip3 = Integer.parseInt(tequip3);
        int equip4 = Integer.parseInt(tequip4);
        String mbearing = req.getParameter("mbearing");
        String mblades = req.getParameter("mblades");
        String ecoil = req.getParameter("ecoil");
        String dline = req.getParameter("dline");
        String dpan = req.getParameter("dpan");
        String ielect = req.getParameter("ielect");
        String mcap = req.getParameter("mcap");
        String hstrips = req.getParameter("hstrips");
        String gpreassures = req.getParameter("gpreassures");
        String ignition = req.getParameter("ignition");
        String burners = req.getParameter("burners");
        String limits = req.getParameter("limits");
        String flame = req.getParameter("flame");
        String dinducer = req.getParameter("dinducer");
        String humidifier = req.getParameter("humidifier");
        String atemp = req.getParameter("atemp");
        String tempsplit = req.getParameter("tempsplit");
        String crlaa = req.getParameter("crlaa");
        String crlar = req.getParameter("crlar");
        String ccapr = req.getParameter("ccapr");
        String ccapa = req.getParameter("ccapa");
        String frlaa = req.getParameter("frlaa");
        String frlar = req.getParameter("frlar");
        String fcapr = req.getParameter("fcapr");
	String fcapa = req.getParameter("fcapa");
        String fbearing = req.getParameter("fbearing");
        String coilcond = req.getParameter("coilcond");
        String cleancoil = req.getParameter("cleancoil");
        String contactor = req.getParameter("contactor");
        String scap = req.getParameter("scap");
        String ctimedelay = req.getParameter("ctimedelay");
        String oelectrical = req.getParameter("oelectrical");
        String comppad = req.getParameter("comppad");
        String recommendations = req.getParameter("recommendations");
        String services = req.getParameter("services");
        String dueamount = req.getParameter("dueamount");
        String paidamount = req.getParameter("paidamount");
        String lpres = req.getParameter("lpres");
        String hpres = req.getParameter("hpres");
        String startco = req.getParameter("startco");
        String runco =req.getParameter("runco");
        String stacktemp = req.getParameter("stacktemp");
        String ventpipe = req.getParameter("ventpipe");
        String oleaks = req.getParameter("oleaks");
        String ochimney = req.getParameter("ochimney");
        String opump = req.getParameter("opump");
        String ocontrols = req.getParameter("ocontrols");
        String otstat = req.getParameter("otstat");
        String oprimesafety = req.getParameter("oprimesafety");
        String osafetime = req.getParameter("osafetime");
        String oigntrans = req.getParameter("oigntrans");
        String olubemotors = req.getParameter("olubemotors");
        String ofulemix = req.getParameter("ofulemix");
        String onozzle = req.getParameter("onozzle");
        String ogross = req.getParameter("ogross");
        String onet = req.getParameter("onet");
        String osmoke = req.getParameter("osmoke");
        String oco2 = req.getParameter("oco2");
        String oo2 = req.getParameter("oo2");
        String oco = req.getParameter("oco");
        String oexcessair = req.getParameter("oexcessair");
        String obreachdraft = req.getParameter("obreachdraft");
        String ofiredraft = req.getParameter("ofiredraft");
        String oeffic = req.getParameter("oeffic");
        String orating = req.getParameter("orating");
        String opower = req.getParameter("opower");
        String otank = req.getParameter("otank");
        String otcond = req.getParameter("otcond");
        String odheat = req.getParameter("odheat");
        String ocombustion = req.getParameter("ocombustion");
        String oelectrodes = req.getParameter("oelectrodes");
        String obrush = req.getParameter("obrush");
        String ofilters = req.getParameter("ofilters");
        String notes = req.getParameter("notes");
        String filter = req.getParameter("filter");
        String tfollowup = req.getParameter("followup");
	String airflow=req.getParameter("airflow");
	String spres_rated=req.getParameter("spres_rated");
	String spres_return=req.getParameter("spres_return");
	String spres_supply=req.getParameter("spres_supply");
        //int followup = Integer.parseInt(tfollowup);	
	int followup=0;
	String g_filter =req.getParameter("g_filter");
	String g_electrical =req.getParameter("g_electrical");
	String g_looppres =req.getParameter("g_looppres");
	String g_cleancoil =req.getParameter("g_cleancoil");
	String g_cleandrain =req.getParameter("g_cleandrain");
	String g_pansensor =req.getParameter("g_pansensor");
	String g_cleancomp =req.getParameter("g_cleancomp");
	String g_cleanunit =req.getParameter("g_cleanunit");
	String g_oilblower =req.getParameter("g_oilblower");
	String g_cleanpump =req.getParameter("g_cleanpump");
	String g_tsplit =req.getParameter("g_tsplit");
	String g_pampr =req.getParameter("g_pampr");
	String g_pampa =req.getParameter("g_pampa");
	String g_compar =req.getParameter("g_compar");
	String g_compaa =req.getParameter("g_compaa");
	String g_bampr =req.getParameter("g_bampr");
	String g_bampa =req.getParameter("g_bampa");
	String g_pdrop =req.getParameter("g_pdrop");
	String sductsize =req.getParameter("sductsize");
	String rductsize =req.getParameter("rductsize");
	String liqtemp =req.getParameter("liqtemp");
	String sucttemp =req.getParameter("sucttemp");
	String r_temp =req.getParameter("r_temp");
	String rw_temp =req.getParameter("rw_temp");
	String s_temp =req.getParameter("s_temp");
	String mcfm=req.getParameter("mcfm");
	String out_temp=req.getParameter("out_temp");
	String action=req.getParameter("action");
	String parts=req.getParameter("parts");
			String im_cleanbin=req.getParameter("im_cleanbin");
		String im_limeaway=req.getParameter("im_limeaway");
		String im_bleach=req.getParameter("im_bleach");
		String im_watercomp=req.getParameter("im_watercomp");
		String im_icecomp=req.getParameter("im_icecomp");
		String im_filter=req.getParameter("im_filter");
		String im_float=req.getParameter("im_float");
		String im_wpump=req.getParameter("im_wpump");
		String im_binsensor=req.getParameter("im_binsensor");
		String im_testdump=req.getParameter("im_testdump");
		String im_electrical=req.getParameter("im_electrical");
		String im_comprated=req.getParameter("im_comprated");
		String im_compactual=req.getParameter("im_compactual");
		String ref_condcoilcond=req.getParameter("ref_condcoilcond");
		String ref_condcoilcleaned=req.getParameter("ref_condcoilcleaned");
		String ref_evapcoilcond=req.getParameter("ref_evapcoilcond");
		String ref_evapcoilcleaned=req.getParameter("ref_evapcoilcleaned");
		String ref_fanbladecond=req.getParameter("ref_fanbladecond");
		String ref_fanbladecleaned=req.getParameter("ref_fanbladecleaned");
		String ref_condensateline=req.getParameter("ref_condensateline");
		String ref_condfan=req.getParameter("ref_condfan");
		String ref_doorgasket=req.getParameter("ref_doorgasket");
		String ref_doorsclose=req.getParameter("ref_doorsclose");
		String ref_productboxcond=req.getParameter("ref_productboxcond");
		String ref_checkscrews=req.getParameter("ref_checkscrews");
		String ref_evaptempin=req.getParameter("ref_evaptempin");
		String ref_evaptempout=req.getParameter("ref_evaptempout");
		String ref_boxtemp=req.getParameter("ref_boxtemp");
		String ref_sightglasslevel=req.getParameter("ref_sightglasslevel");
		String ref_refrigerant=req.getParameter("ref_refrigerant");
		String ref_defrostclock=req.getParameter("ref_defrostclock");
		String ref_defrosttimes=req.getParameter("ref_defrosttimes");
		String ref_doorheater=req.getParameter("ref_doorheater");
		String ref_electrical=req.getParameter("ref_electrical");
		String ref_compamprated=req.getParameter("ref_compamprated");
		String ref_compampactual=req.getParameter("ref_compampactual");
	
	int servsync=0;
		if (tfollowup != null) {
       		followup = 1;
		} else {
		followup =0;
			}

		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
			
               UniInspection.UpdateItem(con, crecnum, custnum, callslip, doFormatDateDb(getDateDb(idate)), equip1, equip2,equip3,equip4, mbearing, mblades, ecoil, dline, dpan, ielect, mcap, hstrips, filter, gpreassures, ignition, burners, limits, flame, dinducer,humidifier, atemp, tempsplit, crlaa, crlar, ccapr, ccapa, frlaa,frlar, fcapr, fcapa, fbearing, coilcond, cleancoil, contactor,scap, ctimedelay, oelectrical, comppad, recommendations, services, dueamount, paidamount, notes,lpres, hpres, startco, runco, stacktemp, ventpipe, oleaks, ochimney, opump, ocontrols, otstat, oprimesafety, osafetime, oigntrans, olubemotors, ofulemix, onozzle, ogross, osmoke, onet, oco2, oo2, oco, oexcessair, obreachdraft, ofiredraft, oeffic,orating, opower,otank,otcond, odheat, ocombustion, oelectrodes, obrush, ofilters, followup, airflow, spres_rated, spres_return, spres_supply, g_filter, g_electrical, g_looppres, g_cleancoil, g_cleandrain, g_pansensor, g_cleancomp, g_cleanunit, g_oilblower, g_cleanpump, g_tsplit, g_pampr, g_pampa, g_compar, g_compaa, g_bampr, g_bampa, g_pdrop, sductsize, rductsize, liqtemp, sucttemp, r_temp, s_temp, rw_temp, mcfm, out_temp , CustNum, SiteNum, expansion, ahage, conage, username, servsync, parts, im_cleanbin, im_limeaway, im_bleach, im_watercomp, im_icecomp, im_filter, im_float, im_wpump, im_binsensor, im_testdump, im_electrical, im_comprated, im_compactual, ref_condcoilcond, ref_condcoilcleaned, ref_evapcoilcond, ref_evapcoilcleaned, ref_fanbladecond, ref_fanbladecleaned, ref_condensateline, ref_condfan, ref_doorgasket, ref_doorsclose, ref_productboxcond, ref_checkscrews, ref_evaptempin, ref_evaptempout, ref_boxtemp, ref_sightglasslevel, ref_refrigerant, ref_defrostclock, ref_defrosttimes, ref_doorheater, ref_electrical, ref_compamprated, ref_compampactual);
                out.println("Your item has been updated in the database<br>");
		con.close();
			if (action.equalsIgnoreCase("updateinspection"))
	                        {
                			res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=3&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
				} 
			 else if (action.equalsIgnoreCase("rcupdateinspection"))
	                        {
                			res.sendRedirect(""+classdir+"UniCash?action=callreport");
				} 
				else 
				{
                			res.sendRedirect(""+classdir+"UniCash?action=followupreport");
				}
}

private void doSaveInspection(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
	String callslip = req.getParameter("callslip");
        String idate = req.getParameter("idate");
        String tequip1 = req.getParameter("equip1");
        String tequip2 = req.getParameter("equip2");
        String tequip3 = req.getParameter("equip3");
        String tequip4 = req.getParameter("equip4");
        int equip1 = Integer.parseInt(tequip1);
        int equip2 = Integer.parseInt(tequip2);
        int equip3 = Integer.parseInt(tequip3);
        int equip4 = Integer.parseInt(tequip4);
        String mbearing = req.getParameter("mbearing");
        String mblades = req.getParameter("mblades");
        String ecoil = req.getParameter("ecoil");
        String dline = req.getParameter("dline");
        String dpan = req.getParameter("dpan");
        String ielect = req.getParameter("ielect");
        String mcap = req.getParameter("mcap");
        String hstrips = req.getParameter("hstrips");
        String gpreassures = req.getParameter("gpreassures");
        String ignition = req.getParameter("ignition");
        String burners = req.getParameter("burners");
        String limits = req.getParameter("limits");
        String flame = req.getParameter("flame");
        String dinducer = req.getParameter("dinducer");
        String humidifier = req.getParameter("humidifier");
        String atemp = req.getParameter("atemp");
        String tempsplit = req.getParameter("tempsplit");
        String crlaa = req.getParameter("crlaa");
        String crlar = req.getParameter("crlar");
        String ccapr = req.getParameter("ccapr");
        String ccapa = req.getParameter("ccapa");
        String frlaa = req.getParameter("frlaa");
        String frlar = req.getParameter("frlar");
        String fcapr = req.getParameter("fcapr");
	String fcapa = req.getParameter("fcapa");
        String fbearing = req.getParameter("fbearing");
        String coilcond = req.getParameter("coilcond");
        String cleancoil = req.getParameter("cleancoil");
        String contactor = req.getParameter("contactor");
        String scap = req.getParameter("scap");
        String ctimedelay = req.getParameter("ctimedelay");
        String oelectrical = req.getParameter("oelectrical");
        String comppad = req.getParameter("comppad");
        String recommendations = req.getParameter("recommendations");
        String services = req.getParameter("services");
        String dueamount = req.getParameter("dueamount");
        String paidamount = req.getParameter("paidamount");
        String lpres = req.getParameter("lpres");
        String hpres = req.getParameter("hpres");
        String startco = req.getParameter("startco");
        String runco =req.getParameter("runco");
        String stacktemp = req.getParameter("stacktemp");
        String ventpipe = req.getParameter("ventpipe");
        String oleaks = req.getParameter("oleaks");
        String ochimney = req.getParameter("ochimney");
        String opump = req.getParameter("opump");
        String ocontrols = req.getParameter("ocontrols");
        String otstat = req.getParameter("otstat");
        String oprimesafety = req.getParameter("oprimesafety");
        String osafetime = req.getParameter("osafetime");
        String oigntrans = req.getParameter("oigntrans");
        String olubemotors = req.getParameter("olubemotors");
        String ofulemix = req.getParameter("ofulemix");
        String onozzle = req.getParameter("onozzle");
        String ogross = req.getParameter("ogross");
        String onet = req.getParameter("onet");
        String osmoke = req.getParameter("osmoke");
        String oco2 = req.getParameter("oco2");
        String oo2 = req.getParameter("oo2");
        String oco = req.getParameter("oco");
        String oexcessair = req.getParameter("oexcessair");
        String obreachdraft = req.getParameter("obreachdraft");
        String ofiredraft = req.getParameter("ofiredraft");
        String oeffic = req.getParameter("oeffic");
        String orating = req.getParameter("orating");
        String opower = req.getParameter("opower");
        String otank = req.getParameter("otank");
        String otcond = req.getParameter("otcond");
        String odheat = req.getParameter("odheat");
        String ocombustion = req.getParameter("ocombustion");
        String oelectrodes = req.getParameter("oelectrodes");
        String obrush = req.getParameter("obrush");
        String ofilters = req.getParameter("ofilters");
        String notes = req.getParameter("notes");
        String filter = req.getParameter("filter");
        String tfollowup = req.getParameter("followup");
	String airflow=req.getParameter("airflow");
	String spres_rated=req.getParameter("spres_rated");
	String spres_return=req.getParameter("spres_return");
	String spres_supply=req.getParameter("spres_supply");
        //int followup = Integer.parseInt(tfollowup);	
	int followup=0;
	if (tfollowup != null) {
       	followup = 1;
	} else {
	followup =0;
	}
	String g_filter =req.getParameter("g_filter");
	String g_electrical =req.getParameter("g_electrical");
	String g_looppres =req.getParameter("g_looppres");
	String g_cleancoil =req.getParameter("g_cleancoil");
	String g_cleandrain =req.getParameter("g_cleandrain");
	String g_pansensor =req.getParameter("g_pansensor");
	String g_cleancomp =req.getParameter("g_cleancomp");
	String g_cleanunit =req.getParameter("g_cleanunit");
	String g_oilblower =req.getParameter("g_oilblower");
	String g_cleanpump =req.getParameter("g_cleanpump");
	String g_tsplit =req.getParameter("g_tsplit");
	String g_pampr =req.getParameter("g_pampr");
	String g_pampa =req.getParameter("g_pampa");
	String g_compar =req.getParameter("g_compar");
	String g_compaa =req.getParameter("g_compaa");
	String g_bampr =req.getParameter("g_bampr");
	String g_bampa =req.getParameter("g_bampa");
	String g_pdrop =req.getParameter("g_pdrop");
	String sductsize =req.getParameter("sductsize");
	String rductsize =req.getParameter("rductsize");
	String liqtemp =req.getParameter("liqtemp");
	String sucttemp =req.getParameter("sucttemp");
	String r_temp =req.getParameter("r_temp");
	String rw_temp =req.getParameter("rw_temp");
	String s_temp =req.getParameter("s_temp");
	String mcfm=req.getParameter("mcfm");
	String out_temp=req.getParameter("out_temp");
	String expansion=req.getParameter("expansion");
	String ahage=req.getParameter("ahage");
	String conage=req.getParameter("conage");
	String parts=req.getParameter("parts");
	
		String im_cleanbin=req.getParameter("im_cleanbin");
		String im_limeaway=req.getParameter("im_limeaway");
		String im_bleach=req.getParameter("im_bleach");
		String im_watercomp=req.getParameter("im_watercomp");
		String im_icecomp=req.getParameter("im_icecomp");
		String im_filter=req.getParameter("im_filter");
		String im_float=req.getParameter("im_float");
		String im_wpump=req.getParameter("im_wpump");
		String im_binsensor=req.getParameter("im_binsensor");
		String im_testdump=req.getParameter("im_testdump");
		String im_electrical=req.getParameter("im_electrical");
		String im_comprated=req.getParameter("im_comprated");
		String im_compactual=req.getParameter("im_compactual");
		String ref_condcoilcond=req.getParameter("ref_condcoilcond");
		String ref_condcoilcleaned=req.getParameter("ref_condcoilcleaned");
		String ref_evapcoilcond=req.getParameter("ref_evapcoilcond");
		String ref_evapcoilcleaned=req.getParameter("ref_evapcoilcleaned");
		String ref_fanbladecond=req.getParameter("ref_fanbladecond");
		String ref_fanbladecleaned=req.getParameter("ref_fanbladecleaned");
		String ref_condensateline=req.getParameter("ref_condensateline");
		String ref_condfan=req.getParameter("ref_condfan");
		String ref_doorgasket=req.getParameter("ref_doorgasket");
		String ref_doorsclose=req.getParameter("ref_doorsclose");
		String ref_productboxcond=req.getParameter("ref_productboxcond");
		String ref_checkscrews=req.getParameter("ref_checkscrews");
		String ref_evaptempin=req.getParameter("ref_evaptempin");
		String ref_evaptempout=req.getParameter("ref_evaptempout");
		String ref_boxtemp=req.getParameter("ref_boxtemp");
		String ref_sightglasslevel=req.getParameter("ref_sightglasslevel");
		String ref_refrigerant=req.getParameter("ref_refrigerant");
		String ref_defrostclock=req.getParameter("ref_defrostclock");
		String ref_defrosttimes=req.getParameter("ref_defrosttimes");
		String ref_doorheater=req.getParameter("ref_doorheater");
		String ref_electrical=req.getParameter("ref_electrical");
		String ref_compamprated=req.getParameter("ref_compamprated");
		String ref_compampactual=req.getParameter("ref_compampactual");
	
	int servsync=0;

		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
			
				if ((callslip.length()<=3))
				{
					out.println("You must click the back key and fill in the callslip number<br>.");
					out.println("The data can not be saved without it.<br><br>If you do not have this information please call the office.<br>");
				} else 
		{

               UniInspection.AddItem(con, custnum, callslip, doFormatDateDb(getDateDb(idate)), equip1, equip2, equip3, equip4, mbearing, mblades, ecoil, dline, dpan, ielect, mcap, hstrips, filter, gpreassures, ignition, burners, limits, flame, dinducer,humidifier, atemp, tempsplit, crlaa, crlar, ccapr, ccapa, frlaa,frlar, fcapr, fcapa, fbearing, coilcond, cleancoil, contactor,scap, ctimedelay, oelectrical, comppad, recommendations, services, dueamount, paidamount, notes,lpres, hpres, startco, runco, stacktemp, ventpipe, oleaks, ochimney, opump, ocontrols, otstat, oprimesafety, osafetime, oigntrans, olubemotors, ofulemix, onozzle, ogross, osmoke, onet, oco2, oo2, oco, oexcessair, obreachdraft, ofiredraft, oeffic,orating, opower,otank,otcond, odheat, ocombustion, oelectrodes, obrush, ofilters, followup, airflow, spres_rated, spres_supply, spres_return, g_filter, g_electrical, g_looppres, g_cleancoil, g_cleandrain, g_pansensor, g_cleancomp, g_cleanunit, g_oilblower, g_cleanpump, g_tsplit, g_pampr, g_pampa, g_compar, g_compaa, g_bampr, g_bampa, g_pdrop, sductsize, rductsize, sucttemp, liqtemp, r_temp, s_temp, rw_temp, mcfm, out_temp, CustNum, SiteNum , expansion, ahage, conage, username, servsync, parts, im_cleanbin, im_limeaway, im_bleach, im_watercomp, im_icecomp, im_filter, im_float, im_wpump, im_binsensor, im_testdump, im_electrical, im_comprated, im_compactual, ref_condcoilcond, ref_condcoilcleaned, ref_evapcoilcond, ref_evapcoilcleaned, ref_fanbladecond, ref_fanbladecleaned, ref_condensateline, ref_condfan, ref_doorgasket, ref_doorsclose, ref_productboxcond, ref_checkscrews, ref_evaptempin, ref_evaptempout, ref_boxtemp, ref_sightglasslevel, ref_refrigerant, ref_defrostclock, ref_defrosttimes, ref_doorheater, ref_electrical, ref_compamprated, ref_compampactual);
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=3&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
		}
            }
	
private void doEditCompPhoneItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String trecnum = req.getParameter("recnum");
	String ename=null;
	String homenumber=null;
	String cellnumber=null;
	String addnumber=null;
	String trucknumber=null;
	String dirconnect=null;
	int counter=0;
        int recnum = Integer.parseInt(trecnum);
                Vector vv;
                vv = UniPhoneList.getIndividualItems(con,recnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniPhoneList tt = (UniPhoneList) vv.elementAt(i);
		ename=tt.getName();
		homenumber=tt.getHomeNumber();
		cellnumber=tt.getCellNumber();
		dirconnect=tt.getDirectConnect();
		trucknumber=tt.getTruckNumber();
		addnumber=tt.getAdditionalNumber();
	}
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Company Phone Record</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatecompphonerec\" name=\"addcat\">");
	out.println("<p>Name        :");
	out.println("<input type=\"text\" name=\"name\" value=\""+ename+"\">");
	out.println("</p>");
	out.println("<p>Home Number :");
	out.println("<input type=\"text\" name=\"homenum\" value=\""+homenumber+"\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Cell Number :");
	out.println("<input type=\"text\" name=\"cellnum\"  value=\""+cellnumber+"\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Direct Connect  :");
	out.println("<input type=\"text\" name=\"dirconnect\" value=\""+dirconnect+"\"  size=\"40\">");
	out.println("</p>");
	out.println("<p>Truck Number  :");
	out.println("<input type=\"text\" name=\"trucknum\" value=\""+trucknumber+"\"  size=\"40\">");
	out.println("</p>");
	out.println("<p>Additional Number :");
	out.println("<input type=\"text\" name=\"addnum\" value=\""+addnumber+"\"  size=\"40\">");
	out.println("</p>");
	out.println("<p> <CENTER>");
	out.println("<input type=\"text\" name=\"recnum\" value=\""+recnum+"\"  size=\"40\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}
	
		
private void doUpdateCompPhoneListRec(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String trecnum  = req.getParameter("recnum");
		int recnum = Integer.parseInt(trecnum);
		String ename  = req.getParameter("name");
		String homenum = req.getParameter("homenum");
		String cellnum = req.getParameter("cellnum");
		String dirconnect = req.getParameter("dirconnect");
		String trucknum = req.getParameter("trucknum");
		String addnum = req.getParameter("addnum");
		Format formatter;	
		Calendar now = Calendar.getInstance();
		Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");
		String s = formatter.format(date);		
		
                UniPhoneList.UpdateItem(con, recnum, ename, homenum, cellnum, dirconnect, trucknum, addnum, s);
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=listphonelist");
            }

		
private void doSaveCompPhoneListRec(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String ename  = req.getParameter("name");
		String homenum = req.getParameter("homenum");
		String cellnum = req.getParameter("cellnum");
		String dirconnect = req.getParameter("dirconnect");
		String trucknum = req.getParameter("trucknum");
		String addnum = req.getParameter("addnum");
		Format formatter;	
		Calendar now = Calendar.getInstance();
		Date date = new Date(); 
		formatter = new SimpleDateFormat("yyyy-MM-dd");
		String s = formatter.format(date);		
		
                UniPhoneList.AddItem(con, ename, homenum, cellnum, dirconnect, trucknum, addnum, s);
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=listphonelist");
            }

private void doAddCompPhoneRec(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Company Phone Record</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savecompphonerec\" name=\"addcat\">");
	out.println("<p>Name        :");
	out.println("<input type=\"text\" name=\"name\">");
	out.println("</p>");
	out.println("<p>Home Number :");
	out.println("<input type=\"text\" name=\"homenum\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Cell Number :");
	out.println("<input type=\"text\" name=\"cellnum\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Direct Connect  :");
	out.println("<input type=\"text\" name=\"dirconnect\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Truck Number  :");
	out.println("<input type=\"text\" name=\"trucknum\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Additional Number :");
	out.println("<input type=\"text\" name=\"addnum\" size=\"40\">");
	out.println("</p>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

private void doAddEquip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Equipment</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveequipment&custnum="+custnum+"\" name=\"addcat\">");
	out.println("<p>Brand        :");
	out.println("<input type=\"text\" name=\"brand\">");
	out.println("</p>");
	out.println("<p>Model Number :");
	out.println("<input type=\"text\" name=\"modelnum\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Serial Number :");
	out.println("<input type=\"text\" name=\"serialnum\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Filter Size  :");
	out.println("<input type=\"text\" name=\"filter\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Equipment Type  :");
	out.println("<input type=\"text\" name=\"etype\" size=\"40\">");
	out.println("</p>");
	out.println("<p>SEER  :");
	out.println("<input type=\"text\" name=\"cseer\" size=\"40\">");
	out.println("</p>");
	out.println("<p>BTU Output  :");
	out.println("<input type=\"text\" name=\"btuout\" size=\"40\">");
	out.println("</p>");
	out.println("<p>Notes        :");
	out.println("<input type=\"text\" name=\"notes\" size=\"40\">");
	out.println("</p>");
	out.println("<p> <CENTER>");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\" >");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}
		
private void doEditCustomer(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String tcustnum = req.getParameter("custnum");
	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
	String reqsource = req.getParameter("reqsource");
        int custnum = Integer.parseInt(tcustnum);
	String cname=null;
	String address1=null;
	String address2=null;
	String city =null;
	String state=null;
	String zip=null;
	String custsite=null;
	String sitenum=null;
	String homephone=null;
	String altphone=null;
	String cust_notes=null;
	String cemail=null;
	String custtype=null;
		
 	Statement stmt = con.createStatement();
	ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");

		 while(rs.next())
                {
	cname=rs.getString("cname");
	address1=rs.getString("address1");
	address2=rs.getString("address2");
	city =rs.getString("city");
	state=rs.getString("state");
	zip=rs.getString("zip");
	homephone=rs.getString("homephone");
	altphone=rs.getString("altphone");
	cust_notes=rs.getString("cust_notes");
	cemail=rs.getString("cemail");
	custsite=rs.getString("custsite");
	sitenum=rs.getString("sitenum");
	custtype=rs.getString("custtype");
		
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Customer</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatecustomerentry&custnum="+custnum+"&reqsource="+reqsource+"\" name=\"addcust\">");
	out.println("<table><tr><td>");
	out.println("Customer Name        :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"cname\" size=\"40\" value=\""+ cname+"\">");
	out.println("</td></tr><tr><td>");
	out.println("Address  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"address1\" size=\"40\" value=\""+address1 +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Address  :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"address2\" size=\"40\" value=\""+address2 +"\">");
	out.println("</td></tr><tr><td>");
	out.println("City     :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"city\" size=\"40\" value=\""+city +"\">");
	out.println("</td></tr><tr><td>");
	out.println("State    :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"state\" size=\"3\" value=\""+state +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Zip Code :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"zip\" size=\"10\" value=\""+zip +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Home Phone:");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"homephone\" size=\"15\" value=\""+homephone +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Alt Phone :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"altphone\" size=\"15\" value=\""+altphone +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Customer Email :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"cemail\" size=\"15\" value=\""+cemail +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Customer Number :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"custsite\" size=\"15\" value=\""+custsite +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Site Number :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"sitenum\" size=\"15\" value=\""+sitenum +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Customer Type (T=T/M, F=Full) :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"custtype\" size=\"15\" value=\""+custtype +"\">");
	out.println("</td></tr><tr><td>");
	out.println("Customer Notes :");
	out.println("</td><td>");
	out.println("<input type=\"text\" name=\"cust_notes\" size=\"80\" value=\""+cust_notes +"\">");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart +"\">");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop +"\">");
	out.println("</td></tr></table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");

	}
		con.close();
	}


private void doUpdateCustomerEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
                String cname = req.getParameter("cname");
                String address1  = req.getParameter("address1");
		String reqsource = req.getParameter("reqsource");
		String custtype= req.getParameter("custtype");
		if (reqsource==null)
				{
				reqsource="UniCash";
				}
                String address2 = req.getParameter("address2");
                String city = req.getParameter("city");
                String state = req.getParameter("state");
                String zip = req.getParameter("zip");
                String homephone = req.getParameter("homephone");
                String altphone = req.getParameter("altphone");
                String cust_notes = req.getParameter("cust_notes");
                String cemail = req.getParameter("cemail");
                String custsite = req.getParameter("custsite");
                String sitenum = req.getParameter("sitenum");
		
                UniCustomer.UpdateItem(con, custnum, cname,address1, address2, city, state, zip, homephone, altphone, cust_notes, cemail, custsite, sitenum, custtype);
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+""+reqsource+"?action=showcustdetail&csection=1&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }

private void doUpdateEquipmentEntry(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
		String tenum = req.getParameter("eenum");
       		 int eenum = Integer.parseInt(tenum);
                String brand = req.getParameter("brand");
                String modelnum  = req.getParameter("modelnum");
                String serialnum = req.getParameter("serialnum");
                String filter = req.getParameter("filter");
                String notes = req.getParameter("notes");
                String etype = req.getParameter("etype");
                String cseer = req.getParameter("cseer");
                String btuout = req.getParameter("btuout");

		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
			
		
                UniEquip.UpdateItem(con, eenum, custnum, brand, modelnum, serialnum, filter, notes, etype, cseer, btuout, CustNum, SiteNum, 0 );
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=1&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }

private void doDeleteEquip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
		String tenum = req.getParameter("eenum");
       		 int eenum = Integer.parseInt(tenum);
                UniEquip.deleteItem(con, tenum);
                out.println("Your item has been deleted from the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=1&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }


private void doDeleteInspection(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
		String tenum = req.getParameter("crecnum");
       		 int eenum = Integer.parseInt(tenum);
                UniInspection.deleteItem(con, tenum);
                out.println("Your item has been deleted from the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=3&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }


private void doOptionDown(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String quotenum = req.getParameter("quotenum");
		String tprintorder = req.getParameter("printorder");
       		 int printorder = Integer.parseInt(tprintorder);
       		 int custnum = Integer.parseInt(tcustnum);
		String toquotenum = req.getParameter("oquotenum");
       		 int iquotenum = Integer.parseInt(quotenum);
       		 int oquotenum = Integer.parseInt(toquotenum);
		printorder=printorder+1;
                UniQuoteOptions.UpdatePrintOrder(con, iquotenum, oquotenum, printorder);
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=editproposal&custnum="+custnum+"&quotenum="+quotenum+"");
            }

private void doOptionUp(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String quotenum = req.getParameter("quotenum");
		String tprintorder = req.getParameter("printorder");
       		 int printorder = Integer.parseInt(tprintorder);
       		 int custnum = Integer.parseInt(tcustnum);
		String toquotenum = req.getParameter("oquotenum");
       		 int iquotenum = Integer.parseInt(quotenum);
       		 int oquotenum = Integer.parseInt(toquotenum);
		printorder=printorder-1;
		if (printorder>=1) {
                UniQuoteOptions.UpdatePrintOrder(con, iquotenum, oquotenum, printorder);
				}
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=editproposal&custnum="+custnum+"&quotenum="+quotenum+"");
            }

private void doDeleteQuoteOption(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String quotenum = req.getParameter("quotenum");
       		 int custnum = Integer.parseInt(tcustnum);
		String toquotenum = req.getParameter("oquotenum");
       		 int oquotenum = Integer.parseInt(toquotenum);
                UniQuoteOptions.deleteItem(con, toquotenum);
                out.println("Your item has been deleted from the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=editproposal&custnum="+custnum+"&quotenum="+quotenum+"");
            }


private void doDeleteUserRecY(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tsid = req.getParameter("tsid");
		String adminok = req.getParameter("adminok");
		UniTechInfo.deleteItem(con, tsid);
		con.close();
                out.println("<a href="+classdir+"UniCash?action=listtechinfo&adminok="+adminok+">Click here to continue</a>");
            }

private void doDeleteUserRec(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tsid = req.getParameter("tsid");
		String adminok = req.getParameter("adminok");
		con.close();
                out.println("<a href="+classdir+"UniCash?action=deluserrecy&tsid="+tsid+"&adminok="+adminok+">Click here to continue deleting this user</a>");
            }

private void doDeletePropRec(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("propnum");
		String action = req.getParameter("action");
       		 int wsnum = Integer.parseInt(twsrec);

		con.close();
		if (action.equalsIgnoreCase("delproprec"))
		{
                out.println("<a href="+classdir+"UniCash?action=delproprecy&custnum="+custnum+"&propnum="+twsrec+">Click here to continue deleting this proposal</a>");
		}
		if (action.equalsIgnoreCase("delservproprec"))
		{
                out.println("<a href="+classdir+"UniCash?action=delservproprecy&custnum="+custnum+"&propnum="+twsrec+">Click here to continue deleting this proposal</a>");
		}
            }

private void doDeletePropRecY(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("propnum");
		String action = req.getParameter("action");
       		 int wsnum = Integer.parseInt(twsrec);

		if (action.equalsIgnoreCase("delproprecy"))
		{
                UniQuotes.deleteItem(con, twsrec);
		}
		if (action.equalsIgnoreCase("delservproprecy"))
		{
                ServQuotes.deleteItem(con, twsrec);
		}
                out.println("Your item has been deleted from the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=5&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }

private void doDeleteWsRec(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("wsnum");
       		 int wsnum = Integer.parseInt(twsrec);
                out.println("<a href="+classdir+"UniCash?action=delwsrecy&custnum="+custnum+"&wsnum="+wsnum+">Click here to continue deleting this worksheet</a>");
		con.close();
            }


private void doDeleteMasterWsRec(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String custstart = req.getParameter("servicestart");
		String custstop = req.getParameter("serviceend");
		String twsrec = req.getParameter("wsnum");
       		 int wsnum = Integer.parseInt(twsrec);
                out.println("<a href="+classdir+"UniCash?action=delmasterwsrecy&wsnum="+wsnum+"&servicestart="+custstart+"&serviceend="+custstop+">Click here to continue deleting this worksheet</a>");
		con.close();
            }

private void doDeleteMasterWsRecY(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		Connection con2 = null;
		String dbserver=doGetMainServer();
		String dbpasswd=doGetMainPassword();
		String dbuser=doMainDbUser();
		String dbname=doMainDbName();
		String protocol = (String) config.getInitParameter("db.protocol");
		String subProtocol = (String) config.getInitParameter("db.subprotocol");
		con2 = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
		String custstart = req.getParameter("servicestart");
		String custstop = req.getParameter("serviceend");
		String twsrec = req.getParameter("wsnum");
       		 int wsnum = Integer.parseInt(twsrec);
                UniMasterWorksheet.deleteItem(con2, twsrec);
                out.println("Your item has been deleted from the database<br>");
		String thismainserver=doGetThisMainServer();
		if (!thismainserver.equalsIgnoreCase("yes")) {
                res.sendRedirect(""+classdir+"UniCash?action=updatemasterworksheet");
		}
		con.close();
		con2.close();
            }

private void doDelHeatLoad(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
       		 int custnum = Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("recnum");
       		 int wsnum = Integer.parseInt(twsrec);
                HeatLoad.deleteItem(con, twsrec);
                out.println("Your item has been deleted from the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=7&custnum="+custnum+"");
            }

	    
private void doDelPackageCompare(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
       		 int custnum = Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("recnum");
       		 int wsnum = Integer.parseInt(twsrec);
                PackCompare.deleteItem(con, twsrec);
                out.println("Your item has been deleted from the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+custnum+"");
            }

private void doDeleteWsRecY(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
		String twsrec = req.getParameter("wsnum");
       		 int wsnum = Integer.parseInt(twsrec);
                UniWorksheet.deleteItem(con, twsrec);
                out.println("Your item has been deleted from the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }


private void doDeleteCompPhoneRec(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String twsrec = req.getParameter("recordnumber");
       		 int recnum = Integer.parseInt(twsrec);
                UniPhoneList.deleteItem(con, recnum);
                out.println("Your item has been deleted from the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=listphonelist");
            }

private void doDeleteCallslip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
		String tenum = req.getParameter("crecnum");
       		 int eenum = Integer.parseInt(tenum);
                UniCallslip.deleteItem(con, tenum);
                out.println("Your item has been deleted from the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=2&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }

		
private void doSavePackageCompare(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String action=req.getParameter("action");
		String tcustnum = req.getParameter("custnum");
       		 int custnum = Integer.parseInt(tcustnum);
		 String propnum=req.getParameter("propnum");
                String description = req.getParameter("description");
                String best1 = req.getParameter("best1");
                String best2= req.getParameter("best2");
                String best3= req.getParameter("best3");
                String best4= req.getParameter("best4");
                String best5= req.getParameter("best5");
                String better1= req.getParameter("better1");
                String better2= req.getParameter("better2");
                String better3= req.getParameter("better3");
                String better4= req.getParameter("better4");
                String better5= req.getParameter("better5");
                String good1= req.getParameter("good1");
                String good2= req.getParameter("good2");
                String good3= req.getParameter("good3");
                String good4= req.getParameter("good4");
                String good5= req.getParameter("good5");
		String good6= req.getParameter("good6");
		String good7= req.getParameter("good7");
		String good8= req.getParameter("good8");
		String better6= req.getParameter("better6");
		String better7= req.getParameter("better7");
		String better8= req.getParameter("better8");
		String best6= req.getParameter("best6");
		String best7= req.getParameter("best7");
		String best8= req.getParameter("best8");
                String desc1= req.getParameter("desc1");
                String desc2= req.getParameter("desc2");
                String desc3= req.getParameter("desc3");
                String packdate= req.getParameter("packdate");

		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
		if (action.equalsIgnoreCase("savepackagecompareform")) {
                PackCompare.AddItem(con,description, best1, best2, best3, best4, best5, better1, better2, better3, better4, better5, good1, good2, good3, good4, good5, username, CustNum, SiteNum, packdate, desc1, desc2, desc3, best6, best7, best8, better6, better7, better8, good6, good7, good8 );
		} else if (action.equalsIgnoreCase("updatepackagecompareform")) {
		
		PackCompare.UpdateItem(con,propnum,description, best1, best2, best3, best4, best5, better1, better2, better3, better4, better5, good1, good2, good3, good4, good5, username, CustNum, SiteNum, packdate, desc1, desc2, desc3, best6, best7, best8, better6, better7, better8, good6, good7, good8);	
		}
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+custnum+"&custstart=A&custstop=A");
			}
		
private void doSaveHeatLoad(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String action=req.getParameter("action");
		String tcustnum = req.getParameter("custnum");
		int custnum = Integer.parseInt(tcustnum);
		
	String recnum=req.getParameter("recnum");
	String ceilingsqft=req.getParameter("ceilingsqft");
	String wallsqft=req.getParameter("wallsqft");
	String nwinsqft=req.getParameter("nwinsqft");
	String swinsqft=req.getParameter("swinsqft");
	String ewinsqft=req.getParameter("ewinsqft");
	String wwinsqft=req.getParameter("wwinsqft");
	String nsldoorsqft=req.getParameter("nsldoor");
	String ssldoorsqft=req.getParameter("ssldoor");
	String esldoorsqft=req.getParameter("esldoor");
	String wsldoorsqft=req.getParameter("wsldoor");
	String doorsqft=req.getParameter("doorsqft");
	String totglasssqft=req.getParameter("totglasssqft");
	String nframewall=req.getParameter("nframewall");
	String nmasawall=req.getParameter("nmasawall");
	String nmasbwall=req.getParameter("nmasbwall");
	String basfloorsqft=req.getParameter("basfloorsqft");
	String slabnoperim=req.getParameter("slabnoperim");
	String slabwperim=req.getParameter("slabwperim");
	String mechvent=req.getParameter("mechventcfm");
	String numpeople=req.getParameter("numpeople");
	String flooruncond=req.getParameter("flooruncond");
	String custsitenum=req.getParameter("custsitenum");
	String sitenum=req.getParameter("sitenum");
	String ceiltype=req.getParameter("ceiltype");
//	String walltype=req.getParameter("walltype");
	String walltype="-";
	String nwintype=req.getParameter("nwintype");
	String swintype=req.getParameter("swintype");
	String ewintype=req.getParameter("ewintype");
	String wwintype=req.getParameter("wwintype");
	String nsldoortype=req.getParameter("nsldoortype");
	String ssldoortype=req.getParameter("ssldoortype");
	String esldoortype=req.getParameter("esldoortype");
	String wsldoortype=req.getParameter("wsldoortype");
	String doortype=req.getParameter("doortype");
	String nframewalltype=req.getParameter("nframewalltype");
	String nmasawalltype=req.getParameter("nmasawalltype");
	String nmasbwalltype=req.getParameter("nmasbwalltype");
	String slabnoperimtype=req.getParameter("slabnoperimtype");
	String slabwperimtype=req.getParameter("slabwperimtype");
	String flooruncondtype=req.getParameter("flooruncondtype");
	String bldlength=req.getParameter("bldlength");
	String bldwidth=req.getParameter("bldwidth");
	String bldheight=req.getParameter("bldheight");
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String LoadDate = formatter.format(date);
	
		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
		if (action.equalsIgnoreCase("saveheatload")) {
		//out.println("INSERT INTO heatloads(custsitenum, sitenum, loaddate, ceilingsqft,wallsqft,nwinsqft,swinsqft,ewinsqft,wwinsqft,nsldoorsqft,ssldoorsqft,esldoorsqft,wsldoorsqft,doorsqft,totglasssqft,nframewall,nmasawall,nmasbwall,basfloorsqft,slabnoperim,slabwperim,flooruncond,mechvent,numpeople,ceiltype,walltype, nwintype,swintype,ewintype,   wwintype,nsldoortype,ssldoortype,esldoortype,wsldoortype,doortype,nframewalltype,nmasawalltype,nmasbwalltype,slabnoperimtype,slabwperimtype,flooruncondtype ) Values ( '"+CustNum+"', '"+SiteNum+"', '"+LoadDate+"','"+ceilingsqft+"', '"+wallsqft+"', '"+nwinsqft+"', '"+swinsqft+"', '"+ewinsqft+"', '"+wwinsqft+"', '"+nsldoorsqft+"', '"+ssldoorsqft+"', '"+esldoorsqft+"', '"+wsldoorsqft+"', '"+doorsqft+"', '"+totglasssqft+"', '"+nframewall+"', '"+nmasawall+"', '"+nmasbwall+"', '"+basfloorsqft+"', '"+slabnoperim+"', '"+slabwperim+"', '"+flooruncond+"', '"+mechvent+"', '"+numpeople+"', '"+ceiltype+"', '"+walltype+"', '"+ nwintype+"', '"+swintype+"', '"+ewintype+"', '"+wwintype+"', '"+nsldoortype+"', '"+ssldoortype+"', '"+esldoortype+"', '"+wsldoortype+"', '"+doortype+"', '"+nframewalltype+"', '"+nmasawalltype+"', '"+nmasbwalltype+"', '"+slabnoperimtype+"', '"+slabwperimtype+"', '"+flooruncondtype+"');");
                HeatLoad.AddItem(con,CustNum, SiteNum, LoadDate, ceilingsqft,wallsqft,nwinsqft,swinsqft,ewinsqft,wwinsqft,nsldoorsqft,ssldoorsqft,esldoorsqft,wsldoorsqft,doorsqft,totglasssqft,nframewall,nmasawall,nmasbwall,basfloorsqft,slabnoperim,slabwperim,flooruncond,mechvent,numpeople,ceiltype,walltype,nwintype,swintype,ewintype,wwintype,nsldoortype,ssldoortype,esldoortype,wsldoortype,doortype,nframewalltype,nmasawalltype,nmasbwalltype,slabnoperimtype,slabwperimtype,flooruncondtype, bldlength, bldwidth, bldheight);
		} else if (action.equalsIgnoreCase("updateheatload")) {
		HeatLoad.UpdateItem(con, recnum, CustNum, SiteNum, LoadDate, ceilingsqft,wallsqft,nwinsqft,swinsqft,ewinsqft,wwinsqft,nsldoorsqft,ssldoorsqft,esldoorsqft,wsldoorsqft,doorsqft,totglasssqft,nframewall,nmasawall,nmasbwall,basfloorsqft,slabnoperim,slabwperim,flooruncond,mechvent,numpeople,ceiltype,walltype,nwintype,swintype,ewintype,wwintype,nsldoortype,ssldoortype,esldoortype,wsldoortype,doortype,nframewalltype,nmasawalltype,nmasbwalltype,slabnoperimtype,slabwperimtype,flooruncondtype, bldlength, bldwidth, bldheight);	
		}
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=7&custnum="+custnum+"&custstart=A&custstop=A");
			}

			
			
private void doSaveEquip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		 int custnum = Integer.parseInt(tcustnum);
                String brand = req.getParameter("brand");
                String modelnum  = req.getParameter("modelnum");
                String serialnum = req.getParameter("serialnum");
                String filter = req.getParameter("filter");
                String notes = req.getParameter("notes");
                String etype = req.getParameter("etype");
                String cseer = req.getParameter("cseer");
                String btuout = req.getParameter("btuout");
		
				if ((brand.length()<=3))
				{
					out.println("You must click the back key and fill in the equipment brand<br>.");
					out.println("The data can not be saved without it.<br><br>If you do not have this information please call the office.<br>");
				} else 
		{

		String CustNum=null;
		String SiteNum=null;
                Vector v;
                v = UniCustomer.getIndItem(con, custnum);
                for (int i = 0 ; i < v.size(); i++)
                {
                        UniCustomer t = (UniCustomer) v.elementAt(i);
			CustNum=t.getCustSite();
			SiteNum=t.getSiteNum();
		}
			
                UniEquip.AddItem(con, custnum, brand, modelnum, serialnum, filter, notes, etype , cseer, btuout, CustNum, SiteNum, 0);
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=1&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }
			}

private void doAddWorkSheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
       	int custnum = Integer.parseInt(tcustnum);
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Worksheet</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveworksheet&custnum="+custnum+"\" name=\"addcust\">");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"wsdate\" value=\""+s+"\"></td>");
	out.println("</tr>");
	out.println("<tr><td>Summary</td><td>");
	out.println("<input type=\"text\" name=\"wssummary\" size=\"60\"></td></tr>");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\">");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<input type=\"hidden\" name=\"wsmult\" value=\""+doGetMarkUpDiv()+"\">");
	out.println("<input type=\"hidden\" name=\"wsmultlab\" value=\""+doGetMarkUpDiv()+"\">");
	out.println("<input type=\"hidden\" name=\"wsmultsub\" value=\""+doGetMarkUpDiv()+"\">");
	out.println("</table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

private void doAddProposal(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
	String custstart = req.getParameter("custstart");
	String action = req.getParameter("action");
	String custstop = req.getParameter("custstop");
       	int custnum = Integer.parseInt(tcustnum);
	out.println("<html>");
	out.println("<head>");
	if (action.equalsIgnoreCase("addproposal"))
		{	
	out.println("<title>Add Proposal Agreement</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveproposal&custnum="+custnum+"\" name=\"addcust\">");
		}

	if (action.equalsIgnoreCase("addservproposal"))
		{	
	out.println("<title>Add Proposal Agreement</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveservproposal&custnum="+custnum+"\" name=\"addcust\">");
		}
	
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"qdate\" value=\""+s+"\"></td>");
	out.println("</tr>");
	out.println("<tr><td>Summary</td><td>");
	out.println("<input type=\"text\" name=\"qsummary\" size=\"60\"></td></tr>");
	out.println("<tr><td>Payment Terms</td><td>");
	out.println("<input type=\"text\" name=\"qpayterms\" size=\"60\"></td></tr>");
		if (action.equalsIgnoreCase("addproposal"))
		{
	out.println("<tr><td>Additional Services</td><td>");
	out.println("<textarea name=\"qadditionalserv\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Job Instructions for Installation:</td><td>");
	out.println("<textarea name=\"qnotes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
		}
		if (action.equalsIgnoreCase("addservproposal"))
		{
	out.println("<tr><td>Call Slip:</td><td>");
	out.println("<input type=\"text\" name=\"qadditionalserv\" size=\"60\"></td></tr>");
	out.println("</td></tr>");
	out.println("<tr><td>Date of Call:</td><td>");
	out.println("<input type=\"text\" name=\"qnotes\" size=\"60\"></td></tr>");
		}
	out.println("</td></tr>");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\">");
	out.println("<input type=\"hidden\" name=\"qstatus\" value=\"New\">");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("</table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

private void doAddPrev(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custsite=req.getParameter("custsite");
		String sitenum=req.getParameter("sitenum");
		String custstop = req.getParameter("custstop");
		String reqsource = req.getParameter("reqsource");
       		 int custnum = Integer.parseInt(tcustnum);
		int eenum=0;
		int ecustnum=0;
		String brand=null;
		String modelnum=null;
		String serialnum=null;
		String filter=null;
		String notes=null;
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Preventative Agreement</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveprevagreement&custnum="+custnum+"\" name=\"addcust\">");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"agrdate\" value=\""+s+"\"></td>");
	out.println("</tr>");
	out.println("<tr><td>Term</td><td>");
	out.println("<input type=\"text\" name=\"term\" ></td>");
	out.println("</tr>");
	out.println("<tr><td>Start Date</td><td>");
	out.println("<input type=\"text\" name=\"startdate\"></td></tr>");
	out.println("<tr><td>End Date</td><td>");
	out.println("<input type=\"text\" name=\"enddate\"></td></tr>");
	out.println("<tr><td>Visits Per Year</td><td>");
	out.println("<input type=\"text\" name=\"vperyear\"></td></tr>");
	out.println("<tr><td>Cost</td><td>");
	out.println("<input type=\"text\" name=\"cost\"></td></tr>");
	out.println("<tr><td>Schedule of Visits</td><td></td></tr>");
	out.println("<tr><td>Visit 1</td><td>");
	out.println("<input type=\"text\" name=\"visit1\" value=\"-\"></td></tr>");
	out.println("<tr><td>Visit 2</td><td>");
	out.println("<input type=\"text\" name=\"visit2\" value=\"-\"></td></tr>");
	out.println("<tr><td>Visit 3</td><td>");
	out.println("<input type=\"text\" name=\"visit3\" value=\"-\"></td></tr>");
	out.println("<tr><td>Visit 4</td><td>");
	out.println("<input type=\"text\" name=\"visit4\" value=\"-\"></td></tr>");
	out.println("<tr><td>Visit 5</td><td>");
	out.println("<input type=\"text\" name=\"visit5\" value=\"-\"></td></tr>");
	out.println("<tr><td>Visit 6</td><td>");
	out.println("<input type=\"text\" name=\"visit6\" value=\"-\"></td></tr>");
	out.println("<tr><td>Additional Notes (These WILL<br>Appear on the Agreement)</td><td>");
	out.println("<textarea name=\"aservice\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Notes (These will not appear on agreement<br>But will email to office.)</td><td>");
	out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\">");
	out.println("<input type=\"hidden\" name=\"custsite\" value=\""+custsite+"\">");
	out.println("<input type=\"hidden\" name=\"sitenum\" value=\""+sitenum+"\">");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<input type=\"hidden\" name=\"reqsource\" value=\""+reqsource+"\">");
	out.println("</table>");
	out.println("<h3>Customer Equipment List</h3>");
       
        Vector v;
        v = UniEquip.getAllItems(con,custnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Number</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniEquip t = (UniEquip) v.elementAt(i);
		eenum=t.getId();
		ecustnum=t.getCustnum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		notes=t.getNotes();
                out.println("<tr><td>"+eenum+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
                }
	out.println("</table><br><br>");
	out.println("<table border=1 width=100%>");
	out.println("<tr><td>Equipment 1 </td><td><input type=\"text\" name=\"equip1\" value=\"0\" size=\"30\"</td><td>Equipment 2</td><td><input type=\"text\" name=\"equip2\" value=\"0\" size=\"30\"></td></tr>");
	out.println("<tr><td>Equipment 3</td><td><input type=\"text\" name=\"equip3\" value=\"0\" size=\"30\"</td><td>Equipment 4</td><td><input type=\"text\" name=\"equip4\" value=\"0\" size=\"30\"></td></tr>");
	out.println("<tr><td>Equipment 5</td><td><input type=\"text\" name=\"equip5\" value=\"0\"  size=\"30\"</td><td>Equipment 6</td><td><input type=\"text\" name=\"equip6\" value=\"0\"  size=\"30\"></td></tr>");
	out.println("<tr><td>Equipment 7</td><td><input type=\"text\" name=\"equip7\" value=\"0\"  size=\"30\"</td><td>Equipment 8</td><td><input type=\"text\" name=\"equip8\"  value=\"0\"  size=\"30\"></td></tr>");
	out.println("<tr><td>Equipment 9</td><td><input type=\"text\" name=\"equip9\"  value=\"0\"  size=\"30\"</td><td>Equipment 10</td><td><input type=\"text\" name=\"equip10\"  value=\"0\" size=\"30\"></td></tr>");
	out.println("</table><br><br>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}


private void doUpdatePrev(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("contnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String reqsource = req.getParameter("reqsource");
       		int custnum = Integer.parseInt(tcustnum);
       		int contnum = Integer.parseInt(tcontnum);
                String tenum1 = req.getParameter("equip1");
                String tenum2 = req.getParameter("equip2");
                String tenum3 = req.getParameter("equip3");
                String tenum4 = req.getParameter("equip4");
                String tenum5 = req.getParameter("equip5");
                String tenum6 = req.getParameter("equip6");
                String tenum7 = req.getParameter("equip7");
                String tenum8 = req.getParameter("equip8");
                String tenum9 = req.getParameter("equip9");
                String tenum10 = req.getParameter("equip10");
		String visit1 = req.getParameter("visit1");
		String visit2 = req.getParameter("visit2");
		String visit3 = req.getParameter("visit3");
		String visit4 = req.getParameter("visit4");
		String visit5 = req.getParameter("visit5");
		String visit6 = req.getParameter("visit6");
                String aservice  = req.getParameter("aservice");
                String startdate = req.getParameter("startdate");
                String enddate = req.getParameter("enddate");
                String tterm = req.getParameter("term");
                String cost = req.getParameter("cost");
                String notes = req.getParameter("notes");
                String agrdate = req.getParameter("agrdate");
                String tvperyear = req.getParameter("vperyear");
       		int term = Integer.parseInt(tterm);
       		int vperyear = Integer.parseInt(tvperyear);
                UniPagreement.UpdateItem(con, contnum, custnum, tenum1, tenum2, tenum3, tenum4, tenum5, tenum6, tenum7, tenum8, tenum9, tenum10, aservice, doFormatDateDb(getDateDb(startdate)), doFormatDateDb(getDateDb(enddate)), term, cost, notes, doFormatDateDb(getDateDb(agrdate)), vperyear, visit1, visit2, visit3, visit4, visit5, visit6 );
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+""+reqsource+"?action=showcustdetail&csection=4&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }
	
	
private void doUpdateWorksheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
             {
	String tcustnum = req.getParameter("custnum");
	String twsnum = req.getParameter("contnum");
	String wsmult = req.getParameter("wsmult");
	String wsmultlab = req.getParameter("wsmultlab");
	String wsmultsub = req.getParameter("wsmultsub");
 	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
       	int custnum = Integer.parseInt(tcustnum);
       	int wsnum = Integer.parseInt(twsnum);
        String wsdescription = req.getParameter("wsdescription");
        String wsdate = req.getParameter("wsdate");
        UniWorksheet.UpdateItem(con, wsnum, custnum, doFormatDateDb(getDateDb(wsdate)), wsdescription, wsmult, wsmultlab, wsmultsub);
        out.println("Your item has been updated in the database<br>");
		con.close();
        res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }

	
private void doUpdateMainWorksheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
             {
	String trecnum = req.getParameter("contnum");
	String wsmult = req.getParameter("wsmult");
       	int recnum = Integer.parseInt(trecnum);
        String wsdescription = req.getParameter("wsdescription");
        String wsdate = req.getParameter("wsdate");
        UniMasterWorksheet.UpdateItem(con, recnum, doFormatDateDb(getDateDb(wsdate)), wsdescription, wsmult);
        out.println("Your item has been updated in the database<br>");
		con.close();
        res.sendRedirect(""+classdir+"UniCash?action=showworksheet&recnum="+recnum+"");
            }

private void doUpdateProposal(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
             {
	String tcustnum = req.getParameter("custnum");
	String tquotenum = req.getParameter("contnum");
 	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
       	int custnum = Integer.parseInt(tcustnum);
	int combineopts=0;
       	int quotenum = Integer.parseInt(tquotenum);
        String qadditionalserv  = req.getParameter("qadditionalserv");
        String qpayterms = req.getParameter("qpayterms");
        String qdescription = req.getParameter("qdescription");
        String qnotes = req.getParameter("qnotes");
        String qdisc = req.getParameter("qdisc");
        String qdate = req.getParameter("qdate");
        String qstatus = req.getParameter("qstatus");
        String solddate = req.getParameter("solddate");
        String jobnum = req.getParameter("jobnum");
	String antstart = req.getParameter("antstart");
        String action = req.getParameter("action");
	String scombineopts=req.getParameter("combineopts");
		if (scombineopts != null) {
       		combineopts = 1;
		} else {
		combineopts =0;
			}
	if (action.equalsIgnoreCase("updateproposal")) 
	{
        UniQuotes.UpdateItem(con, quotenum, custnum, doFormatDateDb(getDateDb(qdate)), qdescription, qpayterms, qnotes, qdisc, qadditionalserv, qstatus, doFormatDateDb(getDateDb(solddate)),jobnum ,doFormatDateDb(getDateDb(antstart)), combineopts );
	}
	if (action.equalsIgnoreCase("updateservproposal")) 
	{
        ServQuotes.UpdateItem(con, quotenum, custnum, doFormatDateDb(getDateDb(qdate)), qdescription, qpayterms, qnotes, qdisc, qadditionalserv, qstatus, doFormatDateDb(getDateDb(solddate)),jobnum ,doFormatDateDb(getDateDb(antstart)) );
	}
		con.close();
        out.println("Your item has been updated in the database<br>");
        res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }


private void doSaveWorksheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
             {
	String tcustnum = req.getParameter("custnum");
 	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
       	int custnum = Integer.parseInt(tcustnum);
	String wsmult = req.getParameter("wsmult");
	String wsmultlab = req.getParameter("wsmultlab");
	String wsmultsub = req.getParameter("wsmultsub");
        String wsdescription = req.getParameter("wssummary");
        String wsdate = req.getParameter("wsdate");
	String custsite = doGetCustSite(custnum);
	String sitenum = doGetSiteNum(custnum);
	int servsync=0;
	String login=(String)session.getAttribute("login");
        UniWorksheet.AddItem(con, custnum, doFormatDateDb(getDateDb(wsdate)), wsdescription, wsmult, custsite, sitenum,login, 0, wsmultlab, wsmultsub);
		con.close();
        out.println("Your item has been updated in the database<br>");
        res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }

private void doSaveProposal(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
             {
	String tcustnum = req.getParameter("custnum");
 	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
	String action = req.getParameter("action");
       	int custnum = Integer.parseInt(tcustnum);
        String qadditionalserv  = req.getParameter("qadditionalserv");
        String qpayterms = req.getParameter("qpayterms");
        String qdescription = req.getParameter("qsummary");
        String qnotes = req.getParameter("qnotes");
        String qdisc = req.getParameter("qdisc");
        String qdate = req.getParameter("qdate");
        String qstatus = req.getParameter("qstatus");
	String scombineopts=req.getParameter("combineopts");
        String solddate = "2099-12-31"; 
        String antstart  = "2099-12-31";
	String custsite = doGetCustSite(custnum);
	String sitenum = doGetSiteNum(custnum);
	int servsync=0;
	String login=(String)session.getAttribute("login");
        String jobnum = "";
	if (action.equalsIgnoreCase("saveproposal"))
	{
	int combineopts=Integer.parseInt(scombineopts);
        UniQuotes.AddItem(con, custnum, qdate, qdescription, qpayterms, qnotes, qdisc, qadditionalserv, qstatus , solddate, antstart, custsite, sitenum, login, servsync, combineopts);
	}
	if (action.equalsIgnoreCase("saveservproposal"))
	{
        ServQuotes.AddItem(con, custnum, qdate, qdescription, qpayterms, qnotes, qdisc, qadditionalserv, qstatus , solddate, antstart);
	}
		con.close();

        out.println("Your item has been updated in the database<br>");
        res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=5&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }
	
private void doSavePrev(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String reqsource = req.getParameter("reqsource");
       		int custnum = Integer.parseInt(tcustnum);
                String tenum1 = req.getParameter("equip1");
                String tenum2 = req.getParameter("equip2");
                String tenum3 = req.getParameter("equip3");
                String tenum4 = req.getParameter("equip4");
                String tenum5 = req.getParameter("equip5");
                String tenum6 = req.getParameter("equip6");
                String tenum7 = req.getParameter("equip7");
                String tenum8 = req.getParameter("equip8");
                String tenum9 = req.getParameter("equip9");
                String tenum10 = req.getParameter("equip10");
                String aservice  = req.getParameter("aservice");
                String startdate = req.getParameter("startdate");
                String enddate = req.getParameter("enddate");
                String tterm = req.getParameter("term");
                String cost = req.getParameter("cost");
                String notes = req.getParameter("notes");
                String agrdate = req.getParameter("agrdate");
                String tvperyear = req.getParameter("vperyear");
		String visit1 = req.getParameter("visit1");
		String visit2 = req.getParameter("visit2");
		String visit3 = req.getParameter("visit3");
		String visit4 = req.getParameter("visit4");
		String visit5 = req.getParameter("visit5");
		String visit6 = req.getParameter("visit6");
		String custsite=req.getParameter("custsite");
		String techid=(String)session.getAttribute("login");
		String sitenum=req.getParameter("sitenum");
		SimpleDateFormat dateFormatter = new SimpleDateFormat("MM-dd-yyyy");
		String taservice = aservice.replaceAll("\n","<br>");	
//Here is where we do: If StartDate and EndDate = '-' then
//Startdate = AgrDate and EndDate=AgrDate + Term
		if (startdate.length()<=1) {
			startdate=""+agrdate+"";
				}
		if (enddate.length()<=1) {
		Date expirationDate=null;
		expirationDate=dateFormatter.parse(startdate);
		Calendar dateToBeTested=Calendar.getInstance();
		dateToBeTested.setTime(expirationDate);
		dateToBeTested.add(Calendar.YEAR,Integer.parseInt(tterm));
		enddate = doFormatDate(dateToBeTested.getTime());
			}
       		int term = Integer.parseInt(tterm);
       		int vperyear = Integer.parseInt(tvperyear);

		out.println("<html><br><br>startdate="+startdate+"<br>enddate="+enddate+"<br>Term="+term+"<br></html>");
                UniPagreement.AddItem(con, custnum, tenum1, tenum2, tenum3, tenum4, tenum5, tenum6, tenum7, tenum8, tenum9, tenum10, taservice, doFormatDateDb(getDateDb(startdate)), doFormatDateDb(getDateDb(enddate)), term, cost, notes, doFormatDateDb(getDateDb(agrdate)), vperyear, visit1, visit2, visit3, visit4, visit5, visit6,0, custsite, sitenum, techid );
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+""+reqsource+"?action=showcustdetail&csection=4&custnum="+custnum+"&custstart="+custstart+"&custstop="+custstop+"");
            }

private void doCalcPrice(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Calculate Prices</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=finishcalcprice\" name=\"calcprice\">");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Part Price</td><td>");
	out.println("<input type=\"text\" name=\"pprice\"></td>");
	out.println("</tr>");
	out.println("<tr><td>Labor Man Hours</td><td>");
	out.println("<input type=\"text\" name=\"lhours\"></td>");
	out.println("</tr>");
	out.println("</table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER></form>");
		con.close();

			}

private void doSendAllWorksheets(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String cname=null;
		String qdate = req.getParameter("listdate");
		String address1=null;
		String address2=null;
		String city =null;
		String state=null;
		String zip=null;
		String homephone=null;
		String altphone=null;
		String cust_notes=null;
		String mbody=null;	
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		String action = req.getParameter("action");
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("wsnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       	 	int crecnum = 0;
       		int wsnum = 0;
                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		int laborday = 16;
		int totcrewdays = 0;	
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		int totshophours=0;
		double totlabor=0.00;
		double subtotlabor=0.00;
		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		double cost=0.00;
		double subcost=0.00;
		int laborhours=0;
		int shophours=0;
		double laborcost=0;
		double awsmult=0.00;
		String wsmult="";
		String investment=null;
		double qtotal=0.00;


                Vector vd;
                vd = UniWorksheet.getAllDateItems(con,doFormatDateDb(getDateDb(qdate)));
		counter=0;
                for (int id = 0 ; id < vd.size(); id++)
                {
                UniWorksheet td = (UniWorksheet) vd.elementAt(id);
		crecnum=td.getCrec();
		wsnum=td.getWsRec();
	
                Vector vv;
                vv = UniWorksheet.getIndItem(con,crecnum,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=doFormatDate(getDate(tt.getWsDate()));
		wsdescription=tt.getWsDesc();
		wsmult=tt.getWsMult();
		}

 		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+crecnum+"");
		 while(rs.next())
        	        {
			cname=rs.getString("cname");
			address1=rs.getString("address1");
			address2=rs.getString("address2");
			city =rs.getString("city");
			state=rs.getString("state");
			zip=rs.getString("zip");
			homephone=rs.getString("homephone");
			altphone=rs.getString("altphone");
			cust_notes=rs.getString("cust_notes");
			}

	if (Double.parseDouble(wsmult)!=0.00) {
       		 awsmult = Double.parseDouble(wsmult);
		}
	else {
		awsmult = doGetMarkUpDiv();
		}
	mbody="";
	mbody=combinestring(mbody,"<html><basefont size=2>");
	mbody=combinestring(mbody,"<html><basefont size=2>");
	mbody=combinestring(mbody,"<html><head><title>Quote Worksheet</title></head>");
	//doMHeader(req, res, out, session, username); 
	mbody=combinestring(mbody,"<h2 align=CENTER>WorkSheet</h2>");
	
	mbody=combinestring(mbody,"<table size=100% border=1><tr><td width=\"50%\">");


	mbody=combinestring(mbody,"<table size=100%>");
	mbody=combinestring(mbody,"<tr><td>"+cname+" </td></tr> ");
	mbody=combinestring(mbody,"<tr><td>"+address1+"</td></tr><tr><td>"+ address2+"</tr></td><tr><td>"+city+", "+state+"  "+zip+"</td></tr>");

	mbody=combinestring(mbody,"</table>");

	mbody=combinestring(mbody,"</td><td>");

	mbody=combinestring(mbody,"<table size=100%>");
	mbody=combinestring(mbody,"<tr><td>Date:</td><td>");
	mbody=combinestring(mbody,wsdate+"</td>");
	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"<tr><td>Summary:</td><td>");
	mbody=combinestring(mbody,wsdescription +"</td>");
	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"</table>");

	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"</table>");

	mbody=combinestring(mbody,"<br><br><br><table border=\"1\" width=\"100%\">");
	mbody=combinestring(mbody,"<tr><th>Item Name</th><th>Keycode<br>Part #</th><th>Quantity</th><th>Price</th><th>Item Cost</th><th>Labor Hours</th><th>Shop Hours</th><th>Labor Cost</th></tr>");
                
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		cost = tp.getWsCost();
		laborhours = tp.getWsLaborHours();
		shophours = tp.getWsShopHours();
		laborcost = tp.getWsLaborCost();
		subcost = tp.getWsSubCost();
		double subtot=cost*quantity;
		subtotlabor=(shophours+laborhours)*laborcost;

		totinvestment=totinvestment+subtot;
		totlabor = totlabor+subtotlabor;
		totlaborhours = totlaborhours+laborhours;
		totshophours = totshophours+shophours;
		
		mbody=combinestring(mbody,"<tr><td>"+item+"</td><td>"+keycode+"</td><td>"+quantity+"</td><td>"+NumberFormat.getCurrencyInstance().format(cost)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td>"+laborhours+"</td><td>"+shophours+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtotlabor)+"</td></tr>");
		}

		double partmarkup = totinvestment * doGetPartMult();
		// HERE IS ADJUSTED LABOR HOUTS
		double adjtotlabor = (totlaborhours+totshophours) * doGetLabMult();
		//double fsellprice = (totlabor+partmarkup)/awsmult;
		double fsellprice = ((laborcost*adjtotlabor)+partmarkup)/awsmult;
		double lsellprice = (totlabor*doGetGpToLabor())+totlabor+partmarkup;
		totcrewdays = totlaborhours / laborday;

	mbody=combinestring(mbody,"</table><br><h4>Summary Section</h4>");
	mbody=combinestring(mbody,"<table width=\"75%\" border=1>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Transfer to Warranty</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup-totinvestment)+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Field Labor Hours</td><td>"+ totlaborhours+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Shop Hours</td><td>"+ totshophours+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Adjusted Labor Hours (x"+doGetLabMult()+")</td><td>"+ adjtotlabor+"");
	mbody=combinestring(mbody,"</td></tr>");

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Labor Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost)+"");
	mbody=combinestring(mbody,"</td></tr>");

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"<b>Total Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost+partmarkup)+"</b>");
	mbody=combinestring(mbody,"</td></tr>");

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"<b>Total Cost / "+awsmult+"</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	mbody=combinestring(mbody,"</td></tr>");


/* REMOVE THIS SECTION IF NEW LABOR RATES APPROVED
	out.println("<tr><td>");
	out.println("Sell Price-Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice-partmarkup-totlabor)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Labor Ratio</td><td>"+ ((fsellprice-(partmarkup+totlabor))/totlabor)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("<b>Total Labor x "+doGetGpToLabor()+"+Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	
	if (lsellprice > fsellprice) {
	out.println("<tr><td>");
	out.println("<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	} else {
*/

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	mbody=combinestring(mbody,"</td></tr>");
	/*
	 * }
	 */
	mbody=combinestring(mbody,"</table><br>");

/*
	out.println("<h4>Labor Check Summary Section</h4>");
	out.println("<table width=\"75%\" border=1>");
	out.println("<tr><td>");
	out.println("Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Labor Hours</td><td>"+ totlaborhours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Shop Hours</td><td>"+ totshophours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Crew Days</td><td>"+ totcrewdays+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Crew Days x "+doGetCrewBillable()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable())+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("ISL Sell Price</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable()+partmarkup)+"");
	out.println("</td></tr>");
	out.println("</table><br>");
*/

	out.println(mbody);	
        String emailserver = doGetSmtpServer(username);
        String emailsendaddress=doGetProp_Email(username);
        String techemailaddress=doGetTech_Email(username);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Worksheet For: "+cname+" - "+qdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
mbody=null;
			}
		con.close();
		}

private String doSendWorksheetC(int wsrec, int custnum, String username)
                throws Exception
                        {
		String cname=null;
		String address1=null;
		String address2=null;
		String city =null;
		String state=null;
		String zip=null;
		String homephone=null;
		String altphone=null;
		String cust_notes=null;
		String mbody=null;	
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
       	 	int crecnum = custnum;
       		int wsnum = wsrec;
                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		int laborday = 16;
		int totcrewdays = 0;	
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		int totshophours=0;
		double totlabor=0.00;
		double subcost=0.00;
		double subtotlabor=0.00;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		double cost=0.00;
		int laborhours=0;
		int shophours=0;
		double laborcost=0;
		double totsubcost=0.00;
		double awsmult=0.00;
		String wsmult="";
		String investment=null;
		double qtotal=0.00;
	
                Vector vv;
                vv = UniWorksheet.getIndItem(con,crecnum,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=doFormatDate(getDate(tt.getWsDate()));
		wsdescription=tt.getWsDesc();
		wsmult=tt.getWsMult();
		}

 		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
		 while(rs.next())
        	        {
			cname=rs.getString("cname");
			address1=rs.getString("address1");
			address2=rs.getString("address2");
			city =rs.getString("city");
			state=rs.getString("state");
			zip=rs.getString("zip");
			homephone=rs.getString("homephone");
			altphone=rs.getString("altphone");
			cust_notes=rs.getString("cust_notes");
			}

	if (Double.parseDouble(wsmult)!=0.00) {
       		 awsmult = Double.parseDouble(wsmult);
		}
	else {
		awsmult = doGetMarkUpDiv();
		}
	mbody="";
	mbody=combinestring(mbody,"<html><basefont size=2>");
	mbody=combinestring(mbody,"<html><basefont size=2>");
	mbody=combinestring(mbody,"<html><head><title>Quote Worksheet</title></head>");
	mbody=combinestring(mbody,"<h2 align=CENTER>WorkSheet</h2>");
	mbody=combinestring(mbody,"<table size=100% border=1><tr><td width=\"50%\">");
	mbody=combinestring(mbody,"<table size=100%>");
	mbody=combinestring(mbody,"<tr><td>"+cname+" </td></tr> ");
	mbody=combinestring(mbody,"<tr><td>"+address1+"</td></tr><tr><td>"+ address2+"</tr></td><tr><td>"+city+", "+state+"  "+zip+"</td></tr>");
	mbody=combinestring(mbody,"</table>");
	mbody=combinestring(mbody,"</td><td>");
	mbody=combinestring(mbody,"<table size=100%>");
	mbody=combinestring(mbody,"<tr><td>Date:</td><td>");
	mbody=combinestring(mbody,wsdate+"</td>");
	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"<tr><td>Summary:</td><td>");
	mbody=combinestring(mbody,wsdescription +"</td>");
	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"</table>");
	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"</table>");
	mbody=combinestring(mbody,"<br><br><br><table border=\"1\" width=\"100%\">");
	mbody=combinestring(mbody,"<tr><th>Item Name</th><th>Keycode<br>Part #</th><th>Quantity</th><th>Price</th><th>Item Cost</th><th>Labor Hours</th><th>Shop Hours</th><th>Labor Cost</th><th>Sub Cost</th></tr>");
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		cost = tp.getWsCost();
		subcost=tp.getWsSubCost();
		laborhours = tp.getWsLaborHours();
		shophours = tp.getWsShopHours();
		laborcost = tp.getWsLaborCost();
		double subtot=cost*quantity;
		subtotlabor=(shophours+laborhours)*laborcost;
		totinvestment=totinvestment+subtot;
		totsubcost=totsubcost+subcost;
		totlabor = totlabor+subtotlabor;
		totlaborhours = totlaborhours+laborhours;
		totshophours = totshophours+shophours;
		mbody=combinestring(mbody,"<tr><td>"+item+"</td><td>"+keycode+"</td><td>"+quantity+"</td><td>"+NumberFormat.getCurrencyInstance().format(cost)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td>"+laborhours+"</td><td>"+shophours+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtotlabor)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subcost)+"</td></tr>");
		}

		double partmarkup = totinvestment * doGetPartMult();
		double adjtotlabor = (totlaborhours+totshophours) * doGetLabMult();
		double fsellprice = ((laborcost*adjtotlabor)+partmarkup)/awsmult;
		double lsellprice = (totlabor*doGetGpToLabor())+totlabor+partmarkup;
		totcrewdays = totlaborhours / laborday;

	mbody=combinestring(mbody,"</table><br><h4>Summary Section</h4>");
	mbody=combinestring(mbody,"<table width=\"75%\" border=1>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Transfer to Warranty</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup-totinvestment)+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Field Labor Hours</td><td>"+ totlaborhours+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Shop Hours</td><td>"+ totshophours+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Adjusted Labor Hours (x"+doGetLabMult()+")</td><td>"+ adjtotlabor+"");
	mbody=combinestring(mbody,"</td></tr>");

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Labor Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost)+"");
	mbody=combinestring(mbody,"</td></tr>");

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"<b>Total Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost+partmarkup)+"</b>");
	mbody=combinestring(mbody,"</td></tr>");

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"<b>Total Cost / "+awsmult+"</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	mbody=combinestring(mbody,"</td></tr>");


	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"</table><br>");


        String emailserver = doGetSmtpServer(username);
        String emailsendaddress=doGetProp_Email(username);
        String techemailaddress=doGetTech_Email(username);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Worksheet For: "+cname+" - "+wsdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
		return mbody;
			}

private void doSendWorksheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String cname=null;
		String qdate = req.getParameter("qdate");
		String address1=null;
		String address2=null;
		String city =null;
		String state=null;
		String zip=null;
		String homephone=null;
		String altphone=null;
		String cust_notes=null;
		String mbody=null;	
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
		String action = req.getParameter("action");
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("wsnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       	 	int crecnum = Integer.parseInt(tcustnum);
       		int wsnum = Integer.parseInt(tcontnum);
                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		int laborday = 16;
		int totcrewdays = 0;	
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		double totinvestment=0.00;
		double subcost=0.00;
		int totlaborhours=0;
		int totshophours=0;
		double totlabor=0.00;
		double subtotlabor=0.00;
		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		double cost=0.00;
		int laborhours=0;
		int shophours=0;
		double laborcost=0;
		double totsubcost=0.00;
		double awsmult=0.00;
		String wsmult="";
		String investment=null;
		double qtotal=0.00;
	
                Vector vv;
                vv = UniWorksheet.getIndItem(con,crecnum,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=doFormatDate(getDate(tt.getWsDate()));
		wsdescription=tt.getWsDesc();
		wsmult=tt.getWsMult();
		}

 		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
        	        {
			cname=rs.getString("cname");
			address1=rs.getString("address1");
			address2=rs.getString("address2");
			city =rs.getString("city");
			state=rs.getString("state");
			zip=rs.getString("zip");
			homephone=rs.getString("homephone");
			altphone=rs.getString("altphone");
			cust_notes=rs.getString("cust_notes");
			}

	if (Double.parseDouble(wsmult)!=0.00) {
       		 awsmult = Double.parseDouble(wsmult);
		}
	else {
		awsmult = doGetMarkUpDiv();
		}
	mbody="";
	mbody=combinestring(mbody,"<html><basefont size=2>");
	mbody=combinestring(mbody,"<html><basefont size=2>");
	mbody=combinestring(mbody,"<html><head><title>Quote Worksheet</title></head>");
	//doMHeader(req, res, out, session, username); 
	mbody=combinestring(mbody,"<h2 align=CENTER>WorkSheet</h2>");
	
	mbody=combinestring(mbody,"<table size=100% border=1><tr><td width=\"50%\">");


	mbody=combinestring(mbody,"<table size=100%>");
	mbody=combinestring(mbody,"<tr><td>"+cname+" </td></tr> ");
	mbody=combinestring(mbody,"<tr><td>"+address1+"</td></tr><tr><td>"+ address2+"</tr></td><tr><td>"+city+", "+state+"  "+zip+"</td></tr>");

	mbody=combinestring(mbody,"</table>");

	mbody=combinestring(mbody,"</td><td>");

	mbody=combinestring(mbody,"<table size=100%>");
	mbody=combinestring(mbody,"<tr><td>Date:</td><td>");
	mbody=combinestring(mbody,wsdate+"</td>");
	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"<tr><td>Summary:</td><td>");
	mbody=combinestring(mbody,wsdescription +"</td>");
	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"</table>");

	mbody=combinestring(mbody,"</tr>");
	mbody=combinestring(mbody,"</table>");

	mbody=combinestring(mbody,"<br><br><br><table border=\"1\" width=\"100%\">");
	mbody=combinestring(mbody,"<tr><th>Item Name</th><th>Keycode<br>Part #</th><th>Quantity</th><th>Price</th><th>Item Cost</th><th>Labor Hours</th><th>Shop Hours</th><th>Labor Cost</th><th>Sub Cost</th></tr>");
                
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		cost = tp.getWsCost();
		laborhours = tp.getWsLaborHours();
		subcost = tp.getWsSubCost();
		shophours = tp.getWsShopHours();
		laborcost = tp.getWsLaborCost();
		double subtot=cost*quantity;
		subtotlabor=(shophours+laborhours)*laborcost;

		totinvestment=totinvestment+subtot;
		totsubcost = totsubcost + subcost;
		totlabor = totlabor+subtotlabor;
		totlaborhours = totlaborhours+laborhours;
		totshophours = totshophours+shophours;
		
		mbody=combinestring(mbody,"<tr><td>"+item+"</td><td>"+keycode+"</td><td>"+quantity+"</td><td>"+NumberFormat.getCurrencyInstance().format(cost)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td>"+laborhours+"</td><td>"+shophours+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtotlabor)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subcost)+"</td></tr>");
		}

		double partmarkup = totinvestment * doGetPartMult();
		// HERE IS ADJUSTED LABOR HOUTS
		double adjtotlabor = (totlaborhours+totshophours) * doGetLabMult();
		//double fsellprice = (totlabor+partmarkup)/awsmult;
		double fsellprice = ((laborcost*adjtotlabor)+partmarkup)/awsmult;
		double lsellprice = (totlabor*doGetGpToLabor())+totlabor+partmarkup;
		totcrewdays = totlaborhours / laborday;

	mbody=combinestring(mbody,"</table><br><h4>Summary Section</h4>");
	mbody=combinestring(mbody,"<table width=\"75%\" border=1>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Transfer to Warranty</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup-totinvestment)+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Field Labor Hours</td><td>"+ totlaborhours+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Shop Hours</td><td>"+ totshophours+"");
	mbody=combinestring(mbody,"</td></tr>");
	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Adjusted Labor Hours (x"+doGetLabMult()+")</td><td>"+ adjtotlabor+"");
	mbody=combinestring(mbody,"</td></tr>");

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"Total Labor Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost)+"");
	mbody=combinestring(mbody,"</td></tr>");

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"<b>Total Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost+partmarkup)+"</b>");
	mbody=combinestring(mbody,"</td></tr>");

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"<b>Total Cost / "+awsmult+"</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	mbody=combinestring(mbody,"</td></tr>");


/* REMOVE THIS SECTION IF NEW LABOR RATES APPROVED
	out.println("<tr><td>");
	out.println("Sell Price-Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice-partmarkup-totlabor)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Labor Ratio</td><td>"+ ((fsellprice-(partmarkup+totlabor))/totlabor)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("<b>Total Labor x "+doGetGpToLabor()+"+Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	
	if (lsellprice > fsellprice) {
	out.println("<tr><td>");
	out.println("<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	} else {
*/

	mbody=combinestring(mbody,"<tr><td>");
	mbody=combinestring(mbody,"<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	mbody=combinestring(mbody,"</td></tr>");
	/*
	 * }
	 */
	mbody=combinestring(mbody,"</table><br>");

/*
	out.println("<h4>Labor Check Summary Section</h4>");
	out.println("<table width=\"75%\" border=1>");
	out.println("<tr><td>");
	out.println("Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Labor Hours</td><td>"+ totlaborhours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Shop Hours</td><td>"+ totshophours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Crew Days</td><td>"+ totcrewdays+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Crew Days x "+doGetCrewBillable()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable())+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("ISL Sell Price</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable()+partmarkup)+"");
	out.println("</td></tr>");
	out.println("</table><br>");
*/

	out.println(mbody);	
        String emailserver = doGetSmtpServer(username);
        String emailsendaddress=doGetProp_Email(username);
        String techemailaddress=doGetTech_Email(username);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Worksheet For: "+cname+" - "+qdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
mbody=null;
		con.close();
			}

private void doPrintWorksheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String cname=null;
		String address1=null;
		String address2=null;
		String city =null;
		String state=null;
		String zip=null;
		String homephone=null;
		String altphone=null;
		String cust_notes=null;
		
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);

		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("wsnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       	 	int crecnum = Integer.parseInt(tcustnum);
       		int wsnum = Integer.parseInt(tcontnum);
                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		int laborday = 16;
		int totcrewdays = 0;	
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		int totshophours=0;
		double totlabor=0.00;
		double subtotlabor=0.00;
		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		double cost=0.00;
		double subcost=0.00;
		double totsubcost=0.00;
		int laborhours=0;
		int shophours=0;
		double laborcost=0;
		double awsmult=0.00;
		double awsmultlab=0.00;
		double awsmultsub=0.00;
		String wsmult="";
		String wsmultlab="";
		String wsmultsub="";
		String investment=null;
		double qtotal=0.00;

 		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
        	        {
			cname=rs.getString("cname");
			address1=rs.getString("address1");
			address2=rs.getString("address2");
			city =rs.getString("city");
			state=rs.getString("state");
			zip=rs.getString("zip");
			homephone=rs.getString("homephone");
			altphone=rs.getString("altphone");
			cust_notes=rs.getString("cust_notes");
			}

	
                Vector vv;
                vv = UniWorksheet.getIndItem(con,crecnum,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=doFormatDate(getDate(tt.getWsDate()));
		wsdescription=tt.getWsDesc();
		wsmult=tt.getWsMult();
		wsmultlab=tt.getWsMultLab();
		wsmultsub=tt.getWsMultSub();
	}
	if (Double.parseDouble(wsmult)!=0.00) {
       		 awsmult = Double.parseDouble(wsmult);
		}
	else {
		awsmult = doGetMarkUpDiv();
	}

	if (Double.parseDouble(wsmultlab)!=0.00) {
       		 awsmultlab = Double.parseDouble(wsmultlab);
		}
	else {
		awsmultlab = awsmult;
	}

	if (Double.parseDouble(wsmultsub)!=0.00) {
       		 awsmultsub = Double.parseDouble(wsmultsub);
		}
	else {
		awsmultsub = awsmult;
	}

	out.println("<html><basefont size=2>");
	out.println("<html><head><title>Quote Worksheet</title></head>");
	doMHeader(req, res, out, session, username); 
	out.println("<h2 align=CENTER>WorkSheet</h2>");
	
	out.println("<table size=100% border=1><tr><td width=\"50%\">");


	out.println("<table size=100%>");
	out.println("<tr><td>"+cname+" </td></tr> ");
	out.println("<tr><td>"+address1+"</td></tr><tr><td>"+ address2+"</tr></td><tr><td>"+city+", "+state+"  "+zip+"</td></tr>");

	out.println("</table>");

	out.println("</td><td>");

	out.println("<table size=100%>");
	out.println("<tr><td>Date:</td><td>");
	out.println(wsdate+"</td>");
	out.println("</tr>");
	out.println("<tr><td>Summary:</td><td>");
	out.println(wsdescription +"</td>");
	out.println("</tr>");
	out.println("</table>");

	out.println("</tr>");
	out.println("</table>");

	out.println("<br><br><br><table border=\"1\" width=\"100%\">");
	out.println("<tr><th>Item Name</th><th>Keycode<br>Part #</th><th>Quantity</th><th>Price</th><th>Item Cost</th><th>Labor Hours</th><th>Shop Hours</th><th>Labor Cost</th></tr>");
                
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		cost = tp.getWsCost();
		laborhours = tp.getWsLaborHours();
		shophours = tp.getWsShopHours();
		laborcost = tp.getWsLaborCost();
		subcost=tp.getWsSubCost();
		double subtot=cost*quantity;
		subtotlabor=(shophours+laborhours)*laborcost;
		totsubcost=totsubcost+subcost;
		totinvestment=totinvestment+subtot;
		totlabor = totlabor+subtotlabor;
		totlaborhours = totlaborhours+laborhours;
		totshophours = totshophours+shophours;
		
		out.println("<tr><td>"+item+"</td><td>"+keycode+"</td><td>"+quantity+"</td><td>"+NumberFormat.getCurrencyInstance().format(cost)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td>"+laborhours+"</td><td>"+shophours+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtotlabor)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subcost)+"</td></tr>");
		}

		double partmarkup = totinvestment * doGetPartMult();
		// HERE IS ADJUSTED LABOR HOUTS
		double adjtotlabor = (totlaborhours+totshophours) * doGetLabMult();
		//double fsellprice = (totlabor+partmarkup)/awsmult;
		double laborsellprice = (laborcost*adjtotlabor)/awsmultlab;
		double subsellprice = totsubcost/awsmultsub;
		double partsellprice = partmarkup/awsmult;
		double fsellprice = laborsellprice+partsellprice+subsellprice;
		double lsellprice = (totlabor*doGetGpToLabor())+totlabor+partmarkup;
		totcrewdays = totlaborhours / laborday;
	out.println("</table><br><h4>Summary Section</h4>");
	out.println("<table width=\"75%\" border=1>");
	out.println("<tr><td>");
	out.println("Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Transfer to Warranty</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup-totinvestment)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Field Labor Hours</td><td>"+ totlaborhours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Shop Hours</td><td>"+ totshophours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Adjusted Labor Hours (x"+doGetLabMult()+")</td><td>"+ adjtotlabor+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Total Labor Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("<b>Total Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost+partmarkup)+"</b>");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("<b>Total Cost / "+awsmult+"</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	out.println("</td></tr>");


/* REMOVE THIS SECTION IF NEW LABOR RATES APPROVED
	out.println("<tr><td>");
	out.println("Sell Price-Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice-partmarkup-totlabor)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Labor Ratio</td><td>"+ ((fsellprice-(partmarkup+totlabor))/totlabor)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("<b>Total Labor x "+doGetGpToLabor()+"+Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	
	if (lsellprice > fsellprice) {
	out.println("<tr><td>");
	out.println("<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	} else {
*/

	out.println("<tr><td>");
	out.println("<b>Parts Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(partsellprice)+"</b>");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("<b>Labor Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(laborsellprice)+"</b>");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("<b>Subs Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(subsellprice)+"</b>");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	out.println("</td></tr>");
	/*
	 * }
	 */
	out.println("</table><br>");

/*
	out.println("<h4>Labor Check Summary Section</h4>");
	out.println("<table width=\"75%\" border=1>");
	out.println("<tr><td>");
	out.println("Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Labor Hours</td><td>"+ totlaborhours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Shop Hours</td><td>"+ totshophours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Crew Days</td><td>"+ totcrewdays+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Crew Days x "+doGetCrewBillable()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable())+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("ISL Sell Price</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable()+partmarkup)+"");
	out.println("</td></tr>");
	out.println("</table><br>");
*/
		con.close();
			}


private void doEditMasterWorksheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcontnum = req.getParameter("recnum");
       		int wsnum = Integer.parseInt(tcontnum);
                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		int totcrewdays=0;	
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		int totshophours=0;
		double totlabor=0.00;
		double subtotlabor=0.00;

		int laborday = 16;
		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		String twsmult=null;
		String wsmult=null;
		double awsmult=0.00;
		double cost=0.00;
		int laborhours=0;
		int shophours=0;
		double laborcost=0;
		
		String investment=null;
		double qtotal=0.00;

                Vector vv;
                vv = UniMasterWorksheet.getIndItem(con,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniMasterWorksheet tt = (UniMasterWorksheet) vv.elementAt(i);
		wsdate=tt.getWsDate();
		wsdescription=tt.getWsDesc();
		wsmult=tt.getWsMult();
	}
	if (Double.parseDouble(wsmult)!=0.00) {
       		 awsmult = Double.parseDouble(wsmult);
		}
	else {
		awsmult = doGetMarkUpDiv();
	
	}

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Worksheet</title>");
	out.println("</head>");
	String thismainserver=doGetThisMainServer();
	if (!thismainserver.equalsIgnoreCase("yes")) {
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=noactionallowed\" name=\"addcust\">");
							} else
							{
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatemainworksheet\" name=\"addcust\">");
							}
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"wsdate\" value=\""+doFormatDate(getDate(wsdate))+"\"></td>");
	out.println("</tr>");
	out.println("<tr><td>MarkUp</td><td>");
	out.println("<input type=\"text\" name=\"wsmult\" value=\""+awsmult+"\" size=\"60\" ></td>");
	out.println("</tr>");
	out.println("<tr><td>Summary</td><td>");
	out.println("<input type=\"text\" name=\"wsdescription\" value=\""+wsdescription +"\" size=\"60\" ></td>");
	out.println("</tr>");
	out.println("<input type=\"hidden\" name=\"contnum\" value=\""+wsnum+"\">");
	out.println("</table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER></form>");

	out.println("<br><br><br><table border=\"1\" width=\"100%\">");
	out.println("<tr><th>Item Name</th><th>Keycode<br>Part #</th><th>Quantity</th><th>Price</th><th>Item Cost</th><th>Labor Hours</th><th>Shop Hours</th><th>Labor Cost</th><th>Delete</th></tr>");
                
		Vector vp;
                vp = UniMasterWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniMasterWsItems tp = (UniMasterWsItems) vp.elementAt(j);
		
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		cost = tp.getWsCost();
		laborhours = tp.getWsLaborHours();
		shophours = tp.getWsShopHours();
		laborcost = tp.getWsLaborCost();
		double subtot=cost*quantity;
		subtotlabor=(shophours+laborhours)*laborcost;

		totinvestment=totinvestment+subtot;
		totlabor = totlabor+subtotlabor;
		totlaborhours = totlaborhours+laborhours;
		totshophours = totshophours+shophours;
		totcrewdays = totlaborhours / laborday;
		
		out.println("<tr><td>"+item+"</a></td><td>"+keycode+"</td><td>"+quantity+"</td><td>"+NumberFormat.getCurrencyInstance().format(cost)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td>"+laborhours+"</td><td>"+shophours+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtotlabor)+"</td></tr>");
		}
		double partmarkup = totinvestment * doGetPartMult();
		// HERE IS ADJUSTED LABOR HOUTS
		double adjtotlabor = (totlaborhours + totshophours) * doGetLabMult();
		//double fsellprice = (totlabor+partmarkup)/awsmult;
		double fsellprice = ((laborcost*adjtotlabor)+partmarkup)/awsmult;
		double lsellprice = (totlabor*doGetGpToLabor())+totlabor+partmarkup;
		totcrewdays = totlaborhours / laborday;
	out.println("</table><br><h4>Summary Section</h4>");

	out.println("<table width=\"75%\" border=1>");
	
	out.println("<tr><td>");
	out.println("Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Total Field Labor Hours</td><td>"+ totlaborhours+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Total Shop Hours</td><td>"+ totshophours+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Adjusted Labor Hours (x"+doGetLabMult()+")</td><td>"+ adjtotlabor+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Labor Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("<b>Total Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost+partmarkup)+"</b>");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("<b>Total Cost / "+awsmult+"</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	out.println("</td></tr>");

/*
	out.println("<tr><td>");
	out.println("Sell Price-Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice-partmarkup-totlabor)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Labor Ratio</td><td>"+ ((fsellprice-(partmarkup+totlabor))/totlabor)+"");
	out.println("</td></tr>");


	out.println("<tr><td>");
	out.println("<b>Total Labor x "+doGetGpToLabor()+"+Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	
	if (lsellprice > fsellprice) {
	out.println("<tr><td>");
	out.println("<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	} else {
*/
	out.println("<tr><td>");
	out.println("<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	out.println("</td></tr>");
//	}

	out.println("</table><br>");
	
/*
	out.println("<h4>Labor Check Summary Section</h4>");
	out.println("<table width=\"75%\" border=1>");
	out.println("<tr><td>");
	out.println("Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Labor Hours</td><td>"+ totlaborhours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Shop Hours</td><td>"+ totshophours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Crew Days</td><td>"+ totcrewdays+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Crew Days x "+doGetCrewBillable()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable())+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("ISL Sell Price</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable()+partmarkup)+"");
	out.println("</td></tr>");
	out.println("</table><br>");
*/
	out.println("<br><br><a href="+classdir+"UniCash?action=copymasterwsnewcus&wsnum="+wsnum+">Copy Worksheet to Another Customer</a>");
	if (Integer.parseInt(doGetCreateWorksheet(username))==1) 
		{
	out.println("<br><br><a href="+classdir+"UniCash?action=delwsmasterserv&wsnum="+wsnum+">Delete Worksheet from Master Server (YOU MUST HAVE INTERNET CONNECT)</a>");
		}
		con.close();

	}


private void doEditWorksheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("wsnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       	 	int crecnum = Integer.parseInt(tcustnum);
       		int wsnum = Integer.parseInt(tcontnum);
                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		int totcrewdays=0;	
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		int totshophours=0;
		double totlabor=0.00;
		double subcost=0.00;
		double subtotlabor=0.00;
		double totsubcost=0.00;

		int laborday = 16;
		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		String twsmult=null;
		String wsmult=null;
		String wsmultlab=null;
		String wsmultsub=null;
		double awsmult=0.00;
		double awsmultlab=0.00;
		double awsmultsub=0.00;
		double cost=0.00;
		int laborhours=0;
		int shophours=0;
		double laborcost=0;
		
		String investment=null;
		double qtotal=0.00;
log("Action: Enter Edit Worksheet");

                Vector vv;
                vv = UniWorksheet.getIndItem(con,crecnum,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=tt.getWsDate();
		wsdescription=tt.getWsDesc();
		wsmult=tt.getWsMult();
		wsmultlab=tt.getWsMultLab();
		wsmultsub=tt.getWsMultSub();
	}
log("Action: Get worksheet information");
	if (Double.parseDouble(wsmult)!=0.00) {
       		 awsmult = Double.parseDouble(wsmult);
		}
	else {
		awsmult = doGetMarkUpDiv();
	
	}

log("Action: Part markup = "+awsmult+"");
	if (Double.parseDouble(wsmultlab)!=0.00) {
       		 awsmultlab = Double.parseDouble(wsmultlab);
		}
	else {
		awsmultlab = doGetMarkUpDiv();
	}

log("Action:  labor markup = "+awsmultlab+"");
	if (Double.parseDouble(wsmultsub)!=0.00) {
       		 awsmultsub = Double.parseDouble(wsmultsub);
		}
	else {
		awsmultsub = doGetMarkUpDiv();
	}
log("Action:  sub  markup = "+awsmultsub+"");
log("Action: Edit Worksheet missing items");
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Worksheet</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateworksheet&custnum="+crecnum+"\" name=\"addcust\">");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"wsdate\" value=\""+doFormatDate(getDate(wsdate))+"\"></td>");
	out.println("</tr>");
	out.println("<tr><td>Parts MarkUp</td><td>");
	out.println("<input type=\"text\" name=\"wsmult\" value=\""+awsmult+"\" size=\"60\" ></td>");
	out.println("</tr>");
	out.println("<tr><td>Labor MarkUp</td><td>");
	out.println("<input type=\"text\" name=\"wsmultlab\" value=\""+awsmultlab+"\" size=\"60\" ></td>");
	out.println("</tr>");
	out.println("<tr><td>Subs MarkUp</td><td>");
	out.println("<input type=\"text\" name=\"wsmultsub\" value=\""+awsmultsub+"\" size=\"60\" ></td>");
	out.println("</tr>");
	out.println("<tr><td>Summary</td><td>");
	out.println("<input type=\"text\" name=\"wsdescription\" value=\""+wsdescription +"\" size=\"60\" ></td>");
	out.println("</tr>");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\">");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<input type=\"hidden\" name=\"contnum\" value=\""+wsnum+"\">");
	out.println("</table>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER></form>");
log("Action: Form complete");
	out.println("<br><br><br><table border=\"1\" width=\"100%\">");
	out.println("<tr><th>Item Name</th><th>Keycode<br>Part #</th><th>Quantity</th><th>Price</th><th>Item Cost</th><th>Labor Hours</th><th>Shop Hours</th><th>Labor Cost</th><th>Sub Cost</th><th>Delete</th></tr>");
log("Action: Edit Worksheet Top Items");
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		cost = tp.getWsCost();
		laborhours = tp.getWsLaborHours();
		subcost=tp.getWsSubCost();
		shophours = tp.getWsShopHours();
		laborcost = tp.getWsLaborCost();
		double subtot=cost*quantity;
		subtotlabor=(shophours+laborhours)*laborcost;

		totinvestment=totinvestment+subtot;
		totlabor = totlabor+subtotlabor;
		totlaborhours = totlaborhours+laborhours;
		totsubcost=totsubcost+subcost;
		totshophours = totshophours+shophours;
		totcrewdays = totlaborhours / laborday;
		
		out.println("<tr><td><a href=\""+classdir+"UniCash?action=editwsitem&custnum="+crecnum+"&wsnum="+wsrec+"&itemrec="+itemrec+"\">"+item+"</a></td><td>"+keycode+"</td><td>"+quantity+"</td><td>"+NumberFormat.getCurrencyInstance().format(cost)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td>"+laborhours+"</td><td>"+shophours+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtotlabor)+"</td><td>"+NumberFormat.getCurrencyInstance().format(subcost)+"</td><td><a href="+classdir+"UniCash?action=delwsitem&custnum="+crecnum+"&wsrec="+wsrec+"&itemrec="+itemrec+">Delete</a></td></tr>");
		}
		double partmarkup = totinvestment * doGetPartMult();
		// HERE IS ADJUSTED LABOR HOUTS
		double adjtotlabor = (totlaborhours + totshophours) * doGetLabMult();
		//double fsellprice = (totlabor+partmarkup)/awsmult;
		double laborsellprice = (laborcost*adjtotlabor)/awsmultlab;
		double subsellprice = totsubcost/awsmultsub;
		double partsellprice = partmarkup/awsmult;
		double fsellprice = laborsellprice+partsellprice+subsellprice;
		double lsellprice = (totlabor*doGetGpToLabor())+totlabor+partmarkup;
		totcrewdays = totlaborhours / laborday;
	out.println("</table><br><h4>Summary Section</h4>");

	out.println("<table width=\"75%\" border=1>");
	
	out.println("<tr><td>");
	out.println("Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Total Field Labor Hours</td><td>"+ totlaborhours+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Total Shop Hours</td><td>"+ totshophours+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Adjusted Labor Hours (x"+doGetLabMult()+")</td><td>"+ adjtotlabor+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Labor Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Sub Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totsubcost)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("<b>Total Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(adjtotlabor*laborcost+partmarkup+totsubcost)+"</b>");
	out.println("</td></tr></table>");

	//out.println("<tr><td>");
	//out.println("<b>Total Cost / "+awsmult+"</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	//out.println("</td></tr>");

/*
	out.println("<tr><td>");
	out.println("Sell Price-Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice-partmarkup-totlabor)+"");
	out.println("</td></tr>");

	out.println("<tr><td>");
	out.println("Labor Ratio</td><td>"+ ((fsellprice-(partmarkup+totlabor))/totlabor)+"");
	out.println("</td></tr>");


	out.println("<tr><td>");
	out.println("<b>Total Labor x "+doGetGpToLabor()+"+Direct Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	
	if (lsellprice > fsellprice) {
	out.println("<tr><td>");
	out.println("<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(lsellprice)+"</b>");
	out.println("</td></tr>");
	} else {
*/
	
	out.println("<br><br>");
	out.println("<table width=\"75%\" border=1>");
	out.println("<tr><td>");
	out.println("<b>Parts Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(partsellprice)+"</b>");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("<b>Labor Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(laborsellprice)+"</b>");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("<b>Subs Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(subsellprice)+"</b>");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("<b>Sellprice</td><td>"+ NumberFormat.getCurrencyInstance().format(fsellprice)+"</b>");
	out.println("</td></tr>");
//	}

	out.println("</table><br>");
	
/*
	out.println("<h4>Labor Check Summary Section</h4>");
	out.println("<table width=\"75%\" border=1>");
	out.println("<tr><td>");
	out.println("Total Part Cost</td><td>"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Parts x "+doGetPartMult()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(partmarkup)+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Labor Hours</td><td>"+ totlaborhours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Shop Hours</td><td>"+ totshophours+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Total Crew Days</td><td>"+ totcrewdays+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("Crew Days x "+doGetCrewBillable()+"</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable())+"");
	out.println("</td></tr>");
	out.println("<tr><td>");
	out.println("ISL Sell Price</td><td>"+ NumberFormat.getCurrencyInstance().format(totcrewdays*doGetCrewBillable()+partmarkup)+"");
	out.println("</td></tr>");
	out.println("</table><br>");
*/
	out.println("<br><br><a href="+classdir+"UniCash?action=addwsitem&custnum="+crecnum+"&wsnum="+wsnum+">Add Item to Worksheet Manually</a>");
	out.println("<br><br><a href="+classdir+"UniCash?action=pkgcatlist&custnum="+crecnum+"&wsnum="+wsnum+">Add Package to Worksheet</a>");
	out.println("<br><br><a href="+classdir+"UniCash?action=wskeycodelookup&custnum="+crecnum+"&wsnum="+wsnum+">Add Item to Worksheet From Inventory</a>");
	out.println("<br><br><a href="+classdir+"UniCash?action=wstoproposal&custnum="+crecnum+"&wsnum="+wsnum+"&fsellprice="+fsellprice+"&lsellprice="+lsellprice+">Transfer To Proposal</a>");
	out.println("<br><br><a href="+classdir+"UniCash?action=wstoproposalopt&custnum="+crecnum+"&wsnum="+wsnum+"&fsellprice="+fsellprice+"&lsellprice="+lsellprice+">Transfer To Proposal as Option</a>");
	out.println("<br><br><a href="+classdir+"UniCash?action=wstoservproposal&custnum="+crecnum+"&wsnum="+wsnum+"&fsellprice="+fsellprice+"&lsellprice="+lsellprice+">Transfer To Service Proposal</a>");
	out.println("<br><br><a href="+classdir+"UniCash?action=copyws&custnum="+crecnum+"&wsnum="+wsnum+">Copy Worksheet</a>");
	out.println("<br><br><a href="+classdir+"UniCash?action=copywsnewcus&custnum="+crecnum+"&wsnum="+wsnum+">Copy Worksheet to Another Customer</a>");
	if (Integer.parseInt(doGetCreateWorksheet(username))==1) 
		{
	out.println("<br><br><a href="+classdir+"UniCash?action=copywsmasterserv&wsnum="+wsnum+"&custnum="+crecnum+">Copy Worksheet to Master Server (YOU MUST HAVE INTERNET CONNECT)</a>");
		}

		con.close();
	}


private void doCopyMasterWsCusSelect(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String custnum = req.getParameter("custnum");
		String twsnum = req.getParameter("wsnum");
       		int wsnum = Integer.parseInt(twsnum);
	out.println("<br>Select customer to copy to<br><br>");

	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=a&custstop=b&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers A</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=b&custstop=c&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers B</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=c&custstop=e&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers C-D</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=e&custstop=g&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers E-F</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=g&custstop=i&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers G-H</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=i&custstop=l&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers I-K</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=l&custstop=m&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers L</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=m&custstop=n&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers M</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=n&custstop=o&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers N</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=o&custstop=p&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers O</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=p&custstop=q&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers P</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=q&custstop=s&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers Q-R</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=s&custstop=t&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers S</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=t&custstop=u&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers T</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=masterwslistcustomers&custstart=u&custstop=ZZ&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers U-Z</a><br>");
			
		con.close();
			}

private void doCopyWsCusSelect(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String custnum = req.getParameter("custnum");
		String twsnum = req.getParameter("wsnum");
       		int crecnum = Integer.parseInt(custnum);
       		int wsnum = Integer.parseInt(twsnum);
	out.println("<br>Select customer to copy to<br><br>");

	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=a&custstop=b&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers A</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=b&custstop=c&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers B</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=c&custstop=e&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers C-D</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=e&custstop=g&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers E-F</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=g&custstop=i&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers G-H</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=i&custstop=l&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers I-K</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=l&custstop=m&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers L</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=m&custstop=n&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers M</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=n&custstop=o&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers N</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=o&custstop=p&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers O</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=p&custstop=q&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers P</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=q&custstop=s&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers Q-R</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=s&custstop=t&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers S</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=t&custstop=u&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers T</a><br>");
	out.println("&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=wslistcustomers&custstart=u&custstop=ZZ&wsnum="+wsnum+"&custnum="+custnum+" target=phpmain>Customers U-Z</a><br>");
			
		con.close();
			}
		 
private void doCopyWsMasterServ(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

		Connection con2 = null;
		String dbserver=doGetMainServer();
		String dbpasswd=doGetMainPassword();
		String dbuser=doMainDbUser();
		String dbname=doMainDbName();
		String protocol = (String) config.getInitParameter("db.protocol");
		String subProtocol = (String) config.getInitParameter("db.subprotocol");
		con2 = DriverManager.getConnection(protocol+":"+subProtocol+"://"+dbserver+"/"+dbname+"?autoReconnect=true", dbuser, dbpasswd);
		String twsnum = req.getParameter("wsnum");
 		int wsnum = Integer.parseInt(twsnum);
		String tcusnum = req.getParameter("custnum");
		int crecnum = Integer.parseInt(tcusnum);

                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		String qnotes="";
		String qadditionalserv="";
		
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		int qnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		double totlabor=0.00;
		double subtotlabor=0.00;

		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		String wsmult=null;
		String wsmultsub=null;
		String wsmultlab=null;
		double cost=0.00;
		int laborhours=0;
		double subcost=0.00;
		int shophours=0;
		double laborcost=0;
		
		String investment=null;
		double qtotal=0.00;

                Vector vv;
                vv = UniWorksheet.getIndItem(con,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=tt.getWsDate();
		wsmult=tt.getWsMult();
		wsmultsub=tt.getWsMultSub();
		wsmultlab=tt.getWsMultLab();
		wsdescription=tt.getWsDesc();
		}
		UniMasterWorksheet.AddItem(con2, wsdate, wsdescription, wsmult, wsmultlab, wsmultsub);


                Vector v;
                v = UniMasterWorksheet.getMaxItem(con2);
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniMasterWorksheet t = (UniMasterWorksheet) v.elementAt(i);
		qnum=t.getWsRec();
		}

	out.println("<html>");
	out.println("Got new master worksheet number</html>");

                
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		subcost = tp.getWsSubCost();
		quantity = tp.getWsQuant();
		laborhours = tp.getWsLaborHours();
		shophours = tp.getWsShopHours();
		cost=tp.getWsCost();
		laborcost=tp.getWsLaborCost();
		String scost= ""+cost+"";
		String ssubcost = ""+subcost+"";
		String slaborcost=""+laborcost+"";
		UniMasterWsItems.AddItem(con2,qnum,item,keycode,quantity,scost,laborhours,slaborcost,shophours,ssubcost);
		}
		con.close();
		con2.close();

		res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+crecnum+"");
	out.println("<html>");
	out.println("Got to finish</html>");
		}
		 
private void doCopyMasterWstoCus(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

		String tncustnum = req.getParameter("ncustnum");
		String twsnum = req.getParameter("wsnum");
       		 int ncrecnum = Integer.parseInt(tncustnum);
       		 int wsnum = Integer.parseInt(twsnum);

                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		String qnotes="";
		String qadditionalserv="";
		
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		int qnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		double totlabor=0.00;
		double subtotlabor=0.00;

		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		String wsmult=null;
		String wsmultlab=null;
		String wsmultsub=null;
		double cost=0.00;
		int laborhours=0;
		double subcost=0.00;
		int shophours=0;
		double laborcost=0;
		
		String investment=null;
		double qtotal=0.00;

                Vector vv;
                vv = UniMasterWorksheet.getIndItem(con,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniMasterWorksheet tt = (UniMasterWorksheet) vv.elementAt(i);
		wsdate=tt.getWsDate();
		wsmult=tt.getWsMult();
		wsmultlab=tt.getWsMult();
		wsmultsub=tt.getWsMult();
		wsdescription=tt.getWsDesc();
		}
	String custsite = doGetCustSite(ncrecnum);
	String sitenum = doGetSiteNum(ncrecnum);
	int servsync=0;
	String login=(String)session.getAttribute("login");
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	//formatter = new SimpleDateFormat("MM-dd-yyyy");
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
		UniWorksheet.AddItem(con, ncrecnum, s, wsdescription, wsmult, custsite, sitenum, login, servsync, wsmultlab, wsmultsub);


                Vector v;
                v = UniWorksheet.getMaxItem(con);
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniWorksheet t = (UniWorksheet) v.elementAt(i);
		qnum=t.getWsRec();
		}

	out.println("<html>");
	out.println("Got new worksheet number</html>");

                
		Vector vp;
                vp = UniMasterWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniMasterWsItems tp = (UniMasterWsItems) vp.elementAt(j);
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		laborhours = tp.getWsLaborHours();
		shophours = tp.getWsShopHours();
		cost=tp.getWsCost();
		laborcost=tp.getWsLaborCost();
		subcost=tp.getWsSubCost();
		String scost= ""+cost+"";
		String ssubcost =""+subcost+"";
		String slaborcost=""+laborcost+"";
		UniWsItems.AddItem(con,qnum,item,keycode,quantity,scost,laborhours,slaborcost,shophours,ssubcost);
		}

		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+ncrecnum+"");
	out.println("<html>");
	out.println("Got to finish</html>");
		}
		 
private void doCopyWstoCus(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

		String tcustnum = req.getParameter("custnum");
		String tncustnum = req.getParameter("ncustnum");
		String twsnum = req.getParameter("wsnum");
       		 int crecnum = Integer.parseInt(tcustnum);
       		 int ncrecnum = Integer.parseInt(tncustnum);
       		 int wsnum = Integer.parseInt(twsnum);

                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		String qnotes="";
		String qadditionalserv="";
		
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		int qnum=0;
		double totinvestment=0.00;
		double subcost=0.00;
		int totlaborhours=0;
		double totlabor=0.00;
		double subtotlabor=0.00;

		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		String wsmult=null;
		String wsmultlab=null;
		String wsmultsub=null;
		double cost=0.00;
		int laborhours=0;
		int shophours=0;
		double laborcost=0;
		
		String investment=null;
		double qtotal=0.00;

                Vector vv;
                vv = UniWorksheet.getIndItem(con,crecnum,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=tt.getWsDate();
		wsmult=tt.getWsMult();
		wsmultlab=tt.getWsMultLab();
		wsmultsub=tt.getWsMultSub();
		wsdescription=tt.getWsDesc();
		}
	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	//formatter = new SimpleDateFormat("MM-dd-yyyy");
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
	String custsite = doGetCustSite(ncrecnum);
	String sitenum = doGetSiteNum(ncrecnum);
	int servsync=0;
	if (Double.parseDouble(wsmultlab)==0.00) {
	       wsmultlab = wsmult;
	          }

	if (Double.parseDouble(wsmultsub)==0.00) {
	       wsmultsub = wsmult;
	          }

	String login=(String)session.getAttribute("login");
		UniWorksheet.AddItem(con, ncrecnum, s, wsdescription, wsmult, custsite, sitenum, login, servsync, wsmultlab, wsmultsub);


                Vector v;
                v = UniWorksheet.getMaxItem(con);
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniWorksheet t = (UniWorksheet) v.elementAt(i);
		qnum=t.getWsRec();
		}

	out.println("<html>");
	out.println("Got new worksheet number</html>");

                
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		laborhours = tp.getWsLaborHours();
		subcost = tp.getWsSubCost();
		shophours = tp.getWsShopHours();
		cost=tp.getWsCost();
		laborcost=tp.getWsLaborCost();
		String scost= ""+cost+"";
		String ssubcost=""+subcost+"";
		String slaborcost=""+laborcost+"";
		UniWsItems.AddItem(con,qnum,item,keycode,quantity,scost,laborhours,slaborcost,shophours,ssubcost);
		}

		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+ncrecnum+"");
	out.println("<html>");
	out.println("Got to finish</html>");
		}

private void doCopyWs(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

		String tcustnum = req.getParameter("custnum");
		String twsnum = req.getParameter("wsnum");
       		 int crecnum = Integer.parseInt(tcustnum);
       		 int wsnum = Integer.parseInt(twsnum);

                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		String qnotes="";
		String qadditionalserv="";
		
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		int qnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		double totlabor=0.00;
		double subtotlabor=0.00;

		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		String wsmult=null;
		String wsmultlab=null;
		String wsmultsub=null;
		double cost=0.00;
		int laborhours=0;
		int shophours=0;
		double subcost=0;
		double laborcost=0;
		
		String investment=null;
		double qtotal=0.00;

	Format formatter;	
	Calendar now = Calendar.getInstance();
        Date date = new Date(); 
	//formatter = new SimpleDateFormat("MM-dd-yyyy");
	formatter = new SimpleDateFormat("yyyy-MM-dd");
	String s = formatter.format(date);
                Vector vv;
                vv = UniWorksheet.getIndItem(con,crecnum,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=tt.getWsDate();
		wsmult=tt.getWsMult();
		wsmultlab=tt.getWsMultLab();
		wsmultsub=tt.getWsMultSub();
		wsdescription=tt.getWsDesc();
		}
	String custsite = doGetCustSite(crecnum);
	String sitenum = doGetSiteNum(crecnum);
	int servsync=0;
	String login=(String)session.getAttribute("login");
		UniWorksheet.AddItem(con, crecnum, s, wsdescription, wsmult, custsite, sitenum, login, servsync, wsmultlab, wsmultsub);


                Vector v;
                v = UniWorksheet.getMaxItem(con);
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniWorksheet t = (UniWorksheet) v.elementAt(i);
		qnum=t.getWsRec();
		}

	out.println("<html>");
	out.println("Got new worksheet number</html>");

                
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		laborhours = tp.getWsLaborHours();
		subcost = tp.getWsSubCost();
		shophours = tp.getWsShopHours();
		cost=tp.getWsCost();
		laborcost=tp.getWsLaborCost();
		String scost= ""+cost+"";
		String ssubcost=""+subcost+"";
		String slaborcost=""+laborcost+"";
		UniWsItems.AddItem(con,qnum,item,keycode,quantity,scost,laborhours,slaborcost,shophours,ssubcost);
		}

		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+crecnum+"");
	out.println("<html>");
	out.println("Got to finish</html>");
		}


private void doWsToProposal(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

		String tcustnum = req.getParameter("custnum");
		String action = req.getParameter("action");
		String twsnum = req.getParameter("wsnum");
       		 int crecnum = Integer.parseInt(tcustnum);
       		 int wsnum = Integer.parseInt(twsnum);
		String tfsellprice = req.getParameter("fsellprice");
       		 double fsellprice = Double.parseDouble(tfsellprice);
		String tlsellprice = req.getParameter("lsellprice");
       		 double lsellprice = Double.parseDouble(tlsellprice);

                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		String qnotes="";
		String qdisc="";
		String qadditionalserv="";
		
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		int qnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		int totshophours=0;
		double totlabor=0.00;
		double totsubcost=0.00;
		double subtotlabor=0.00;

		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		double cost=0.00;
		int laborhours=0;
		int shophours=0;
		double laborcost=0;
		double subcost=0.00;
		double awsmult=0.00;
		double awsmultlab=0.00;
		double awsmultsub=0.00;
		String wsmult=null;
		String wsmultlab=null;
		String wsmultsub=null;
		
		String investment=null;
		double qtotal=0.00;

                Vector vv;
                vv = UniWorksheet.getIndItem(con,crecnum,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=tt.getWsDate();
		wsdescription=tt.getWsDesc();
		wsmult=tt.getWsMult();
		wsmultlab=tt.getWsMultLab();
		wsmultsub=tt.getWsMultSub();
		}
	if (Double.parseDouble(wsmult)!=0.00) {
       		 awsmult = Double.parseDouble(wsmult);
		}
	else {
		awsmult = doGetMarkUpDiv();
	}
	if (Double.parseDouble(wsmultlab)!=0.00) {
       		 awsmultlab = Double.parseDouble(wsmultlab);
		}
	else {
		awsmultlab = awsmult;
	}
	if (Double.parseDouble(wsmultsub)!=0.00) {
       		 awsmultsub = Double.parseDouble(wsmultsub);
		}
	else {
		awsmultsub = awsmult;
	}
	String custsite = doGetCustSite(crecnum);
			String login=(String)session.getAttribute("login");
	String sitenum = doGetSiteNum(crecnum);
        	UniQuotes.AddItem(con, crecnum, wsdate, wsdescription, "50% Down - Remainder Upon Completion", qnotes, qdisc, qadditionalserv, "New", "2099-12-31", "2099-12-31", custsite, sitenum, login, 0,0);


                Vector v;
                v = UniQuotes.getMaxItem(con);
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniQuotes t = (UniQuotes) v.elementAt(i);
		qnum=t.getQuoteNum();
		}

	out.println("<html>");
	out.println("Got new quote number</html>");

                
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
		String fitem=null;
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		if (quantity>1) {
		fitem="("+quantity+") "+item+"";
		}
		else 
		{
		fitem=""+item;
		}
		cost = tp.getWsCost();
		laborhours = tp.getWsLaborHours();
		shophours = tp.getWsShopHours();
		laborcost = tp.getWsLaborCost();
		subcost=tp.getWsSubCost();
		double subtot=cost*quantity;
		subtotlabor=(shophours+laborhours)*laborcost*doGetLabMult();
		totinvestment=totinvestment+subtot;
		totsubcost=totsubcost+subcost;
		totlabor = totlabor+subtotlabor;
		totlaborhours = totlaborhours+laborhours;
		totshophours = totshophours+shophours;
		double partmarkup = subtot * doGetPartMult();
		//double ifsellprice = (subtotlabor+partmarkup)/doGetMarkUpDiv();
		double ifsellprice = (subtotlabor/awsmultlab)+(partmarkup/awsmult)+(subcost/awsmultsub);
			String techid=(String)session.getAttribute("login");
		double ilsellprice = (subtotlabor*doGetGpToLabor())+subtotlabor+partmarkup;
		//if (lsellprice > fsellprice) {
		//UniQuoteParts.AddItem(con, qnum, fitem, keycode, 1, ""+ilsellprice+"", custsite, sitenum, techid, 0);
		//} else {
		UniQuoteParts.AddItem(con, qnum, fitem, keycode, 1, ifsellprice, custsite, sitenum, techid, 0);
		//}

		}
// here we add the quote option to the option table

		if (action.equalsIgnoreCase("addoption"))
		{
		String toptquotenum = req.getParameter("optquotenum");
       		 int optquotenum = Integer.parseInt(toptquotenum);
		int printorder=1;

		UniQuoteOptions.AddItem(con, optquotenum, qnum, printorder);

		}

		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=6&custnum="+crecnum+"");


	out.println("<html>");
	out.println("Got to finish</html>");
		}

private void doAddOptionSave(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

		String toptquotenum = req.getParameter("optquotenum");
		String custnum = req.getParameter("custnum");
       		 int optquotenum = Integer.parseInt(toptquotenum);
		String tquotenum = req.getParameter("quotenum");
		String printorder = req.getParameter("printorder");
       		 int quotenum = Integer.parseInt(tquotenum);
       		 int iprintorder = Integer.parseInt(printorder);
		 iprintorder=iprintorder+1;

		UniQuoteOptions.AddItem(con, quotenum, optquotenum, iprintorder);

		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=editproposal&custnum="+custnum+"&quotenum="+quotenum+"");
			}

private void doWsToServProposal(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {

		String tcustnum = req.getParameter("custnum");
		String twsnum = req.getParameter("wsnum");
       		 int crecnum = Integer.parseInt(tcustnum);
       		 int wsnum = Integer.parseInt(twsnum);
		String tfsellprice = req.getParameter("fsellprice");
       		 double fsellprice = Double.parseDouble(tfsellprice);
		String tlsellprice = req.getParameter("lsellprice");
       		 double lsellprice = Double.parseDouble(tlsellprice);

                int counter=0;
                int ecustnum=0;
                String wsdate  = null;
                String wsdescription  = null;
		String qnotes="";
		String qdisc="";
		String qadditionalserv="";
		
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		int qnum=0;
		double totinvestment=0.00;
		int totlaborhours=0;
		int totshophours=0;
		double totlabor=0.00;
		double subtotlabor=0.00;

		int wsrec=0;
		int itemrec=0;
		String item=null;
		String keycode="";
		int quantity=0;
		double cost=0.00;
		int laborhours=0;
		int shophours=0;
		double laborcost=0;
		
		String investment=null;
		double qtotal=0.00;

                Vector vv;
                vv = UniWorksheet.getIndItem(con,crecnum,wsnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniWorksheet tt = (UniWorksheet) vv.elementAt(i);
		wsdate=tt.getWsDate();
		wsdescription=tt.getWsDesc();
		}
        	ServQuotes.AddItem(con, crecnum, wsdate, wsdescription, "50% Down - Remainder Upon Completion", qnotes,qdisc, qadditionalserv, "New", "2099-12-31", "2099-12-31");


                Vector v;
                v = ServQuotes.getMaxItem(con);
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                ServQuotes t = (ServQuotes) v.elementAt(i);
		qnum=t.getQuoteNum();
		}

	out.println("<html>");
	out.println("Got new quote number</html>");

                
		Vector vp;
                vp = UniWsItems.getAllItems(con,wsnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniWsItems tp = (UniWsItems) vp.elementAt(j);
		wsrec = tp.getWsRec();
		itemrec = tp.getItemRec();
		item = tp.getWsItem();
		keycode = tp.getWsKeyCode();
		quantity = tp.getWsQuant();
		cost = tp.getWsCost();
		laborhours = tp.getWsLaborHours();
		shophours = tp.getWsShopHours();
		laborcost = tp.getWsLaborCost();
		double subtot=cost*quantity;
		subtotlabor=(shophours+laborhours)*laborcost;
		totinvestment=totinvestment+subtot;
		totlabor = totlabor+subtotlabor;
		totlaborhours = totlaborhours+laborhours;
		totshophours = totshophours+shophours;
		double partmarkup = subtot * doGetPartMult();
		double ifsellprice = (subtotlabor+partmarkup)/doGetMarkUpDiv();
		double ilsellprice = (subtotlabor*doGetGpToLabor())+subtotlabor+partmarkup;
		if (lsellprice > fsellprice) {
		ServQuoteParts.AddItem(con, qnum, item, keycode, 1, ilsellprice);
		} else {
		ServQuoteParts.AddItem(con, qnum, item, keycode, 1, ifsellprice);
		}

		}

		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=showcustdetail&csection=5&custnum="+crecnum+"");


	out.println("<html>");
	out.println("Got to finish</html>");
		}

public void doWeeklyTimeTransmit(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
        throws Exception
        {
		//Connection con;
		String mbody="";
		mbody=ServsysPrintTimeRecap.getIndividualItem (con, req,res, out, session, username, classdir);
		
	}

public void doAutoScreens(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
        throws Exception
        {
		String mbody="";
		mbody=ServsysScreenReport.getYesterday (con, req,res, out, session, username, classdir);
	}

	
public void doAutoYesterdayTimeTransmit(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
        throws Exception
        {
		String mbody="";
		mbody=ServsysPrintTimeRecap.getYesterday (con, req,res, out, session, username, classdir);
	}

public void doAutoWeekToDateTimeTransmit(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
        throws Exception
        {
		String mbody="";
		mbody=ServsysPrintTimeRecap.getWeekToDate (con, req,res, out, session, username, classdir);
	}
public void doAutoQuarterToDateTimeTransmit(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
        throws Exception
        {
		String mbody="";
		mbody=ServsysPrintTimeRecap.getQuarterToDate (con, req,res, out, session, username, classdir);
	}
public void doAutoYearToDateTimeTransmit(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
        throws Exception
        {
		String mbody="";
		mbody=ServsysPrintTimeRecap.getYearToDate (con, req,res, out, session, username, classdir);
	}
		
private void doDailyTimeTransmit(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
throws Exception
{
Format formatter;
Calendar now = Calendar.getInstance();
Date date = new Date();
       SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
formatter = new SimpleDateFormat("yyyy-MM-dd");
String s = formatter.format(date);
String timesheetdate = formatter.format(date);
               Date expireationDate=null;
                expireationDate=dateFormatter.parse(s);
                Calendar dateToBeTested=Calendar.getInstance();
                dateToBeTested.setTime(expireationDate);
                dateToBeTested.add(Calendar.DAY_OF_YEAR,-1);
                timesheetdate = doFormatDate(dateToBeTested.getTime());
			String server = (String) config.getInitParameter("db.server");
			String database = (String) config.getInitParameter("db.database");
	
	try {
		// some sql here if needed
	}	
	catch (Exception e)
	{
		throw new ServletException(e.getMessage());
	}
	Vector u;
	String mbody="";
	doStyleSheet(req, res, out, session, username);
	mbody=combinestring(mbody,"<html><basefont size=-1>");
	mbody=combinestring(mbody,"<head><title>Time Sheet Report</title></head><body>");
	doStyleSheet(req, res, out, session, username);
	u = UniTechInfo.getAllTransmitItems(con);
	int counter=0;
	for (int iu = 0 ; iu < u.size(); iu++)
	{
		UniTechInfo tu = (UniTechInfo) u.elementAt(iu);
		String tech_init = tu.getTechInit();
		String lusername = tu.getUserName();
		String tech_name = tu.getTechName();
		String department = tu.getDepartment();
		Vector v;
		v = TimeSheetSummary.getLoginItemsSingleDate(con,lusername, doFormatDateDb(getDateDb(timesheetdate)));
		mbody=combinestring(mbody,"<table border=1 width=\"75%\" align=\"left\">");
		mbody=combinestring(mbody,"<tr><td>Tech ID: "+lusername+" - "+tech_name+"</td></tr>");
		mbody=combinestring(mbody,"</table>");		
		if (v.size()>0)
		{
			//mbody=combinestring(mbody,"");

			mbody=combinestring(mbody,"<table border=1 width=\"75%\" align=\"left\">");
			mbody=combinestring(mbody,"<tr><td>Call-Type</td><td>Count</td><td>Total-Collected</td><td>Non-Commision-Billed</td><td>Commision-Billed</td><td>Commision</td><td>Time</td><td>Time-With-Travel</td></tr>");
			for (int i = 0 ; i < v.size(); i++)
			{
				TimeSheetSummary ts = (TimeSheetSummary) v.elementAt(i);
				String tamount = ts.Amount();
				String tcamount = ts.CAmount();
				String tamount_collected = ts.AmountCollected();
				String tcommision = ts.Commision();
				String ctype=ts.CType();
				String callcount=ts.CallCount();
				String timewithtravel=ts.TimeWithTravel();
				String timenotravel=ts.TimeNoTravel();
		mbody=combinestring(mbody,"<tr><td>"+ctype+"</td><td>"+callcount+"</td><td>"+tamount_collected+"</td><td>"+tamount+"</td><td>"+tcamount+"</td><td>"+tcommision+"</td><td>"+timewithtravel+"</td><td>"+timenotravel+"</td></tr>");
			
			}
			mbody=combinestring(mbody,"</table>");
			//mbody=combinestring(mbody,"</p></html>");
		}
		else {
			mbody=combinestring(mbody,"<table border=0 width=\"75%\" align=\"left\">");
			mbody=combinestring(mbody,"<tr><td>**NO DATA TRANSMITTED</td></tr></table>");
			
		}
		mbody=combinestring(mbody,"<table border=0 width=\"75%\" align=\"left\">");
		mbody=combinestring(mbody,"<tr><td> </td></tr></table>");
	}
	
	//mbody=combinestring(mbody,"</font></html>");
	
	////////////////////////////////////////////////////////
	// Here is where we end the http headers
	////////////////////////////////////////////////////////
	//String newstring = mbody.replaceAll("<br>","\n");
	out.println(mbody);
	mbody="";
	
}



private void doEditProposal(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("quotenum");
		String custstart = req.getParameter("custstart");
		String action = req.getParameter("action");
		String custstop = req.getParameter("custstop");
       		 int crecnum = Integer.parseInt(tcustnum);
       		 int quotenum = Integer.parseInt(tcontnum);
		int printorder=0;
               int counter=0;
                int ecustnum=0;
                String qdate  = null;
		String qstatus="-";
                String qdescription  = null;
                String qpayterms  = null;
                String qnotes  = null;
		String qdisc = null;
                String qadditionalserv  = null;
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		double totinvestment=0.00;
		double subtot=0.00;
		String investment=null;
		String solddate=null;
		String jobnum=null;
		String antstart=null;
		int combineopts=0;
		String scombineopts=null;
		double qtotal=0.00;
                Vector vv;
		if (action.equalsIgnoreCase("editproposal"))
		{
                vv = UniQuotes.getIndItem(con,crecnum,quotenum);
		}
		//if (action.equalsIgnoreCase("editservproposal"))
		else
		{
                vv = ServQuotes.getIndItem(con,crecnum,quotenum);
		}
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
		if (action.equalsIgnoreCase("editproposal"))
		{
                UniQuotes tt = (UniQuotes) vv.elementAt(i);
		qdate=tt.getQDate();
		qdescription=tt.getQDescription();
		qnotes=tt.getQNotes();
		qdisc=tt.getQDisc();
		qpayterms=tt.getQPayterms();
		qstatus=tt.getQStatus();
		qadditionalserv=tt.getQAdditionalServ();
		antstart=tt.getQAntStart();
		jobnum=tt.getQJobNum();
		solddate=tt.getQSoldDate();
		combineopts=tt.getCombineOpts();
		if (combineopts==1)
			{
			scombineopts=null;
			} else {
			scombineopts="0";
			}
		}
		if (action.equalsIgnoreCase("editservproposal"))
		{
                ServQuotes tt = (ServQuotes) vv.elementAt(i);
		qdate=tt.getQDate();
		qdescription=tt.getQDescription();
		qnotes=tt.getQNotes();
		qdisc=tt.getQDisc();
		qpayterms=tt.getQPayterms();
		qstatus=tt.getQStatus();
		qadditionalserv=tt.getQAdditionalServ();
		antstart=tt.getQAntStart();
		jobnum=tt.getQJobNum();
		solddate=tt.getQSoldDate();
		}
	}

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Proposal</title>");
	out.println("</head>");
		if (action.equalsIgnoreCase("editproposal"))
		{
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateproposal&custnum="+crecnum+"\" name=\"addcust\">");
		}
		if (action.equalsIgnoreCase("editservproposal"))
		{
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateservproposal&custnum="+crecnum+"\" name=\"addcust\">");
		}
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"qdate\" value=\""+doFormatDate(getDate(qdate))+"\"></td>");
	out.println("</tr>");
	out.println("<tr><td>Summary</td><td>");
	out.println("<input type=\"text\" name=\"qdescription\" value=\""+qdescription +"\" size=\"60\" ></td>");
	out.println("</tr>");
		if (action.equalsIgnoreCase("editproposal"))
		{
	out.println("<tr><td>Combine Options</td><td>");
	if (combineopts==0)
		{
	out.println("<input type=\"checkbox\" name=\"combineopts\" value="+scombineopts +"></td></tr>");
		} else {
	out.println("<input type=\"checkbox\" name=\"combineopts\" value="+scombineopts +" checked></td></tr>");
	}
		}
	out.println("<tr><td>Payment Terms</td><td>");
	out.println("<input type=\"text\" name=\"qpayterms\" value=\""+qpayterms +"\" size=\"60\"></td></tr>");
		if (action.equalsIgnoreCase("editproposal"))
		{
	out.println("<tr><td>Additional Services</td><td>");
	out.println("<textarea name=\"qadditionalserv\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+qadditionalserv+"</textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Job Description for Installation:</td><td>");
	out.println("<textarea name=\"qnotes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+qnotes+"</textarea>");
		}
		if (action.equalsIgnoreCase("editservproposal"))
		{
	out.println("<tr><td>Call Slip:</td><td>");
	out.println("<input type=\"text\" name=\"qadditionalserv\" value=\""+qadditionalserv +"\" size=\"60\"></td></tr>");
	out.println("</td></tr>");
	out.println("<tr><td>Date of Service Call:</td><td>");
	out.println("<input type=\"text\" name=\"qnotes\" value=\""+qnotes +"\" size=\"60\"></td></tr>");
		}
	out.println("</td></tr>");
	out.println("<tr><td>Disclaimers</td><td>");
	out.println("<textarea name=\"qdisc\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+qdisc+"</textarea>");
	out.println("</td></tr>");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\">");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<input type=\"hidden\" name=\"contnum\" value=\""+quotenum+"\">");


	out.println("</tr>");
	out.println("<tr><td>Sold Date:</td><td>");
	out.println("<input type=\"text\" name=\"solddate\" value=\""+doFormatDate(getDate(solddate)) +"\" size=\"60\"></td></tr>");
//
	out.println("</tr>");
	out.println("<tr><td>Job Number:</td><td>");
	out.println("<input type=\"text\" name=\"jobnum\" value=\""+jobnum +"\" size=\"60\"></td></tr>");

	out.println("</tr>");
	out.println("<tr><td>Anticipated Start Date:</td><td>");
	out.println("<input type=\"text\" name=\"antstart\" value=\""+doFormatDate(getDate(antstart)) +"\" size=\"60\"></td></tr>");
		out.println("<tr>");
		out.println("<td width=\"40%\">Current Status:</td>");
		out.println("<td width=\"50%\" align=\"left\"><select align=\"left\" width=\"50\" name=\"qstatus\" value=\""+qstatus +"\">");
                Vector v = SupStatus.getAllItems(con);
		out.println("<option value=\""+qstatus+"\">"+qstatus+"</option>");
		out.println("<option value=\"-\">-</option>");
		counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                SupStatus t = (SupStatus) v.elementAt(i);
		out.println("<option value="+t.QStatus()+">"+t.QStatus()+"</option>");
		}
		out.println("</select></td></tr>");
		
	out.println("</table>");



	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER></form>");
	out.println("<br><br><br><table border=\"1\" width=\"100%\">");
	out.println("<tr><th>Item Name</th><th>Model</th><th>Quantity</th><th>Price</th><th>Subtotal</th><th>Delete</th></tr>");
                Vector vp;
		if (action.equalsIgnoreCase("editproposal"))
		{
                vp = UniQuoteParts.getAllItems(con,quotenum);
		}
		//if (action.equalsIgnoreCase("editservproposal"))
		else
		{
                vp = ServQuoteParts.getAllItems(con,quotenum);
		}
                for (int j = 0 ; j < vp.size(); j++)
                {
		if (action.equalsIgnoreCase("editproposal"))
		{
                UniQuoteParts tp = (UniQuoteParts) vp.elementAt(j);
		qpartnum=tp.getQPartnum();
		itemname=tp.getItemName();
		mannum=tp.getManNum();
		itemquant=tp.getItemQuant();
		investment=tp.getInvestment();
		qtotal=tp.getQuoteTotal();
		subtot=Double.parseDouble(tp.getInvestment())*itemquant;
		totinvestment=totinvestment+subtot;
		}
		if (action.equalsIgnoreCase("editservproposal"))
		{
                ServQuoteParts tp = (ServQuoteParts) vp.elementAt(j);
		qpartnum=tp.getQPartnum();
		itemname=tp.getItemName();
		mannum=tp.getManNum();
		itemquant=tp.getItemQuant();
		investment=tp.getInvestment();
		qtotal=tp.getQuoteTotal();
		subtot=Double.parseDouble(tp.getInvestment())*itemquant;
		totinvestment=totinvestment+subtot;
		}
		if (action.equalsIgnoreCase("editproposal"))
		{
		out.println("<tr><td>"+itemname+"</td><td>"+mannum+"</td><td>"+itemquant+"</td><td>"+investment+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td><a href="+classdir+"UniCash?action=delproposalitem&custnum="+crecnum+"&quotenum="+quotenum+"&itemnum="+qpartnum+">Delete</a></td></tr>");
		}
		if (action.equalsIgnoreCase("editservproposal"))
		{
		out.println("<tr><td>"+itemname+"</td><td>"+mannum+"</td><td>"+itemquant+"</td><td>"+investment+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td><a href="+classdir+"UniCash?action=delservproposalitem&custnum="+crecnum+"&quotenum="+quotenum+"&itemnum="+qpartnum+">Delete</a></td></tr>");
		}
		}
	out.println("</table>");

	out.println("<h4>Total Investment is"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"</h4><br>");

		if (action.equalsIgnoreCase("editproposal"))
		{
	out.println("<a href="+classdir+"UniCash?action=addquoteitemmenu&custnum="+crecnum+"&quotenum="+quotenum+">Add Item to Quote</a>");
		}
//SHOW OPTIONS
		if (action.equalsIgnoreCase("editproposal"))
		{
		out.println("<h4>Options Assigned to Proposal</h4>");

	out.println("<table border=\"1\" width=\"100%\">");
	out.println("<tr><th>Proposal Number</th><th>Description</th><th>Price</th><th>Print<br>Order</th><th>Delete</th><td></td><td></td></tr>");

                Vector vo;
                vo = UniQuoteOptions.getAllItems(con,quotenum);
                for (int jo = 0 ; jo < vo.size(); jo++)
                {
                UniQuoteOptions to = (UniQuoteOptions) vo.elementAt(jo);
		int quoteoption = to.getQuoteOption();
		printorder=to.getPrintOrder();	

                Vector vvo;
                vvo = UniQuotes.getIndItem(con,crecnum,quoteoption);
                for (int jb = 0 ; jb < vvo.size(); jb++)
                {
                UniQuotes tbo = (UniQuotes) vvo.elementAt(jb);
		qdescription=tbo.getQDescription();
		}
		double ototinvestment=0.00;
                Vector vpo;
                vpo = UniQuoteParts.getAllItems(con,quoteoption);
                for (int jj = 0 ; jj < vpo.size(); jj++)
                {
                UniQuoteParts tp = (UniQuoteParts) vpo.elementAt(jj);
		double optotal=tp.getQuoteTotal();
		ototinvestment=ototinvestment+optotal;
		}
	out.println("<tr><td>"+quoteoption+"</td><td>"+qdescription+"</td><td>"+NumberFormat.getCurrencyInstance().format(ototinvestment)+"</td><td>"+printorder+"</td><td><a href="+classdir+"UniCash?action=deloption&custnum="+crecnum+"&oquotenum="+quoteoption+"&quotenum="+quotenum+">Delete</a></td><td><a href="+classdir+"UniCash?action=upprintorder&custnum="+crecnum+"&oquotenum="+quoteoption+"&quotenum="+quotenum+"&printorder="+printorder+">Move<br>Up</a></td><td><a href="+classdir+"UniCash?action=downprintorder&custnum="+crecnum+"&oquotenum="+quoteoption+"&quotenum="+quotenum+"&printorder="+printorder+">Move<br>Down</a></td></tr>");
		}
	out.println("</table>");

	out.println("<br><a href="+classdir+"UniCash?action=addoptiontoquote&custnum="+crecnum+"&quotenum="+quotenum+"&printorder="+printorder+">Add Option to Quote</a>");
		}

		if (action.equalsIgnoreCase("editservproposal"))
		{
	out.println("<br><br><a href="+classdir+"UniCash?action=addservquoteitemmenu&custnum="+crecnum+"&quotenum="+quotenum+">Add Item to Quote</a>");
		}
	out.println("<br><br><a href="+classdir+"UniCash?action=printjobflow&custnum="+crecnum+"&quotenum="+quotenum+" target=_blank>Print Job Flow Worksheet</a>");
	out.println("<br><a href="+classdir+"UniCash?action=emailjobflow&custnum="+crecnum+"&quotenum="+quotenum+" target=_blank>Email Job Flow Worksheet</a>");
		con.close();
	}

private void doShowQuoteCatListMenu(HttpServletRequest req, HttpServletResponse res, PrintWriter out, String username)
                throws Exception
        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("quotenum");
		String custstart = req.getParameter("custstart");
		String action = req.getParameter("action");
		String custstop = req.getParameter("custstop");
       		 int crecnum = Integer.parseInt(tcustnum);
       		 int quotenum = Integer.parseInt(tcontnum);
		String tcatnum=req.getParameter("catnum");
		int catnum = Integer.parseInt(tcatnum);
		String tquant=null;
		String itemname=null;
		int itemnum=0;
		String investment=null;
		String mannum=null;
		out.println("<table width=\"100%\" border=0>");
		out.println("<tr><td align=left>");
		if (action.equalsIgnoreCase("showquotecatitemsmenu"))
		{
		out.println("<a href=\""+ classdir + "UniCash?action=addquoteitemmenu&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop+"\">Return To Category List</a><br><br>");
		}
		if (action.equalsIgnoreCase("showservquotecatitemsmenu"))
		{
		out.println("<a href=\""+ classdir + "UniCash?action=addservquoteitemmenu&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop+"\">Return To Category List</a><br><br>");
		}
		out.println("</td></tr></table>");
        	out.println("<table border=1 width=100%>");
                out.println("<th>Item Name</th><th>Model Number</th><th>Investment</th>");
		int counter=0;


                Vector v;
                v = UniQuoteItem.getAllItems(con,catnum);

                        mannum =null;
			investment=null;
			itemname=null;
			int qcatnum=0;
			itemnum=0;

                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniQuoteItem t = (UniQuoteItem) v.elementAt(i);
			itemnum  = t.getItemNum();
			qcatnum  = t.getCatNum();
                        itemname = t.getItemName();
			mannum = t.getManNum();
			investment = t.getInvestment();
		if (action.equalsIgnoreCase("showquotecatitemsmenu"))
			{
		out.println("<tr><td><a a href="+classdir+"UniCash?action=addproposalitem&itemnum="+itemnum+"&catnum="+qcatnum+"&custstart="+custstart+"&custstop="+custstop+"&custnum="+crecnum+"&quotenum="+quotenum+">"+itemname+"</a></td><td>"+mannum+"</td><td>"+investment+"</td><tr>");
		}
		if (action.equalsIgnoreCase("showservquotecatitemsmenu"))
			{
		out.println("<tr><td><a a href="+classdir+"UniCash?action=addservproposalitem&itemnum="+itemnum+"&catnum="+qcatnum+"&custstart="+custstart+"&custstop="+custstop+"&custnum="+crecnum+"&quotenum="+quotenum+">"+itemname+"</a></td><td>"+mannum+"</td><td>"+investment+"</td><tr>");
		}

		}

	out.println("</table>");
		if (action.equalsIgnoreCase("showquotecatitemsmenu"))
		{
		out.println("<a href=\""+ classdir + "UniCash?action=addquoteitemmenu&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop+"\">Return To Category List</a><br><br>");
		}
		if (action.equalsIgnoreCase("showservquotecatitemsmenu"))
		{
		out.println("<a href=\""+ classdir + "UniCash?action=addservquoteitemmenu&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop+"\">Return To Category List</a><br><br>");
		}
		con.close();
	}



  private void doAddQuoteItemMenu(HttpServletRequest req, HttpServletResponse res, PrintWriter out,HttpSession session, String username)
                throws Exception
        {

		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("quotenum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String action = req.getParameter("action");
       		int crecnum = Integer.parseInt(tcustnum);
       		int quotenum = Integer.parseInt(tcontnum);
               	int counter=0;
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		String investment=null;;
		double qtotal=0.00;
		double totinvestment=0.00;
                out.println("<html><head><title>Quote Category Menu</title></head><body>");
			if (action.equalsIgnoreCase("addquoteitemmenu"))
	                        {
	out.println("<br><br><a href="+classdir+"UniCash?action=editproposal&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop+">Return To Proposal</a><br><br>");
				}
			if (action.equalsIgnoreCase("addservquoteitemmenu"))
	                        {
	out.println("<br><br><a href="+classdir+"UniCash?action=editservproposal&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop+">Return To Proposal</a><br><br>");
				}
	
			if (action.equalsIgnoreCase("addservquoteitemmenu"))
	                        {
		int catnum=0;
		String category="";
                Vector v;
                v = FlatRateCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	FlatRateCat t = (FlatRateCat) v.elementAt(i);
                      	catnum = t.getCatnum();
                        category = t.Category();
                out.println("<a href="+classdir+"UniCash?action=showservpchargeselect&servicestart=a&serviceend=d&custnum="+crecnum+"&quotenum="+quotenum+"&psource=addservquoteitemmenu&catnum="+catnum+" target=phpmain>"+category+"</a><br>");
                }
                out.println("<br><br><br>");
				} else
				{
		int catnum=0;
		String category="";
                Vector v;
                v = FlatRateCat.getAllItems(con);
                for (int i = 0 ; i < v.size(); i++)
                {
                       	FlatRateCat t = (FlatRateCat) v.elementAt(i);
                      	catnum = t.getCatnum();
                        category = t.Category();
                out.println("<a href="+classdir+"UniCash?action=showservpchargeselect&servicestart=a&serviceend=d&custnum="+crecnum+"&quotenum="+quotenum+"&psource=addquoteitemmenu&catnum="+catnum+" target=phpmain>"+category+"</a><br>");
                }
                out.println("<br><br><br>");



				}

                Vector vp;
		if (action.equalsIgnoreCase("addquoteitemmenu"))
	                        {
                vp = UniQuoteParts.getAllItems(con,quotenum);
				}
		else
	                        {
                vp = ServQuoteParts.getAllItems(con,quotenum);
				}
		//out.println("<br>number rows  = "+vp.size());
	out.println("<br><br><br><table border=\"1\" width=\"100%\">");
	out.println("<tr><th>Item Name</th><th>Model</th><th>Quantity</th><th>Price</th><th>Subtotal</th><th>Delete</th></tr>");
		totinvestment=0.00;

		if (action.equalsIgnoreCase("addquoteitemmenu"))
	                        {
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniQuoteParts tp = (UniQuoteParts) vp.elementAt(j);
		qpartnum=tp.getQPartnum();
		itemname=tp.getItemName();
		mannum=tp.getManNum();
		itemquant=tp.getItemQuant();
		//investment=NumberFormat.getCurrencyInstance().format(tp.getInvestment());
		investment=tp.getInvestment();
		double subtot=Double.parseDouble(tp.getInvestment())*itemquant;
		qtotal=tp.getQuoteTotal();
		totinvestment=totinvestment+subtot;
		out.println("<tr><td>"+itemname+"</td><td>"+mannum+"</td><td>"+itemquant+"</td><td>"+investment+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td><a href="+classdir+"UniCash?action=delproposalitem&custnum="+crecnum+"&quotenum="+quotenum+"&itemnum="+qpartnum+">Delete</a></td></tr>");
		}
		}

		if (action.equalsIgnoreCase("addservquoteitemmenu"))
	                        {
                for (int j = 0 ; j < vp.size(); j++)
                {
                ServQuoteParts tp = (ServQuoteParts) vp.elementAt(j);
		qpartnum=tp.getQPartnum();
		itemname=tp.getItemName();
		mannum=tp.getManNum();
		itemquant=tp.getItemQuant();
		//investment=NumberFormat.getCurrencyInstance().format(tp.getInvestment());
		investment=tp.getInvestment();
		double subtot=Double.parseDouble(tp.getInvestment())*itemquant;
		qtotal=tp.getQuoteTotal();
		totinvestment=totinvestment+subtot;
		out.println("<tr><td>"+itemname+"</td><td>"+mannum+"</td><td>"+itemquant+"</td><td>"+investment+"</td><td>"+NumberFormat.getCurrencyInstance().format(subtot)+"</td><td><a href="+classdir+"UniCash?action=delservproposalitem&custnum="+crecnum+"&quotenum="+quotenum+"&itemnum="+qpartnum+">Delete</a></td></tr>");
		}
		}

	out.println("</table>");

	out.println("<h4>Total Investment is"+ NumberFormat.getCurrencyInstance().format(totinvestment)+"</h4><br>");

			if (action.equalsIgnoreCase("addquoteitemmenu"))
	                        {
	out.println("<br><br><a href="+classdir+"UniCash?action=editproposal&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop+">Return To Proposal</a><br><br>");
				}
			if (action.equalsIgnoreCase("addservquoteitemmenu"))
	                        {
	out.println("<br><br><a href="+classdir+"UniCash?action=editservproposal&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop+">Return To Proposal</a><br><br>");
				}
		con.close();
        }

  private void doAddProposalItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {

		String tcustnum = req.getParameter("custnum");
		String psource = req.getParameter("psource");
		String tcontnum = req.getParameter("quotenum");
		String custstart = req.getParameter("custstart");
		String action = req.getParameter("action");
		String custstop = req.getParameter("custstop");
		String srecnum = req.getParameter("srecnum");
       		int crecnum = Integer.parseInt(tcustnum);
       		int quotenum = Integer.parseInt(tcontnum);
		String tcatnum=req.getParameter("catnum");
		int catnum = Integer.parseInt(tcatnum);
		String titemnum = req.getParameter("itemnum");
		String camount= req.getParameter("camount");
		int itemnum=Integer.parseInt(titemnum);
               
		String itemname=null;
		String investment=camount;
		String mannum=null;
		if (titemnum.equalsIgnoreCase("99999"))
	                        {
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT part FROM flat_rate_table where code="+srecnum+"");
		 while(rs.next())
                {
                    itemname=rs.getString("part");
		    mannum = "";
		} 
		}
		else {

		Vector v;

                v = UniQuoteItem.getIndividualItems(con,itemnum);

		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	UniQuoteItem t = (UniQuoteItem) v.elementAt(i);
			itemnum  = t.getItemNum();
			catnum  = t.getCatNum();
                        itemname = t.getItemName();
			mannum = t.getManNum();
			investment = t.getInvestment();
		}
		}

out.println("<html>");
out.println("<head>");
out.println("<title>Add Proposal Item</title>");
out.println("</head>");
			if (psource.equalsIgnoreCase("addquoteitemmenu")) {
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveproposalitem \" name=\"addtime\">");
			}
			else if (action.equalsIgnoreCase("addproposalitem"))
	                        {
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveproposalitem \" name=\"addtime\">");
				}
			else if (action.equalsIgnoreCase("addservproposalitem"))
	                        {
out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveservproposalitem \" name=\"addtime\">");
				}
out.println("<p>Item Name        :");
out.println("<input type=\"text\" name=\"itemname\" value=\""+ itemname +"\">");
out.println("</p>");
out.println("<p>Model Number     :");
out.println("<input type=\"text\" name=\"mannum\" value=\""+mannum  +"\"  > ");
out.println("</p>");
out.println("<p>Investment       :");
out.println("<input type=\"text\" name=\"investment\" value=\""+investment +"\">");
out.println("</p>");
out.println("<p>Quantity       :");
out.println("<input type=\"text\" name=\"itemquant\" value=\"1\">");
out.println("</p>");
out.println("<input type=\"hidden\" name=\"itemnum\" value="+itemnum+">");
out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\">");
out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
out.println("<input type=\"hidden\" name=\"contnum\" value=\""+quotenum+"\">");
out.println("<input type=\"hidden\" name=\"custnum\" value=\""+crecnum+"\">");
out.println("<input type=\"hidden\" name=\"quotenum\" value=\""+quotenum+"\">");
out.println("<input type=\"hidden\" name=\"psource\" value=\""+psource+"\">");
out.println("<p> <CENTER>");
out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
out.println("<INPUT TYPE=\"reset\">");
out.println("</CENTER>");
		con.close();
	}


private void doDelWsItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("wsrec");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		int crecnum = Integer.parseInt(tcustnum);
       		int wsnum = Integer.parseInt(tcontnum);
		String itemrec = req.getParameter("itemrec");
		UniWsItems.deleteItem(con, itemrec);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=editws&wsnum="+wsnum+"&custnum="+crecnum+"");
            }

private void doDelProposalItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("quotenum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String action = req.getParameter("action");
       		int crecnum = Integer.parseInt(tcustnum);
       		int quotenum = Integer.parseInt(tcontnum);
		String itemnum = req.getParameter("itemnum");

			if (action.equalsIgnoreCase("delproposalitem"))
	                        {
		UniQuoteParts.deleteItem(con, itemnum);
		res.sendRedirect(""+classdir+"UniCash?action=editproposal&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop);
				}

			if (action.equalsIgnoreCase("delservproposalitem"))
	                        {
		ServQuoteParts.deleteItem(con, itemnum);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=editservproposal&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop);
				}
            }

private void doSaveProposalItem(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
		        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("quotenum");
		String action = req.getParameter("action");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
       		int crecnum = Integer.parseInt(tcustnum);
	String custsite = doGetCustSite(crecnum);
	String sitenum = doGetSiteNum(crecnum);
       		int quotenum = Integer.parseInt(tcontnum);
		String titemquant=req.getParameter("itemquant");
		int itemquant = Integer.parseInt(titemquant);
		String titemnum = req.getParameter("itemnum");
		int itemnum=Integer.parseInt(titemnum);
                String itemname = req.getParameter("itemname");
                String tinvestment = req.getParameter("investment");
		double investment = Double.parseDouble(tinvestment);
                String mannum = req.getParameter("mannum");
		printHeader(req, res, out, username);
		String sitemname=null;
			String login=(String)session.getAttribute("login");
		if (itemquant > 1) {
		sitemname = "("+itemquant+") "+itemname;
				}
		else
			{
		sitemname=""+itemname;
			}
			if (action.equalsIgnoreCase("saveproposalitem"))
	                        {
		UniQuoteParts.AddItem(con, quotenum, itemname, mannum, itemquant, investment, custsite, sitenum, login, 0);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=editproposal&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop);
				}
			if (action.equalsIgnoreCase("saveservproposalitem"))
	                        {
		ServQuoteParts.AddItem(con, quotenum, itemname, mannum, itemquant, investment);
		con.close();
		res.sendRedirect(""+classdir+"UniCash?action=editservproposal&custnum="+crecnum+"&quotenum="+quotenum+"&custstart="+custstart+"&custstop="+custstop);
				}

            }


private void doFinishCalcPrice(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	String tpprice = req.getParameter("pprice");
	String tlhours = req.getParameter("lhours");
       	double pprice = Double.parseDouble(tpprice);
       	double lhours = Double.parseDouble(tlhours);
	double finalprice=0;
	String slaborrate=null;
	double laborrate=0.00;
	String spartmult=null;
	double partmult=0.00;
	String stotalmult=null;
	double totalmult=0.00;
        Vector v;
        v = UniRateInfo.getAllItems(con);
	int counter=0;
        for (int i = 0 ; i < v.size(); i++)
                {
                UniRateInfo t = (UniRateInfo) v.elementAt(i);
		slaborrate=t.getLaborRate();
		spartmult=t.getPartMult();
		stotalmult=t.getTotalMult();
                }
	laborrate=Double.parseDouble(slaborrate);
	partmult=Double.parseDouble(spartmult);
	totalmult=Double.parseDouble(stotalmult);

	finalprice=((pprice*partmult)+(laborrate*lhours))/totalmult;
	out.println("<h3 align=center>Price Calculation</h3>");
	out.println("<table border=0>");
	out.println("<tr><td>Part Price:</td><td>"+NumberFormat.getCurrencyInstance().format(pprice)+"</td></tr>");
	out.println("<tr><td>Labor Hours:</td><td>"+lhours+"</td><tr>");
	out.println("<tr><td>Final Price:</td><td>"+NumberFormat.getCurrencyInstance().format(finalprice)+"</td></tr>");
	out.println("</table>");

		printHeader(req, res, out, username);

		con.close();

            }

private void doEditPrevagreement(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("contnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String reqsource= req.getParameter("reqsource");
       		 int custnum = Integer.parseInt(tcustnum);
       		 int contnum = Integer.parseInt(tcontnum);
               int eenum=0;
                int ecustnum=0;
                String brand=null;
                String modelnum=null;
                String serialnum=null;
                String filter=null;
                String enotes=null;

                int enum1 =0;
                int enum2 = 0;
                int enum3 = 0;
                int enum4 = 0;
                int enum5 = 0;
                int enum6 = 0;
                int enum7 = 0;
                int enum8 = 0;
                int enum9 = 0;
                int enum10 =0;
                String aservice  = null;
                String startdate = null;
                String enddate = null;
                String term = null;
                String cost = null;
                String notes = null;
                String agrdate = null;
		String visit1=null;
		String visit2=null;
		String visit3=null;
		String visit4=null;
		String visit5=null;
		String visit6=null;

                int vperyear = 0;
 	Statement stmt = con.createStatement();
	ResultSet rs = stmt.executeQuery("SELECT * FROM pagreement where contnum="+contnum+"");

		 while(rs.next())
                {
		enum1=rs.getInt("enum1");
		enum2=rs.getInt("enum2");
		enum3=rs.getInt("enum3");
		enum4=rs.getInt("enum4");
		enum5=rs.getInt("enum5");
		enum6=rs.getInt("enum6");
		enum7=rs.getInt("enum7");
		enum8=rs.getInt("enum8");
		enum9=rs.getInt("enum9");
		enum10=rs.getInt("enum10");
		aservice=rs.getString("aservice");
		startdate=rs.getString("startdate");
		enddate=rs.getString("enddate");
		term=rs.getString("term");
		cost=rs.getString("cost");
		notes=rs.getString("notes");
		visit1=rs.getString("visit1");
		visit2=rs.getString("visit2");
		visit3=rs.getString("visit3");
		visit4=rs.getString("visit4");
		visit5=rs.getString("visit5");
		visit6=rs.getString("visit6");
		agrdate=rs.getString("agrdate");
		vperyear=rs.getInt("vperyear");

	}

	out.println("<html>");
	out.println("<head>");
	out.println("<title>Edit Preventative Agreement</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateprevagreement&custnum="+custnum+"\" name=\"addcust\">");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"agrdate\" value=\""+doFormatDate(getDate(agrdate))+"\"></td>");
	out.println("</tr>");
	out.println("<tr><td>Term</td><td>");
	out.println("<input type=\"text\" name=\"term\" value=\""+term +"\" ></td>");
	out.println("</tr>");
	out.println("<tr><td>Start Date</td><td>");
	out.println("<input type=\"text\" name=\"startdate\" value=\""+doFormatDate(getDate(startdate)) +"\"></td></tr>");
	out.println("<tr><td>End Date</td><td>");
	out.println("<input type=\"text\" name=\"enddate\" value=\""+doFormatDate(getDate(enddate)) +"\"></td></tr>");
	out.println("<tr><td>Visits Per Year</td><td>");
	out.println("<input type=\"text\" name=\"vperyear\" value=\""+vperyear +"\"></td></tr>");
	out.println("<tr><td>Cost</td><td>");
	out.println("<input type=\"text\" name=\"cost\" value=\""+cost +"\"></td></tr>");
	out.println("<tr><td>Schedule of visits</td><td><td></tr>");
	out.println("<tr><td>Visit 1</td><td>");
	out.println("<input type=\"text\" name=\"visit1\" value=\""+visit1 +"\"></td></tr>");
	out.println("<tr><td>Visit 2</td><td>");
	out.println("<input type=\"text\" name=\"visit2\" value=\""+visit2+"\"></td></tr>");
	out.println("<tr><td>Visit 3</td><td>");
	out.println("<input type=\"text\" name=\"visit3\" value=\""+visit3 +"\"></td></tr>");
	out.println("<tr><td>Visit 4</td><td>");
	out.println("<input type=\"text\" name=\"visit4\" value=\""+visit4 +"\"></td></tr>");
	out.println("<tr><td>Visit 5</td><td>");
	out.println("<input type=\"text\" name=\"visit5\" value=\""+visit5 +"\"></td></tr>");
	out.println("<tr><td>Visit 6</td><td>");
	out.println("<input type=\"text\" name=\"visit6\" value=\""+visit6+"\"></td></tr>");
	out.println("<tr><td>Additional Services<br>(These will appear on agreement)</td><td>");
	out.println("<textarea name=\"aservice\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+aservice+"</textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Notes (These will not appear<br>on agreement)</td><td>");
	out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+notes+"</textarea>");
	out.println("</td></tr>");
	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\">");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<input type=\"hidden\" name=\"contnum\" value=\""+contnum+"\">");
	out.println("<input type=\"hidden\" name=\"reqsource\" value=\""+reqsource+"\">");
	out.println("</table>");
	out.println("<h3>Customer Equipment List</h3>");
       
        Vector v;
        v = UniEquip.getAllItems(con,custnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Number</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniEquip t = (UniEquip) v.elementAt(i);
		eenum=t.getId();
		ecustnum=t.getCustnum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		enotes=t.getNotes();
                out.println("<tr><td>"+eenum+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
                }
	out.println("</table><br><br>");
	out.println("<table border=1 width=100%>");
	out.println("<tr><td>Equipment 1 </td><td><input type=\"text\" name=\"equip1\" size=\"30\" value=\""+enum1 +"\"></td><td>Equipment 2</td><td><input type=\"text\" name=\"equip2\" size=\"30\" value=\""+enum2 +"\"></td></tr>");
	out.println("<tr><td>Equipment 3</td><td><input type=\"text\" name=\"equip3\" size=\"30\" value=\""+ enum3+"\"></td><td>Equipment 4</td><td><input type=\"text\" name=\"equip4\" size=\"30\" value=\""+enum4 +"\"></td></tr>");
	out.println("<tr><td>Equipment 5</td><td><input type=\"text\" name=\"equip5\" size=\"30\" value=\""+ enum5+"\"></td><td>Equipment 6</td><td><input type=\"text\" name=\"equip6\" size=\"30\" value=\""+ enum6+"\"></td></tr>");
	out.println("<tr><td>Equipment 7</td><td><input type=\"text\" name=\"equip7\" size=\"30\" value=\""+ enum7+"\"></td><td>Equipment 8</td><td><input type=\"text\" name=\"equip8\" size=\"30\" value=\""+ enum8+"\"></td></tr>");
	out.println("<tr><td>Equipment 9</td><td><input type=\"text\" name=\"equip9\" size=\"30\" value=\""+enum9 +"\"></td><td>Equipment 10</td><td><input type=\"text\" name=\"equip10\" size=\"30\" value=\""+ enum10+"\"></td></tr>");
	out.println("</table><br><br>");
	out.println("<p> <CENTER>");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

private String doSendSingleProposalsC(int qnumber, int custrec, String username)
                throws Exception
                        {
		int tcustnum = 0;
		String tcontnum = null;
            String mbody = "";
               int eenum=0;
                int ecustnum=0;
                String brand=null;
                String modelnum=null;
                String serialnum=null;
                String filter=null;
                String enotes=null;
                String type=null;

                int enum1 =0;
                int enum2 = 0;
                int enum3 = 0;
                int enum4 = 0;
                int enum5 = 0;
                int enum6 = 0;
                int enum7 = 0;
                int enum8 = 0;
                int enum9 = 0;
                String aservice  = null;
                String startdate = null;
                String enddate = null;
                String term = null;
                String cost = null;
                String notes = null;
                String agrdate = null;
                int vperyear = 0;

		String cname=null;
		String address1=null;
		String address2=null;
		String city =null;
		String state=null;
		String zip=null;
		String homephone=null;
		String altphone=null;
		String cust_notes=null;
		
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);
        	String emailserver = null;
        	String emailsendaddress= null;
        	String techemailaddress= null;

                String qdescription  = null;
                String qpayterms  = null;
		int propnum = 0;
                String qnotes  = null;
                String qadditionalserv  = null;
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		int counter = 0;
		int combineopts=0;
		double totinvestment=0.00;
		String investment=null;
		String qdate=null;
		double qtotal=0.00;
	int csrec = qnumber;
	int custnum = custrec;
                Vector vv;
                vv = UniQuotes.getIndItem(con,custnum, csrec);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniQuotes tt = (UniQuotes) vv.elementAt(i);
		qdate=tt.getQDate();
		propnum = tt.getQuoteNum();
		qdescription=tt.getQDescription();
		qnotes=tt.getQNotes();
		tcustnum=tt.getCrecNum();
		qpayterms=tt.getQPayterms();
		qadditionalserv=tt.getQAdditionalServ();
		combineopts=tt.getCombineOpts();

 		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
        	        {
			cname=rs.getString("cname");
			address1=rs.getString("address1");
			address2=rs.getString("address2");
			city =rs.getString("city");
			state=rs.getString("state");
			zip=rs.getString("zip");
			homephone=rs.getString("homephone");
			altphone=rs.getString("altphone");
			cust_notes=rs.getString("cust_notes");
			}

	mbody="";	
	mbody=combinestring(mbody,"<html><basefont size=2>");
	mbody=combinestring(mbody,"<html><head><title>Proposal</title></head>");
	mbody=combinestring(mbody,"<h2 align=CENTER>Proposal</h2>");
	mbody=combinestring(mbody,"<P ALIGN=LEFT><table><tr>");
	mbody=combinestring(mbody,"<td>This proposal is issued to:</td><td>"+cname+" </td></tr> ");
	mbody=combinestring(mbody,"<tr><td></td><td>"+address1+" "+ address2+"<br>"+city+", "+state+"  "+zip+" </td></tr>");
	mbody=combinestring(mbody,"<tr><td></td><td></td></tr>");
	mbody=combinestring(mbody,"<tr><td>By <b>"+doGetCompanyName()+"</b> on:</td><td>"+doFormatDate(getDate(qdate))+" </td></tr> ");
	mbody=combinestring(mbody,"</table></p> ");
	mbody=combinestring(mbody,"<p><font size=3>Thank you for the oppurtunity to quote on "+qdescription+".<br>");
	mbody=combinestring(mbody,"<br>This work will consist of:<br>");
	mbody=combinestring(mbody,"<ul>");
	
                Vector vp;
                vp = UniQuoteParts.getAllItems(con,propnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                UniQuoteParts tp = (UniQuoteParts) vp.elementAt(j);
		qpartnum=tp.getQPartnum();
		itemname=tp.getItemName();
		mannum=tp.getManNum();
		itemquant=tp.getItemQuant();
		investment=tp.getInvestment();
		qtotal=tp.getQuoteTotal();
		double subtot=Double.parseDouble(tp.getInvestment())*itemquant;
		totinvestment=totinvestment+subtot;
	mbody=combinestring(mbody,"<li>"+itemquant+" - "+itemname+"; "+mannum+"</li>");
	
		}
		
	
	mbody=combinestring(mbody,"</ul>");

	mbody=combinestring(mbody,"<p align=\"right\">Total Investment: "+NumberFormat.getCurrencyInstance().format(totinvestment)+"<br></p>");
	mbody=combinestring(mbody,"<br><br>");

	mbody=combinestring(mbody,"Payment to be made as follows:<br>");
	mbody=combinestring(mbody,"<p align=center>"+qpayterms+"</p><br>");
	mbody=combinestring(mbody,"All material is guaranteed to be as specified.  All work completed within Massachusetts code specification. Please be aware that any hidden work which may be discovered or changed work orders will alter the cost of this project. All agreements contingent upon strikes, accidents or delays beyond our control.  Owner to carry fire, tornado and other necessary insurance.  Our workers are fully covered by Workmen's Compensation Insurance.  "+doGetCompanyName()+" wishes to thank you for your time and consideration on this project.  You may be assured of quality, professionalism and complete satisfaction with our work.<br><br>");
	mbody=combinestring(mbody,"<p align=center>Authorized Signature ___________________________________________________________________________<br><b>Note: This proposal may be withdrawn by us if not accepted within 10 days.</b></p>");

	mbody=combinestring(mbody,"<br><br><p align=center><b>Acceptance of Proposal</b></p>");
	mbody=combinestring(mbody,"The above prices, specifications and conditions are satisfactory and are hereby accepted.  You are authorized to do the work as specified.  Payment will be made as outlined above.  Cancellation of this proposal will result in a 10% retainer.<br><br>");
	mbody=combinestring(mbody,"</p><table width=\"95%\" align=center><tr><td>____________________________</td><td>_______</td><td>____________________________</td><td>_______</td></tr> ");
	mbody=combinestring(mbody,"<tr><td>Customer Signature</td><td>Date</td><td>The Company</td><td>Date</td></tr> ");
	mbody=combinestring(mbody,"<tr><td>"+cname+"</td><td></td><td>"+tech_name+"</td><td></td></tr></table> ");
	// END OF SINGLE QUOTE HERE
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetProp_Email(username);
        techemailaddress=doGetTech_Email(username);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Proposal For: "+cname+" - "+qdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
		}
		return mbody;
    }


private void doSendSingleProposals(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
                        {
		String qdate = req.getParameter("qdate");
		String mbody=ServsysProposal.getIndividualItem (con, req,res, out, session, username, classdir);
            String tcsrec = req.getParameter("csrec");
            String ttcustnum = req.getParameter("custnum");
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetProp_Email(username);
	String tech_name = doGetTechInfo_name(username);
        techemailaddress=doGetTech_Email(username);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
      String cname=doGetCustName(Integer.parseInt(ttcustnum));
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Proposal For: "+cname+" - "+qdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
	mbody=null;		
		con.close();
    }

private void doSendProposals(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, int sall, String username)
                throws Exception
                        {
		String qdate = req.getParameter("listdate");
		String mbody="";
		//String qdate = req.getParameter("qdate");
		Vector vv;
                vv = UniQuotes.getAllDateItems(con,doFormatDateDb(getDateDb(qdate)));
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniQuotes tt = (UniQuotes) vv.elementAt(i);
		int tcontnum=tt.getQuoteNum();
		int custnum=tt.getCrecNum();
		mbody=ServsysProposal.getAllDateItems(con, req,res, out, session, username, classdir, custnum, tcontnum);
		//mbody=combinestring(mbody,"<br>Quotenum="+tcontnum+" Custnum="+custnum+"<br>");
		//String tcsrec = req.getParameter("csrec");
            //String ttcustnum = req.getParameter("custnum");
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetProp_Email(username);
	String tech_name = doGetTechInfo_name(username);
        techemailaddress=doGetTech_Email(username);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
      String cname=doGetCustName(custnum);
      doMailSend(emailserver, emailsendaddress, techemailaddress, "Proposal For: "+cname+" - "+qdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
	out.println(mbody+"<br>");
	mbody="";
	
		}
		con.close();
			}
//
//
private void doPrintJobFlow(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("quotenum");
       		 int custnum = Integer.parseInt(tcustnum);
       		 int propnum = Integer.parseInt(tcontnum);
               int eenum=0;
                int ecustnum=0;
                String brand=null;
                String modelnum=null;
                String serialnum=null;
                String filter=null;
                String enotes=null;
                String type=null;

                int enum1 =0;
                int enum2 = 0;
                int enum3 = 0;
                int enum4 = 0;
                int enum5 = 0;
                int enum6 = 0;
                int enum7 = 0;
                int enum8 = 0;
                int enum9 = 0;
                int enum10 =0;
                String aservice  = null;
                String startdate = null;
		String antstart=null;
		String solddate=null;
		String jobnum=null;
                String enddate = null;
                String term = null;
                String cost = null;
                String notes = null;
                String agrdate = null;
                int vperyear = 0;

		String cname=null;
		String address1=null;
		String address2=null;
		String city =null;
		String state=null;
		String zip=null;
		String homephone=null;
		String altphone=null;
		String cust_notes=null;
		
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);

                String qdate  = null;
                String qdescription  = null;
                String qpayterms  = null;
                String qnotes  = null;
                String qadditionalserv  = null;
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		int counter = 0;
		double totinvestment=0.00;
		String investment=null;
		double qtotal=0.00;
		int combineopts=0;
                Vector vv;
                vv = UniQuotes.getIndItem(con,custnum,propnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                UniQuotes tt = (UniQuotes) vv.elementAt(i);
		qdate=tt.getQDate();
		qdescription=tt.getQDescription();
		qnotes=tt.getQNotes();
		qpayterms=tt.getQPayterms();
		qadditionalserv=tt.getQAdditionalServ();
		antstart=tt.getQAntStart();
		solddate=tt.getQSoldDate();
		jobnum=tt.getQJobNum();
		combineopts=tt.getCombineOpts();
	}

 		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
        	        {
			cname=rs.getString("cname");
			address1=rs.getString("address1");
			address2=rs.getString("address2");
			city =rs.getString("city");
			state=rs.getString("state");
			zip=rs.getString("zip");
			homephone=rs.getString("homephone");
			altphone=rs.getString("altphone");
			cust_notes=rs.getString("cust_notes");
			}

	
	out.println("<html><basefont size=2>");
	out.println("<html><head><title>Job Flow Worksheet</title></head>");
	doMHeader(req, res, out, session, username); 
	out.println("<h2 align=CENTER>Job Flow Worksheet</h2>");
	out.println("<P ALIGN=LEFT fontsize=4><table width=\"50%\" fontsize=4><tr>");
	out.println("<td><b>Job Location:</b></td><td></td><td align=right>"+cname+" </td></tr> ");
	out.println("<tr><td></td><td></td><td align=right>"+address1+" "+ address2+"<br>"+city+", "+state+"  "+zip+" </td></tr>");
	out.println("<tr><td><b>Job Number:</b><br><br></td><td></td><td>"+jobnum+"</td></tr>");
	out.println("<tr><td><b>Payment Terms:</b></td><td></td><td align=left>"+qpayterms+"</td></tr>");
	out.println("<tr><td><b>Sold Date:</b></td><td></td><td align=left>"+doFormatDate(getDate(solddate))+" </td></tr> ");
	out.println("<tr><td><b>Anticipated Date:</b></td><td></td><td align=left>"+doFormatDate(getDate(antstart))+" </td></tr> ");
	out.println("<tr><td><b>Comfort Specialist:</b></td><td></td><td align=left>"+tech_name+"</td><td></td></tr> ");
	out.println("</table></p><br><br><br><hr height=1> ");
	String tqnotes = qnotes.replaceAll("\n","<br>");	
	out.println("<P ALIGN=LEFT fontsize=4><table width=\"90%\" fontsize=4><tr>");
	out.println("<th>Installation Instructions:</th>");
	out.println("<tr><td>"+tqnotes+"</td></th>");
	out.println("</table></p> ");
	out.println("<hr height=1><br>");


	out.println("<P ALIGN=LEFT fontsize=4><table width=\"90%\" fontsize=4><tr>");
	out.println("<tr><td><b>Heat Load Complete:</b><br><br> </td><td>Date: ______________________</td><td>By: ________________________</td></tr>");
	out.println("<tr><td><b>Equipment List and Scope Completed:</b><br><br> </td><td>Date: ______________________</td><td>By: ________________________</td></tr>");
	out.println("<tr><td><b>Given To Install Coordinator Completed:</b><br><br> </td><td>Date: ______________________</td><td>By: ________________________</td></tr>");
	out.println("<tr><td><b>Measurment Completed:</b><br><br> </td><td>Date: ______________________</td><td>By: ________________________</td></tr>");
	out.println("<tr><td><b>Bill of Materials Completed:</b><br><br> </td><td>Date: ______________________</td><td>By: ________________________</td></tr>");
	out.println("<tr><td><b>Materials Ordered or In Stock:</b><br><br> </td><td>Date: ______________________</td><td>By: ________________________</td></tr>");
	out.println("<tr><td><b>Anticipated Materials Complete:</b><br><br> </td><td>Date: ______________________</td><td>By: ________________________</td></tr>");
	out.println("<tr><td><b>All Materials Complete:</b><br><br> </td><td>Date: ______________________</td><td>By: ________________________</td></tr>");
	out.println("<tr><td><b>Project Scheduled to be Complete:</b><br><br> </td><td>Date: ______________________</td><td>By: ________________________</td></tr>");
	out.println("</table></p><hr height=1><br> ");

		con.close();
	
    }

private void doPrintProposal(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String mbody=ServsysProposal.getIndividualItem (con, req,res, out, session, username, classdir); 
		con.close();
	
    }


private String  doSendPrevagreementC(int contnum, int custnum, String username)
                throws Exception
                        {
		String mbody="";
      		String smtpuser = doGetSmtpUser(username);
      		String smtppassword = doGetSmtpPassword(username);
		String cname="";
		
		Vector c;
		c =  UniCustomer.getIndItem(con, custnum);
		int counterc=0;
		for (int i=0; i< c.size(); i++)
		{
			UniCustomer tc = (UniCustomer) c.elementAt(i);
			cname = tc.getCustomerName();
		}

                Vector v;
                v = PrintPagreement.getIndItem(con, custnum, contnum, username );
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	PrintPagreement t = (PrintPagreement) v.elementAt(i);
			mbody= t.getAgreement();
		}

	String tech_name = doGetTechInfo_name(username);
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Preventative Agreement: "+cname+" - "+ tech_name , mbody, smtpuser, smtppassword);
	return mbody;
    }

private void doSendPrevagreement(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String mbody="";
      		String smtpuser = doGetSmtpUser(username);
      		String smtppassword = doGetSmtpPassword(username);
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("contnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
		String cname="";
	int custnum = Integer.parseInt(tcustnum);
       		 int contnum = Integer.parseInt(tcontnum);
                Vector v;
                v = PrintPagreement.getIndItem(con, custnum, contnum, username );
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	PrintPagreement t = (PrintPagreement) v.elementAt(i);
			mbody= t.getAgreement();
		}
		
		Vector c;
		c =  UniCustomer.getIndItem(con, custnum);
		int counterc=0;
		for (int i=0; i< c.size(); i++)
		{
			UniCustomer tc = (UniCustomer) c.elementAt(i);
			cname = tc.getCustomerName();
		}

        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	String tech_name = doGetTechInfo_name(username);
                out.println(mbody);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Preventative Agreement: "+cname+" - "+ tech_name , mbody, smtpuser, smtppassword);
		mbody="";
	out.println("</html>");
		con.close();
    }

private void doPrintPrevagreement(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("contnum");
		String custstart = req.getParameter("custstart");
		String custstop = req.getParameter("custstop");
	int custnum = Integer.parseInt(tcustnum);
       		 int contnum = Integer.parseInt(tcontnum);

		String mbody=null;
                Vector v;
                v = PrintPagreement.getIndItem(con, custnum, contnum, username );
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                       	PrintPagreement t = (PrintPagreement) v.elementAt(i);
			mbody= t.getAgreement();
		}
		out.println(mbody);
		out.println("</html>");
		con.close();
    }


private void doAddFlatPrice(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
                        String catnum = req.getParameter("catnum");
                        String servicestop = req.getParameter("serviceend");
                        out.println("<html>");
                        out.println("<head>");
                        out.println("<title>Add Flat Rate Price</title>");
                        out.println("</head>");
                        out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveflatrate&servicestart="+servicestart+"&serviceend="+servicestop+"\" name=\"addcust\">");
                        out.println("<table><tr>");
                        out.println("<td>Category       :</td><td>");
                        out.println("<input type=\"text\" name=\"category\" size=\"40\"></td></tr>");
                        out.println("<tr><td>Part/Repair       :</td><td>");
                        out.println("<input type=\"text\" name=\"part\" size=\"40\"></td></tr>");
                        out.println("<tr><td>Part Cost:</td><td>");
                        out.println("<input type=\"text\" name=\"partcost\" size=\"8\"></td></tr>");
                        out.println("<tr><td>Key Code:</td><td>");
                        out.println("<input type=\"text\" name=\"keycode\" size=\"8\"></td></tr>");
                        out.println("<tr><td>Hours:</td><td>");
                        out.println("<input type=\"text\" name=\"hours\" size=\"8\"></td></tr>");
                        out.println("<tr><td>No Discount/Flat Price (0-No / 1-Yes):</td><td>");
                        out.println("<input type=\"text\" name=\"nodiscount\" size=\"1\"></td></tr>");
                        out.println("<tr><td>Special Item(0-No / 1-Yes):</td><td>");
                        out.println("<input type=\"text\" name=\"specitem\" size=\"1\"></td></tr>");
                        out.println("<tr><td>Code (Leave 0 if not known):</td><td>");
                        out.println("<input type=\"text\" name=\"code\" size=\"8\" value=\"0\"></td></tr>");
                        out.println("<tr><td>Customer Notes:</td><td>");
                        out.println("<input type=\"text\" name=\"custnotes\" size=\"40\"></td></tr>");
                        out.println("</table>");
                        out.println("<input type=\"hidden\" name=\"servicestart\" size=\"8\" value="+servicestart+">");
                        out.println("<input type=\"hidden\" name=\"servicestop\" size=\"8\" value="+servicestop+">");
                        out.println("<input type=\"hidden\" name=\"catnum\" size=\"8\" value="+catnum+">");
                        out.println("<p> <CENTER>");
                        out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
                        out.println("<INPUT TYPE=\"reset\">");
                        out.println("</CENTER>");
		con.close();
}

private void doSaveFlatRate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
                        String servicestop = req.getParameter("serviceend");
			String catnum=req.getParameter("catnum");
                        String category = req.getParameter("category");
                        String part = req.getParameter("part");
                        String tcode = req.getParameter("code");
                        String hours = req.getParameter("hours");
                        String keycode = req.getParameter("keycode");
                        String custnotes = req.getParameter("custnotes");
			String partcost=req.getParameter("partcost");
			String nodiscount=req.getParameter("nodiscount");
			String specitem=req.getParameter("specitem");
                        int code = Integer.parseInt(tcode);
			double tpartcost=Double.parseDouble(partcost);
			double thours = Double.parseDouble(hours);
                        
			FlatRateTable.AddItem(con, code, category, part, keycode, thours, tpartcost, custnotes, nodiscount, specitem);
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=listflatrate&servicestart="+servicestart+"&serviceend="+servicestop+"&catnum="+catnum+"");
}

private void doDeleteFlatRate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
                        String servicestop = req.getParameter("serviceend");
			String catnum = req.getParameter("catnum");
                        String code  = req.getParameter("recnum");
                        
                        FlatRateTable.deleteItem(con, code);
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=listflatrate&servicestart="+servicestart+"&serviceend="+servicestop+"&catnum="+catnum+"");
}

private void doUpdateFlatRate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
                        String servicestop = req.getParameter("serviceend");
                        String code  = req.getParameter("code");
			String part = req.getParameter("part");
                        String category = req.getParameter("category");
                        String keycode = req.getParameter("keycode");
                        String partcost = req.getParameter("partcost");
                        String hours = req.getParameter("hours");
                        String custnotes = req.getParameter("custnotes");
                        String nodiscount = req.getParameter("nodiscount");
			String specitem = req.getParameter("specitem");

                        
                        FlatRateTable.UpdateItem(con, Integer.parseInt(code), category, part, keycode, hours, partcost, custnotes, nodiscount, specitem);
                out.println("Your item has been updated in the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action=listflatrate&servicestart="+servicestart+"&serviceend="+servicestop+"");
}

private void doAddChargeMenu(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                String custnum = req.getParameter("custnum");
                String callslip = req.getParameter("callslip");
                String psource = req.getParameter("psource");
                String trecnum = req.getParameter("crecnum");
                int crecnum = Integer.parseInt(trecnum);
                int recnum=0;
                //String callslip=null;
		double quant=0;
		String descript=null;
		double price=0;
		double total=0;;
                
                out.println("<html>");
                out.println("<body bgcolor=\"#FFFFFF\" >");
		// need to insert a table here to put categories on one side and alphabetical on second side
                out.println("<br><br><br><table width=\"75%\"><th>Charges By Category</th><th>Charges by Service</th><tr><td>");

		int catnum=0;
		String category="";
                Vector vf;
                vf = FlatRateCat.getAllItems(con);
                for (int i = 0 ; i < vf.size(); i++)
                {
                       	FlatRateCat t = (FlatRateCat) vf.elementAt(i);
                      	catnum = t.getCatnum();
                        category = t.Category();
                out.println("<a href="+classdir+"UniCash?action=showchargeselect&servicestart=a&serviceend=d&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+psource+"&catnum="+catnum+" target=phpmain>"+category+"</a><br>");
                }
		out.println("</td><td valign=\"top\">");
		String mbody="";
			mbody=combinestring(mbody,"&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=showchargeselect&servicestart=a&serviceend=d&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+psource+" target=phpmain>A-C</a><br>");
	mbody=combinestring(mbody,"&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=showchargeselect&servicestart=d&serviceend=g&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+psource+" target=phpmain>D-E</a><br>");
	mbody=combinestring(mbody,"&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=showchargeselect&servicestart=f&serviceend=j&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+psource+" target=phpmain>F-I</a><br>");
	mbody=combinestring(mbody,"&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=showchargeselect&servicestart=j&serviceend=n&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+psource+" target=phpmain>J-M</a><br>");	
	mbody=combinestring(mbody,"&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=showchargeselect&servicestart=n&serviceend=r&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+psource+" target=phpmain>N-Q</a><br>");	
	mbody=combinestring(mbody,"&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=showchargeselect&servicestart=r&serviceend=v&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+psource+" target=phpmain>R-U</a><br>");
	mbody=combinestring(mbody,"&nbsp;&nbsp;&nbsp;-&nbsp;<a href="+classdir+"UniCash?action=showchargeselect&servicestart=v&serviceend=ZZ&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&psource="+psource+" target=phpmain>V-Z</a><br>");
                out.println(mbody+"</td></tr></table><br><br><br>");

                out.println("<a href="+classdir+"UniCash?action="+psource+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+" target=phpmain>Return To Call Slip</a><br>");
		int frcode=0;
                
                Vector v;
                out.println("<h3>Current Charges</h3>");
                v = UniSvcCharges.getAllItems(con,callslip);
                out.println("<table border=1 width=100%>");
                out.println("<th>Code</th><th>Quantity</th><th>Description</th><th>Price</th><th>Sub Total</th>");
		
                for (int i = 0 ; i < v.size(); i++)
                {
                UniSvcCharges t = (UniSvcCharges) v.elementAt(i);
		recnum=t.getRecnum();
		callslip=t.getCallslip();
		quant=t.getQuant();
		frcode = t.getFrcode();
		descript=t.getDescript();
		price=t.getPrice();
		total=t.getTotal();
		
                out.println("<tr><td>"+frcode+"</td><td>"+quant+"</td><td><a href="+classdir+"UniCash?action=editchargerec2&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"&chargerec="+recnum+"&psource="+psource+">"+descript+"</a></td><td>"+NumberFormat.getCurrencyInstance().format(price)+"</td><td>"+NumberFormat.getCurrencyInstance().format(total)+"</td></tr>");
                
		}
                
                
                
                out.println("</body>");
                out.println("</html>");
		con.close();
}           
     
//ADMIN FUNCTION
private void doEditFlatRate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
                        String servicestop = req.getParameter("serviceend");
                        String trecnum = req.getParameter("recnum");
                        int recnum = Integer.parseInt(trecnum);
                       	  String category;
			  int code;
			  String part;
			  String keycode;
			  double hours;
			  double partcost;
			  String custnotes;
			  String nodiscount;
			  int specitem;

                        Vector v;
                        v = FlatRateTable.getIndItems(con,recnum);
                        int counter=0;
                        for (int i = 0 ; i < v.size(); i++)
                        {
                            FlatRateTable t = (FlatRateTable) v.elementAt(i);
                        
                       	  category = t.getCategory();
			  code = t.getCode();
			  part = t.getPart();
			  keycode=t.getKeycode();
			  hours=t.getHours();
			  partcost=t.getPartCost();
			  custnotes=t.getCustNotes();
			  nodiscount=t.getNoDiscount();
			  specitem=t.getSpecItem();

                    out.println("<html>");
                    out.println("<head>");
                    out.println("<title>Edit Flat Rate Price</title>");
                    out.println("</head>");     
                    out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updateflatrate&servicestart="+servicestart+"&serviceend="+servicestop+"\" name=\"addcust\">");
                    out.println("<table><tr>");
                    out.println("<td>Category        :</td><td>");
                    out.println("<input type=\"text\" name=\"category\" size=\"40\" value=\""+category+"\"></td></tr>");
                    out.println("<tr><td>Part/Repair  :</td><td>");
                    out.println("<input type=\"text\" name=\"part\" size=\"40\" value=\""+part+"\"></td></tr>");
                    out.println("<tr><td>Key Code:</td><td>");
                    out.println("<input type=\"text\" name=\"keycode\" size=\"8\" value=\""+keycode+"\"></td></tr>");
                    out.println("<tr><td>No Discount (0-No / 1-Yes):</td><td>");
                    out.println("<input type=\"text\" name=\"nodiscount\" size=\"8\" value=\""+nodiscount+"\"></td></tr>");
                    out.println("<tr><td>Special Item(0-No / 1-Yes):</td><td>");
                    out.println("<input type=\"text\" name=\"specitem\" size=\"8\" value=\""+specitem+"\"></td></tr>");

                    out.println("<tr><td>Hours:</td><td>");
                    out.println("<input type=\"text\" name=\"hours\" size=\"8\" value=\""+hours+"\"></td></tr>");
                    out.println("<tr><td>Part Cost:</td><td>");
                    out.println("<input type=\"text\" name=\"partcost\" size=\"8\" value=\""+partcost+"\"></td></tr>");

                    out.println("<tr><td>Customer Notes:</td><td>");
                    out.println("<input type=\"text\" name=\"custnotes\" size=\"8\" value=\""+custnotes+"\"></td></tr>");
                    out.println("</table>");
                    out.println("<input type=\"hidden\" name=\"servicestart\" size=\"8\" value="+servicestart+">");
                    out.println("<input type=\"hidden\" name=\"servicestop\" size=\"8\" value="+servicestop+">");
                    out.println("<input type=\"hidden\" name=\"code\" size=\"8\" value="+code+">");
                    out.println("<p> <CENTER>");
                    out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
                    out.println("<INPUT TYPE=\"reset\">");
                    out.println("</CENTER>");
                        }
		con.close();
}

private void doFlatRateReport(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        int recnum=0;
                        String service=null;
                        String tm_primary;
                        String tm_add;
                        String sa_primary;
                        String sa_add;
			String jcode;
			String keycode;
			double jtime;
			String part="";
			double hours;
			double partcost;
			String category;
			String nodiscount;
			int code;
			int specitem=0;
			String custnotes;
			double labperhour = doLabPerHour();
			double psdiscount = doPsDiscount();
			double mrdiscount = doMrDiscount();
			double commarkup = doComMarkUp();
			double partmarkup = doPartMarkUp();
			double salestax = doSalesTax();
			String commercial="";
			doMHeader(req, res, out, session, username); 
                        out.println ("<html>");
                        out.println ("<head>");
                        out.println ("<title>Flat Rate Prices</title>");
                        out.println ("</head>");
                        out.println ("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
                        out.println ("<table fontsize=-1 border=1 width=100%><font size=2>");
                        out.println ("<th>Service<br>(Click to Edit)</th><th>Category</th><th>T/M<br>Primary</th><th>T/M<br>Additional</th><th>S/C<br>Primary</th><th>S/C<br>Additional</th><th>Commercial</th><th>Code</th><th>Hours</th><th>KeyCode</th><th>PCost</th>");
                        Vector v;
                        v = FlatRateTable.getAllItems(con);
                        int counter=0;
                        for (int i = 0 ; i < v.size(); i++)
                        {
                            FlatRateTable t = (FlatRateTable) v.elementAt(i);
                       	  category = t.getCategory();
			  code = t.getCode();
			  part = t.getPart();
			  keycode=t.getKeycode();
			  hours=t.getHours();
			  partcost=t.getPartCost();
			  custnotes=t.getCustNotes();
			  nodiscount=t.getNoDiscount();
			  if (nodiscount.equalsIgnoreCase("1")) {
				  tm_primary=""+partcost+"";
				  tm_add=""+partcost+"";
				  sa_primary=""+partcost+"";
				  sa_add=""+partcost+"";
				  commercial=""+partcost+"";
			  } else {
			  tm_primary =  ""+ ((hours*labperhour)+(partcost*partmarkup)) +"";
			  tm_add = ""+ (Double.parseDouble(tm_primary)*mrdiscount) +"";
			  sa_primary = ""+ (Double.parseDouble(tm_primary)*psdiscount) +"";
			  sa_add = ""+ (Double.parseDouble(sa_primary)*mrdiscount) +"";
			  commercial= ""+ (Double.parseDouble(tm_primary)*commarkup)+"";
			  }
			if (keycode==null) {
				keycode="-";
			}
                            out.println ("<tr><td>"+part+"</td><td>"+category+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_primary))+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_add))+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_primary))+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_add))+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(commercial))+"</td><td>"+code+"</td><td>"+hours+"</td><td>"+keycode+"</td><td>"+partcost+"</td></tr>");
                            }
                        
                        out.println ("</font></table>");
		con.close();
            }

private void doCallReport(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String startdate = req.getParameter("startdate");
                        String enddate = req.getParameter("enddate");
			int custnum=0;     //default value to null
			String tech_name = doGetTechInfo_name(username);
        		int equip1=0;
        		int equip2=0;
        		int equip3=0;
        		int equip4=0;
        		int followup=0;
        		String  callslip=null;
        		String  cdate=null;
        		String  reason=null;
        		String  services=null;
        		String  recommendations=null;
        		String  rscheduled=null;
        		String  charges=null;
        		String  collected=null;
        		String  notes=null;
			int crecnum=0;
			String cname=null;


			doMHeader(req, res, out, session, username); 
                        out.println ("<html>");
                        out.println ("<head>");
                        out.println ("<title>FollowUp Report</title>");
                        out.println ("</head>");
                        out.println ("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
                        out.println ("<center><h2>Call Slip Report<br>"+tech_name+"<br></h2></center>");
                        out.println ("<table fontsize=-1 border=1 width=100%><font size=2>");
                        out.println ("<th>Callslip</th><th>Date</th><th>Customer</th><th>Recommendations</th><th>Notes</th>");
        
                        Vector v;
                        
                        v = UniCallslip.getIncludedDateItems(con, doFormatDateDb(getDateDb(startdate)), doFormatDateDb(getDateDb(enddate)));    
                        for (int i = 0 ; i < v.size(); i++)
                        {
                            UniCallslip t = (UniCallslip) v.elementAt(i);
                       		crecnum=t.getCrecnum();
				callslip=t.getCallslip();
				custnum=t.getCustnum();
				cdate=t.getCdate();
				recommendations=t.getRecommendations();
				notes=t.getNotes();
				     Statement stmt = con.createStatement();
        				ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
				                 while(rs.next())
                				{      
                				cname=rs.getString("cname");
                            out.println ("<tr><td><a href="+classdir+"UniCash?action=rceditcallslip&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+">"+callslip+"</a></td><td>"+cdate+"</td><td>"+cname+"</td><td>"+recommendations+"</td><td>"+notes+"</td></tr>");
				}
			  }
                        out.println ("</font></table>");


                        out.println ("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
                        out.println ("<center><h2>Inspection Follow-Up Report<br>"+tech_name+"<br></h2></center>");
                        out.println ("<table fontsize=-1 border=1 width=100%><font size=2>");
                        out.println ("<th>Callslip</th><th>Date</th><th>Customer</th><th>Recommendations</th><th>Notes</th>");
        
                        Vector vi;
                        
                        vi = UniInspection.getIncludedDateItems(con, doFormatDateDb(getDateDb(startdate)), doFormatDateDb(getDateDb(enddate)));    
                        for (int i = 0 ; i < vi.size(); i++)
                        {
                            UniInspection ti = (UniInspection) vi.elementAt(i);
                       		crecnum=ti.getCrecnum();	
				callslip=ti.getCallslip();
				custnum=ti.getCustnum();
				cdate=ti.getIdate();
				recommendations=ti.getRecommendations();
				notes=ti.getNotes();
				     Statement stmti = con.createStatement();
        				ResultSet rsi = stmti.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
				                 while(rsi.next())
                				{      
                				cname=rsi.getString("cname");
                            out.println ("<tr><td><a href="+classdir+"UniCash?action=rceditinspection&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+">"+callslip+"</a></td><td>"+cdate+"</td><td>"+cname+"</td><td>"+recommendations+"</td><td>"+notes+"</td></tr>");
				}
			  }
                        out.println ("</font></table>");


		con.close();

            }

private void doFollowUpReport(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			String mbody="";
                        String action = req.getParameter("action");
			int custnum=0;     //default value to null
			String tech_name = doGetTechInfo_name(username);
        		int equip1=0;
        		int equip2=0;
        		int equip3=0;
        		int equip4=0;
        		int followup=0;
        		String  callslip=null;
        		String  cdate=null;
        		String  reason=null;
        		String  services=null;
        		String  recommendations=null;
        		String  rscheduled=null;
        		String  charges=null;
        		String  collected=null;
        		String  notes=null;
			String custsite=null;
			String sitenum=null;
			int crecnum=0;
			String cname=null;
			if (action.equalsIgnoreCase("showhomepage"))
				{
// skip report headers
				} else {
			doMHeader(req, res, out, session, username); 
					}
                        mbody=combinestring(mbody,"<html>");
                        mbody=combinestring(mbody,"<head>");
                        mbody=combinestring(mbody,"<title>FollowUp Report</title>");
                        mbody=combinestring(mbody,"</head>");
                        mbody=combinestring(mbody,"<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
			if (action.equalsIgnoreCase("showhomepage"))
				{
                        mbody=combinestring(mbody,"<h4>Call Slip Follow-Up Report</h4>");
				} else {
                        mbody=combinestring(mbody,"<center><h2>Call Slip Follow-Up Report<br>"+tech_name+"<br></h2></center>");
				}
                        mbody=combinestring(mbody,"<table fontsize=-1 border=1 width=100%><font size=2>");
                        mbody=combinestring(mbody,"<th>Callslip</th><th>Date</th><th>Customer</th><th>Recommendations</th><th>Notes</th>");
        
                        Vector v;
                        
                        v = UniCallslip.getCallSlipFollowup(con);    
                        for (int i = 0 ; i < v.size(); i++)
                        {
                            UniCallslip t = (UniCallslip) v.elementAt(i);
                       		crecnum=t.getCrecnum();
				callslip=t.getCallslip();
				custnum=t.getCustnum();
				cdate=t.getCdate();
				custsite=t.getCustSite();
				sitenum=t.getSiteNum();
				recommendations=t.getRecommendations();
				//notes=t.getNotes();
				notes="";		
		Vector vcn;
		vcn = CallslipNotes.getAllItems(con,custsite, sitenum, callslip);
		if (vcn.size() > 0 ) {
		notes=combinestring(notes,"<table border=0 width=100%>");
		notes=combinestring(notes,"<th>Date</th><th>User</th><th>Note</th>");
		String note="";
		String ndate="";
		String ncallslip="";
		String nuserlogin="";
		String nnote="";
		int nrecnum=0;
		int nservsync=0;
                for (int icn = 0 ; icn < vcn.size(); icn++)
                {
                CallslipNotes tcn = (CallslipNotes) vcn.elementAt(icn);
		nnote=tcn.getNote();
		ncallslip=tcn.getCallslip();
		nuserlogin=tcn.getUserLogin();
		nrecnum=tcn.getRecNum();
		ndate=tcn.getNDate();
		nservsync=tcn.getServsync();
                notes=combinestring(notes,"<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td></tr>");
		}
			notes=combinestring(notes,"</table>");
		}
		
				
				
				
				     Statement stmt = con.createStatement();
        				ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
				                 while(rs.next())
                				{      
                				cname=rs.getString("cname");
                            mbody=combinestring(mbody,"<tr><td><a href="+classdir+"UniCash?action=reditcallslip&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+">"+callslip+"</a></td><td>"+cdate+"</td><td>"+cname+"</td><td>"+recommendations+"</td><td>"+notes+"</td></tr>");
				}
			  }
                        mbody=combinestring(mbody,"</font></table>");


                        mbody=combinestring(mbody,"<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
			if (action.equalsIgnoreCase("showhomepage"))
				{
                        mbody=combinestring(mbody,"<h4>Inspection Follow-Up Report</h4>");
				} else {
                        mbody=combinestring(mbody,"<center><h2>Inspection Follow-Up Report<br>"+tech_name+"<br></h2></center>");
				}
                        mbody=combinestring(mbody,"<table fontsize=-1 border=1 width=100%><font size=2>");
                        mbody=combinestring(mbody,"<th>Callslip</th><th>Date</th><th>Customer</th><th>Recommendations</th><th>Notes</th>");
        
                        Vector vi;
                        
                        vi = UniInspection.getInspectionFollowup(con);    
                        for (int i = 0 ; i < vi.size(); i++)
                        {
                            UniInspection ti = (UniInspection) vi.elementAt(i);
                       		crecnum=ti.getCrecnum();	
				callslip=ti.getCallslip();
				custnum=ti.getCustnum();
				custsite=ti.getCustSite();
				sitenum=ti.getSiteNum();
				cdate=ti.getIdate();
				recommendations=ti.getRecommendations();
				//notes=ti.getNotes();
				notes="";		
		Vector vn;
		vn = InspectNotes.getAllItems(con,custsite, sitenum, callslip);
		if (vn.size() > 0 ) {
		notes=combinestring(notes,"<table border=0 width=100%>");
		notes=combinestring(notes,"<th>Date</th><th>User</th><th>Note</th>");
		String note="";
		String ndate="";
		String ncallslip="";
		String nuserlogin="";
		String nnote="";
		int nrecnum=0;
		int nservsync=0;
                for (int in = 0 ; in < vn.size(); in++)
                {
                InspectNotes tn = (InspectNotes) vn.elementAt(in);
		nnote=tn.getNote();
		ncallslip=tn.getCallslip();
		nuserlogin=tn.getUserLogin();
		nrecnum=tn.getRecNum();
		ndate=tn.getNDate();
		nservsync=tn.getServsync();
                notes=combinestring(notes,"<tr><td>"+ndate+"</td><td>"+nuserlogin+"</td><td>"+nnote+"</td></tr>");
		}
			notes=combinestring(notes,"</table>");
		}
		
                
		
				
				
				
				     Statement stmti = con.createStatement();
        				ResultSet rsi = stmti.executeQuery("SELECT * FROM customers where custnum="+custnum+"");
				                 while(rsi.next())
                				{      
                				cname=rsi.getString("cname");
                            mbody=combinestring(mbody,"<tr><td><a href="+classdir+"UniCash?action=reditinspection&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+">"+callslip+"</a></td><td>"+cdate+"</td><td>"+cname+"</td><td>"+recommendations+"</td><td>"+notes+"</td></tr>");
				}
			  }
                        mbody=combinestring(mbody,"</font></table>");
			if (action.equalsIgnoreCase("followupreport"))
				{
			out.println(mbody);
				} else {
        out.println(mbody);
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
        emailserver = doGetSmtpServer(username);
        //emailsendaddress=doGetSvc_Email(username);
	emailsendaddress=doGetCompanyReportEmail();
        techemailaddress=doGetTech_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, " Followup Report - "+ tech_name , mbody, smtpuser, smtppassword);
		mbody="";
			out.println(mbody);
				}
		con.close();
            }

private void doListMWorkSheet(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
                        String servicestop = req.getParameter("serviceend");
                        int recnum=0;
			int wsRec=0;
			String wsDate=null;
			String wsDesc=null;
                        out.println ("<html>");
                        out.println ("<head>");
                        out.println ("<title>Flat Rate Prices</title>");
                        out.println ("</head>");
                        out.println ("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
                        out.println ("<P><P>");
                        out.println ("<table border=1 width=100%>");
                        out.println ("<th>Description<br>(Click to Open)</th><th>Date</th>");
        
                        Vector v;
                        
                        if (servicestop.equalsIgnoreCase("")) {
                        v = UniMasterWorksheet.getAllItems(con,servicestart);    
                        }
                        else {
                        v = UniMasterWorksheet.getAllItems(con,servicestart,servicestop);
                        }
                        int counter=0;
                        for (int i = 0 ; i < v.size(); i++)
                        {
                            UniMasterWorksheet t = (UniMasterWorksheet) v.elementAt(i);
                        
			    wsRec=t.getWsRec();
			    wsDate=t.getWsDate();
			    wsDesc=t.getWsDesc();
//CMINSERT HERE
                            out.println ("<tr>");
			out.println("<td><a href="+classdir+"UniCash?action=showworksheet&recnum="+wsRec+">"+wsDesc+"</a></td><td>"+wsDate+"</td></tr>");
                            }
                        
                        out.println ("</table>");
                        out.println ("<P><P>");
		con.close();
            }

private void doListFlatRate(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
			String action = req.getParameter("action");
			int phonelistperm=Integer.parseInt(doGetAllowModServAdmin(username));
                        String servicestart = req.getParameter("servicestart");
                        String servicestop = req.getParameter("serviceend");
                String custnum = req.getParameter("custnum");
                String callslip = req.getParameter("callslip");
		String psource = req.getParameter("psource");
                String trecnum = req.getParameter("crecnum");
                String quotenum = req.getParameter("quotenum");
		String catnum = req.getParameter("catnum");
		int crecnum=0;
		int icustnum=0;
		String CustType="";
		
		if (action.equalsIgnoreCase("showchargeselect")) {
                crecnum = Integer.parseInt(trecnum);
                icustnum = Integer.parseInt(custnum);
		CustType= doGetCustType(icustnum);
							}
		if (action.equalsIgnoreCase("showservpchargeselect")) {
                        out.println ("<a href="+classdir+"UniCash?action="+psource+"&custnum="+custnum+"&callslip="+callslip+"&quotenum="+quotenum+">Return to Select Menu</a>");
		}
               
       		int recnum=0;
                        String service=null;
                        String tm_primary;
                        String tm_add;
                        String sa_primary;
                        String sa_add;
			String jcode;
			String keycode;
			int code;
			String category="";
			String part="";
			double hours;
			double tm_partcost=0.00;
			double tm_salestax=0.00;
			double tot_part;
			double partcost;
			double laborcost=doGetLaborCost();
			double lab_cost=0.00;
			int specitem=0;
			String custnotes;
			String nodiscount;
			double labperhour = doLabPerHour();
			double psdiscount = doPsDiscount();
			double mrdiscount = doMrDiscount();
			double commarkup = doComMarkUp();
			double partmarkup = doPartMarkUp();
			double salestax = doSalesTax();
			double sitemlowprice = doSitemLowPrice();
			double sitemhighprice = doSitemHighPrice();
			double sitemhighhours = doSitemHighHours();
			String commercial="";
if (!action.equalsIgnoreCase("exportflatrate"))
		{
                        out.println ("<html>");
                        out.println ("<head>");
                        out.println ("<title>Flat Rate Prices</title>");
                        out.println ("</head>");
                        out.println ("<BODY TEXT=#000000 LINK=#0000ff VLINK=#000080 BGCOLOR=#ffffff> ");
		}
if (action.equalsIgnoreCase("listflatrate"))
		{
                        out.println ("<a href="+classdir+"UniCash?action=addflatrate&servicestart="+servicestart+"&serviceend="+servicestop+"&catnum="+catnum+">Add a Flat Rate Price</a>");
		}
else if (action.equalsIgnoreCase("showchargeselect")) {
	out.println("<a href="+classdir+"UniCash?action=addchargemenu&psource="+psource+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+">Return to Prior Menu</a>");
			}
	
if (action.equalsIgnoreCase("exportflatrate"))
		{
			res.setContentType("text/comma-seperated-values;charset=UTF-8");
			res.setHeader("Content-disposition","attachment;filename=FLATRATE.CSV");
		}
if (!action.equalsIgnoreCase("exportflatrate"))
		{
                        out.println ("<P><P>");
                        out.println ("<table border=1 width=100%>");
		}

if (action.equalsIgnoreCase("exportflatrate"))
		{
                        out.println ("code,part,category,hours,tm_labor,tm_parts,tm_sales_tax,tm_add_labor,tm_add_parts,tm_add_sales_tax,sc_lab,sc_parts,sc_sales_tax,sc_add_lab,sc_add_parts,sc_add_sales_tax,comm_lab,comm_parts,comm_sales_tax,partcost,lab_cost\n");
		}
else if (action.equalsIgnoreCase("listflatrate"))
		{
                        out.println ("<th>Service<br>(Click to Edit)</th><th>Category</th><th>T/M<br>Primary</th><th>T/M<br>Additional</th><th>S/C<br>Primary</th><th>S/C<br>Additional</th><th>Commercial</th><th>Code</th><th>Hours</th><th>KeyCode</th><th>PCost</th><th>Del</th>");
		}
else if (action.equalsIgnoreCase("showchargeselect")) {
                        if (CustType.equalsIgnoreCase("T")) {
                        out.println ("<th>Category</th><th>Service</th><th>T/M Primary</th><th>T/M Additional</th><th>Commercial</th>");
                        }
			else if (CustType.equalsIgnoreCase("F")) {
                        out.println ("<th>Category</th><th>Service</th><th>S/C Primary</th><th>S/C Additional</th><th>Commercial</th>");
			}
                        else {
                        out.println ("<th>Category</th><th>Service</th><th>T/M Primary</th><th>T/M Additional</th><th>S/C Primary</th><th>S/C Additional</th><th>Commercial</th>");
			}
		}
else if (action.equalsIgnoreCase("showservpchargeselect")) {
                        if (CustType.equalsIgnoreCase("T")) {
                        out.println ("<th>Category</th><th>Service</th><th>T/M Primary</th><th>T/M Additional</th><th>Commercial</th>");
                        }
			else if (CustType.equalsIgnoreCase("F")) {
                        out.println ("<th>Category</th><th>Service</th><th>S/C Primary</th><th>S/C Additional</th><th>Commercial</th>");
			}
                        else {
                        out.println ("<th>Category</th><th>Service</th><th>T/M Primary</th><th>T/M Additional</th><th>S/C Primary</th><th>S/C Additional</th><th>Commercial</th>");
			}
}
			if ((catnum==null)) { catnum=""; }
                        Vector v;
			if (catnum.equalsIgnoreCase("0")) {
				v = FlatRateTable.getAllItems(con);
				} else
			if (!catnum.equalsIgnoreCase("")) {
				v = FlatRateTable.getCatItems(con, catnum);
			} else  
                        if (servicestop.equalsIgnoreCase("")) {
                        v = FlatRateTable.getAllItems(con,servicestart);    
                        }
                        else {
                        v = FlatRateTable.getAllItems(con,servicestart,servicestop);
                        }
                        int counter=0;
                        for (int i = 0 ; i < v.size(); i++)
                        {
                            FlatRateTable t = (FlatRateTable) v.elementAt(i);
                       	  category = t.getCategory();
			  code = t.getCode();
			  part = t.getPart();
			  keycode=t.getKeycode();
			  hours=t.getHours();
			  partcost=t.getPartCost();
			  custnotes=t.getCustNotes();
			  nodiscount=t.getNoDiscount();
			  specitem=t.getSpecItem();

			  if (nodiscount.equalsIgnoreCase("1")) {
				tm_primary=""+partcost+"";
				tm_add=""+partcost+"";
				sa_primary=""+partcost+"";
				sa_add=""+partcost+"";
				commercial=""+partcost+"";
				partcost=0.00;
			  	lab_cost=(hours*laborcost);
			  	tm_partcost= partcost*partmarkup;
			  	tm_salestax = tm_partcost*salestax;
			  } else {
			  tm_partcost= partcost*partmarkup;
			  tm_salestax = tm_partcost*salestax;
			  tot_part = tm_partcost+tm_salestax;
			  tm_primary =  ""+ ((hours*labperhour)+ tot_part) +"";
			  tm_add = ""+ (Double.parseDouble(tm_primary)*mrdiscount) +"";
			  sa_primary = ""+ (Double.parseDouble(tm_primary)*psdiscount) +"";
			  sa_add = ""+ (Double.parseDouble(sa_primary)*mrdiscount) +"";
			  commercial= ""+ (Double.parseDouble(tm_primary)*commarkup)+"";
			  lab_cost=(hours*laborcost);
			  }
			  if (specitem==1) {
				  specitem=1;
				  	} 
			  else if (((partcost >= sitemlowprice)&&(partcost<=sitemhighprice))||((partcost<=sitemlowprice)&&(hours<=sitemhighhours))) {
				  specitem=1;
			  }
			if (keycode==null) {
				keycode="-";
			}
	if (action.equalsIgnoreCase("exportflatrate"))
		{
			out.println(""+code+",\""+part+"\",\""+category+"\",\""+hours+"\","+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_primary)-tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_salestax)+","+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_add)-tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_salestax)+","+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_primary)-tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_salestax)+","+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_add)-tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_salestax)+","+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_primary)-tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_salestax)+","+NumberFormat.getCurrencyInstance().format(Double.parseDouble(commercial)-tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_partcost)+","+NumberFormat.getCurrencyInstance().format(tm_salestax)+","+partcost+","+NumberFormat.getCurrencyInstance().format(lab_cost)+"\n");
		}
	else if (action.equalsIgnoreCase("listflatrate"))
		{
                        if (specitem==1)
                                {
                        out.println("<tr BGCOLOR=#A0B8C8>");
				}
			else {
                            out.println ("<tr>");
				}
			out.println("<td><a href="+classdir+"UniCash?action=editflatrate&servicestart="+servicestart+"&serviceend="+servicestop+"&recnum="+code+">"+part+"</a></td><td>"+category+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_primary))+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_add))+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_primary))+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_add))+"</td><td>"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(commercial))+"</td><td>"+code+"</td><td>"+hours+"</td><td>"+keycode+"</td><td>"+partcost+"</td><td><a href="+classdir+"UniCash?action=deleteflatrateprice&servicestart="+servicestart+"&serviceend="+servicestop+"&recnum="+code+"&catnum="+catnum+">Del</a></td></tr>");
		}
		else if (action.equalsIgnoreCase("showchargeselect")) {

                        if (specitem==1)
                                {
                        out.println("<tr BGCOLOR=#A0B8C8>");
				}
			else {
                            out.println ("<tr>");
				}
                        if (CustType.equalsIgnoreCase("T")) {
                            out.println ("<td>"+category+"</td><td>"+part+"</td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&camount="+tm_primary+"&srecnum="+code+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_primary))+"</a></td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+tm_add+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_add))+"</a></td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+commercial+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(commercial))+"</a></td></tr>");
			} else if (CustType.equalsIgnoreCase("F")) {

                            out.println ("<td>"+category+"</td><td>"+part+"</td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+sa_primary+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_primary))+"</a></td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+sa_add+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_add))+"</a></td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+commercial+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(commercial))+"</a></td></tr>");

			} else {

                            out.println ("<td>"+category+"</td><td>"+part+"</td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&camount="+tm_primary+"&screcnum="+code+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_primary))+"</a></td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+tm_add+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_add))+"</a></td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+sa_primary+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_primary))+"</a></td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+sa_add+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_add))+"</a></td><td><a href="+classdir+"UniCash?action=edselectcharge&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+commercial+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(commercial))+"</a></td></tr>");

	}
	
	}
else if (action.equalsIgnoreCase("showservpchargeselect")) {

                        if (specitem==1)
                                {
                        out.println("<tr BGCOLOR=#A0B8C8>");
				}
			else {
                            out.println ("<tr>");
				}

                        if (CustType.equalsIgnoreCase("T")) {
                            out.println ("<td>"+category+"</td><td>"+part+"</td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&camount="+tm_primary+"&screcnum="+code+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_primary))+"</a></td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+tm_add+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_add))+"</a></td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+commercial+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(commercial))+"</a></td></tr>");
			} else if (CustType.equalsIgnoreCase("F")) {

                            out.println ("<td>"+category+"</td><td>"+part+"</td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+sa_primary+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_primary))+"</a></td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+sa_add+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_add))+"</a></td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+commercial+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(commercial))+"</a></td></tr>");

			} else {

                            out.println ("<td>"+category+"</td><td>"+part+"</td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&camount="+tm_primary+"&srecnum="+code+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_primary))+"</a></td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+tm_add+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(tm_add))+"</a></td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+sa_primary+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_primary))+"</a></td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+sa_add+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(sa_add))+"</a></td><td><a href="+classdir+"UniCash?action=addservproposalitem&catnum=999&itemnum=99999&quotenum="+quotenum+"&psource="+psource+"&servicestart="+servicestart+"&servicestop="+servicestop+"&crecnum="+crecnum+"&custnum="+custnum+"&callslip="+callslip+"&srecnum="+code+"&camount="+commercial+">"+NumberFormat.getCurrencyInstance().format(Double.parseDouble(commercial))+"</a></td></tr>");
	}


		}
	
			}
                        
                        out.println ("</table>");
                        out.println ("<P><P>");
if (action.equalsIgnoreCase("listflatrate"))
		{
                        out.println ("<a href="+classdir+"UniCash?action=addflatrate&servicestart="+servicestart+"&serviceend="+servicestop+"&catnum="+catnum+">Add a Flat Rate Price</a>");
		if (phonelistperm==1) 
			{
out.println("<p><br><a href="+classdir+"UniCash?action=uploadflatrates>Update Server (MUST HAVE INTERNET CONNECT)</a><br><br>");
			}
		}
		if (action.equalsIgnoreCase("showservpchargeselect")) {
                        out.println ("<a href="+classdir+"UniCash?action="+psource+"&custnum="+custnum+"&callslip="+callslip+"&quotenum="+quotenum+">Return to Select Menu</a>");
		}
                            
		con.close();
            }


private void doUpdateSvcCharge(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
                        String servicestop = req.getParameter("servicestop");
                        String custnum = req.getParameter("custnum");
                        String service = req.getParameter("service");
                        String charge = req.getParameter("charge");
			String psource = req.getParameter("psource");
                        String callslip = req.getParameter("callslip");
                        String quantity = req.getParameter("quantity");
                        String trecnum = req.getParameter("crecnum");
                        int crecnum = Integer.parseInt(trecnum);
                        String tchargerec = req.getParameter("chargerec");
                        int chargerec = Integer.parseInt(tchargerec);
                        String srecnum = req.getParameter("srecnum");
                        String tfrcode = req.getParameter("frcode");
			int frcode = Integer.parseInt(tfrcode);
                       UniSvcCharges.UpdateItem(con, chargerec, callslip, service, quantity, charge, frcode); 
                        out.println("Your item has been added to the database<br>");
		con.close();
                res.sendRedirect(""+classdir+"UniCash?action="+psource+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"");
}


private void doUpdateSvcCharge2(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
                        String servicestop = req.getParameter("servicestop");
                        String custnum = req.getParameter("custnum");
                        String service = req.getParameter("service");
                        String charge = req.getParameter("charge");
                        String callslip = req.getParameter("callslip");
                        String quantity = req.getParameter("quantity");
                        String trecnum = req.getParameter("crecnum");
                        int crecnum = Integer.parseInt(trecnum);
                        String tchargerec = req.getParameter("chargerec");
                        int chargerec = Integer.parseInt(tchargerec);
                        String srecnum = req.getParameter("srecnum");
                        int frcode = Integer.parseInt(srecnum);
                       UniSvcCharges.UpdateItem(con, chargerec, callslip, service, quantity, charge, frcode); 
		con.close();
res.sendRedirect(""+classdir+"UniCash?action=addchargemenu&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"");
}

private void doSaveNewCharge(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
                        String servicestop = req.getParameter("servicestop");
                        String custnum = req.getParameter("custnum");
                        String service = req.getParameter("service");
                        String charge = req.getParameter("charge");
                        String callslip = req.getParameter("callslip");
                        String quantity = req.getParameter("quantity");
			String psource = req.getParameter("psource");
                        String trecnum = req.getParameter("crecnum");
                        int crecnum = Integer.parseInt(trecnum);
                        String srecnum = req.getParameter("srecnum");
                        String frcode = req.getParameter("frcode");
                        int ifrcode = Integer.parseInt(frcode);
                        
			UniSvcCharges.AddItem(con, callslip, service, quantity, charge, username, 0, ifrcode);
		
		con.close();
                        out.println("Your item has been added to the database<br>");
                        res.sendRedirect(""+classdir+"UniCash?action=addchargemenu&psource="+psource+"&custnum="+custnum+"&callslip="+callslip+"&crecnum="+crecnum+"");
}

private void doEdSelectCharge(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
                        String servicestart = req.getParameter("servicestart");
			String psource=req.getParameter("psource");
                        String servicestop = req.getParameter("servicestop");
                        String custnum = req.getParameter("custnum");
                        String service = null;
                        String camount = req.getParameter("camount");
                        String callslip = req.getParameter("callslip");
                        String trecnum = req.getParameter("crecnum");
			int frcode=0;
                        int crecnum = Integer.parseInt(trecnum);
                        String srecnum = req.getParameter("srecnum");
                        
                        Statement stmt = con.createStatement();
                        ResultSet rs = stmt.executeQuery("SELECT part, code FROM flat_rate_table where code="+srecnum+"");

		 while(rs.next())
                {
                    service=rs.getString("part");
		    frcode = rs.getInt("code");
                        

                        out.println("<html>");
                        out.println("<head>");
                        out.println("<title>Add Charge to Invoice</title>");
                        out.println("</head>");
                        out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savenewcharge\" name=\"addcall\">");
                        out.println("<table size=100% border=1>");
                        out.println("<tr><td>Description</td><td>");
                        out.println("<input type=\"text\" name=\"service\" value=\""+service+"\"></td>");
                        out.println("</tr>");
                 }
                        out.println("<tr><td>Price</td><td>");
                        out.println("<input type=\"text\" name=\"charge\" value=\""+camount+"\"></td>");
                        out.println("</tr>");
                        out.println("<tr><td>Callslip</td><td>");
                        out.println("<input type=\"text\" name=\"callslip\" value=\""+callslip+"\"></td></tr>");
                        out.println("<tr><td>Quantity</td><td>");
                        out.println("<input type=\"text\" name=\"quantity\" value=1></td></tr>");
                        out.println("</table>");
                        out.println("<CENTER>");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"servicestart\" VALUE=\""+servicestart+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"servicestop\" VALUE=\""+servicestop+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"crecnum\" VALUE=\""+crecnum+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"custnum\" VALUE=\""+custnum+"\">");
			out.println("<INPUT TYPE=\"hidden\" NAME=\"frcode\" VALUE=\""+frcode+"\">");
                        out.println("<INPUT TYPE=\"hidden\" NAME=\"psource\" VALUE=\""+psource+"\">");
                        out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
                        out.println("<INPUT TYPE=\"reset\">");
                        out.println("</CENTER>");
		con.close();
}          

private void doAddInspection(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
        int custnum = Integer.parseInt(tcustnum);
	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
        int eenum=0;
        int ecustnum=0;
        String brand=null;
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
	String callslip = null;
        String idate = null;
        int equip1 = 0;
        int equip2 = 0;
        int equip3 = 0;
        int equip4 = 0;
        String mbearing = null;
        String mblades = null;
        String ecoil = null;
        String dline = null;
        String dpan = null;
        String ielect = null;
        String mcap = null;
        String hstrips = null;
        String gpreassures = null;
        String ignition = null;
        String burners = null;
        String limits = null;
        String flame = null;
        String dinducer = null;
        String humidifier = null;
        String atemp = null;
        String tempsplit = null;
        String crlaa = null;
        String crlar = null;
        String ccapr = null;
        String ccapa = null;
        String frlaa = null;
        String frlar = null;
        String fcapr = null;
	String fcapa = null;
        String fbearing = null;
        String coilcond = null;
        String cleancoil = null;
        String contactor = null;
        String scap = null;
        String ctimedelay = null;
        String oelectrical = null;
        String comppad = null;
        String recommendations = null;
        String services = null;
        String dueamount = "0.00";
        String paidamount = "0.00";
        String lpres = null;
        String hpres = null;
        String startco = null;
        String runco = null;
        String stacktemp = null;
        String ventpipe = null;
        String oleaks = null;
        String ochimney = null;
        String opump = null;
        String ocontrols = null;
        String otstat = null;
        String oprimesafety = null;
        String osafetime = null;
        String oigntrans = null;
        String olubemotors = null;
        String ofulemix = null;
        String onozzle = null;
        String ogross = null;
        String onet = null;
        String osmoke = null;
        String oco2 = null;
        String oo2 = null;
        String oco = null;
        String oexcessair = null;
        String obreachdraft = null;
        String ofiredraft = null;
        String oeffic = null;
        String orating = null;
        String opower = null;
        String otank = null;
        String otcond = null;
        String odheat = null;
        String ocombustion = null;
        String oelectrodes = null;
        String obrush = null;
        String ofilters = null;
	String spres_return=null;
	String spres_supply=null;
	String spres_rated=null;
	String airflow=null;
        int followup = 0;
	String g_filter = null;
	String g_electrical = null;
	String g_looppres=null;
	String g_cleancoil=null;
	String g_cleandrain=null;
	String g_pansensor=null;
	String g_cleancomp=null;
	String g_cleanunit=null;
	String g_oilblower=null;
	String g_cleanpump=null;
	String g_tsplit=null;
	String g_pampr=null;
	String g_pampa=null;
	String g_compar=null;
	String g_compaa=null;
	String g_bampr=null;
	String g_bampa=null;
	String g_pdrop=null;
	String rductsize=null;
	String sductsize=null;
	String liqtemp=null;
	String sucttemp=null;
	String r_temp =null;
	String rw_temp =null;
	String s_temp =null;
	String mcfm=null;
	String out_temp=null;
	String expansion=null;
	String ahage=null;
	String conage=null;
		String  im_cleanbin=null;
		String  im_limeaway=null;
		String  im_bleach=null;
		String  im_watercomp=null;
		String  im_icecomp=null;
		String  im_filter=null;
		String  im_float=null;
		String  im_wpump=null;
		String  im_binsensor=null;
		String  im_testdump=null;
		String  im_electrical=null;
		String  im_comprated=null;
		String  im_compactual=null;
		String  ref_condcoilcond=null;
		String  ref_condcoilcleaned=null;
		String  ref_evapcoilcond=null;
		String  ref_evapcoilcleaned=null;
		String  ref_fanbladecond=null;
		String  ref_fanbladecleaned=null;
		String  ref_condensateline=null;
		String  ref_condfan=null;
		String  ref_doorgasket=null;
		String  ref_doorsclose=null;
		String  ref_productboxcond=null;
		String  ref_checkscrews=null;
		String  ref_evaptempin=null;
		String  ref_evaptempout=null;
		String  ref_boxtemp=null;
		String  ref_sightglasslevel=null;
		String  ref_refrigerant=null;
		String  ref_defrostclock=null;
		String  ref_defrosttimes=null;
		String  ref_doorheater=null;
		String  ref_electrical=null;
		String  ref_compamprated=null;
		String  ref_compampactual=null;
	

///////////////////////////////////////////////////////
// Actual calls start here
//////////////////////////////////////////////////////



///////////////////////////////////////////////////////
// Old Callslip Information
//////////////////////////////////////////////////////
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Call Slip</title>");
	out.println("</head>");

///////////////////////////////////////////////////////
// New Information 
//////////////////////////////////////////////////////

	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=saveinspection&custnum="+custnum+"\" name=\"addcat\">");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"idate\" value="+s+"></td>");
	out.println("<td>Call Slip</td><td>");
	out.println("<input type=\"text\" name=\"callslip\" size=15></td>");
	out.println("</tr>");
	out.println("</table>");
	out.println("<p></p><p><p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Air Handler</h3></th>");
	out.println("<tr><td>Filter</td><td><input type=\"text\" name=\"filter\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Motor Bearings</td><td><input type=\"text\" name=\"mbearing\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Motor Blades</td><td><input type=\"text\" name=\"mblades\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Evaporator Coil</td><td><input type=\"text\" name=\"ecoil\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Drain Line</td><td><input type=\"text\" name=\"dline\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Drain Pan</td><td><input type=\"text\" name=\"dpan\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Electrical</td><td><input type=\"text\" name=\"ielect\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Motor Capacitor</td><td><input type=\"text\" name=\"mcap\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Humidifier</td><td><input type=\"text\" name=\"humidifier\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Heat Strips</td><td><input type=\"text\" name=\"hstrips\" size=\"30\" value=\"-\"></td><td></td><td></td></tr>");
	out.println("<tr><td>Supply Db Temp</td><td><input type=\"text\" name=\"s_temp\" size=\"30\"></td>");
	out.println("<td>Return Db Temp</td><td><input type=\"text\" name=\"r_temp\" size=\"30\"></td></tr>");
	out.println("<tr><td>Return Wb Temp</td><td><input type=\"text\" name=\"rw_temp\" size=\"30\"></td>");
	out.println("<td>Temp Split</td><td><input type=\"text\" name=\"tempsplit\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Expansion Device</td><td><input type=\"text\" name=\"expansion\" size=\"30\"></td>");
	out.println("<td>Air Handler Age</td><td><input type=\"text\" name=\"ahage\" size=\"30\" value=\"-\"></td></tr>");
	out.println("</table>");

	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Gas Heat</h3></th>");
	out.println("<tr><td>Gas Pressure</td><td><input type=\"text\" name=\"gpreassures\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Ignition</td><td><input type=\"text\" name=\"ignition\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Burners</td><td><input type=\"text\" name=\"burners\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Limits</td><td><input type=\"text\" name=\"limits\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Flame</td><td><input type=\"text\" name=\"flame\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Draft Inducer</td><td><input type=\"text\" name=\"dinducer\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Start CO</td><td><input type=\"text\" name=\"startco\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Run CO</td><td><input type=\"text\" name=\"runco\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Stack Temp</td><td><input type=\"text\" name=\"stacktemp\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Vent Pipe</td><td><input type=\"text\" name=\"ventpipe\" size=\"30\" value=\"-\"></td></tr>");
	out.println("</table>");

	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Air Flow/Quality</h3></th><th></th>");
	out.println("<tr><td>Static Pressure Rated</td><td><input type=\"text\" name=\"spres_rated\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Static Pressure Supply</td><td><input type=\"text\" name=\"spres_supply\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Return Duct Size</td><td><input type=\"text\" name=\"rductsize\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Supply Duct Size</td><td><input type=\"text\" name=\"sductsize\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Static Pressure Return</td><td><input type=\"text\" name=\"spres_return\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Airflow</td><td><input type=\"text\" name=\"airflow\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Measured CFM</td><td><input type=\"text\" name=\"mcfm\" size=\"30\"></td></tr>");
	out.println("</table>");

	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Condensor</h3></th><th></th>");
	out.println("<tr><td>Suction Line Temp</td><td><input type=\"text\" name=\"sucttemp\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Liquid Line Temp</td><td><input type=\"text\" name=\"liqtemp\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Approach Temp</td><td><input type=\"text\" name=\"atemp\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Outdoor Temp</td><td><input type=\"text\" name=\"out_temp\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Comp. Rated Amps</td><td><input type=\"text\" name=\"crlar\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Comp. Actual Amps</td><td><input type=\"text\" name=\"crlaa\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Fan Amps Rated</td><td><input type=\"text\" name=\"frlar\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Fan Amps Actual</td><td><input type=\"text\" name=\"frlaa\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Comp. Cap Rated</td><td><input type=\"text\" name=\"ccapr\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Comp. Cap Actual</td><td><input type=\"text\" name=\"ccapa\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Fan Cap. Rated</td><td><input type=\"text\" name=\"fcapr\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Fan Cap. Actual</td><td><input type=\"text\" name=\"fcapa\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Coil Conditions</td><td><input type=\"text\" name=\"coilcond\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Cleaned Coil</td><td><input type=\"text\" name=\"cleancoil\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Start Capacitor</td><td><input type=\"text\" name=\"scap\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Time Delay</td><td><input type=\"text\" name=\"ctimedelay\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Electrical</td><td><input type=\"text\" name=\"oelectrical\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Contactor</td><td><input type=\"text\" name=\"contactor\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Condensor Pad</td><td><input type=\"text\" name=\"comppad\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Fan Bearings</td><td><input type=\"text\" name=\"fbearing\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Low Pressure</td><td><input type=\"text\" name=\"lpres\" size=\"30\" value=\"-\"></td>");
	out.println("<td>High Pressure</td><td><input type=\"text\" name=\"hpres\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Condensor Age</td><td><input type=\"text\" name=\"conage\" size=\"30\" value=\"-\"></td></tr>");
	out.println("</table>");

	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Oil Heat</h3></th><th></th>");
	out.println("<tr><td>Oil Leaks</td><td><input type=\"text\" name=\"oleaks\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Chimney and Flue</td><td><input type=\"text\" name=\"ochimney\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Pump Pressure</td><td><input type=\"text\" name=\"opump\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Controls</td><td><input type=\"text\" name=\"ocontrols\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Thermostat</td><td><input type=\"text\" name=\"otstat\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Primary Control Safety</td><td><input type=\"text\" name=\"oprimesafety\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Safety Timing</td><td><input type=\"text\" name=\"osafetime\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Ignition Transformer</td><td><input type=\"text\" name=\"oigntrans\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Lubricate Motors</td><td><input type=\"text\" name=\"olubemotors\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Fuel/Air Mix</td><td><input type=\"text\" name=\"ofulemix\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Nozzle Size</td><td><input type=\"text\" name=\"onozzle\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Gross Stack Temp</td><td><input type=\"text\" name=\"ogross\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Net Stack Temp</td><td><input type=\"text\" name=\"onet\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Smoke</td><td><input type=\"text\" name=\"osmoke\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>CO2</td><td><input type=\"text\" name=\"oco2\" value=\"-\" size=\"30\"></td>");
	out.println("<td>O2</td><td><input type=\"text\" name=\"oo2\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>CO</td><td><input type=\"text\" name=\"oco\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Excess Air</td><td><input type=\"text\" name=\"oexcessair\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Breech Draft</td><td><input type=\"text\" name=\"obreachdraft\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Overfire Draft</td><td><input type=\"text\" name=\"ofiredraft\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Efficiency</td><td><input type=\"text\" name=\"oeffic\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Rating (Excellent, Good, Fair, Poor)</td><td><input type=\"text\" name=\"orating\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Chimney/Power Vent</td><td><input type=\"text\" name=\"opower\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Tank Size</td><td><input type=\"text\" name=\"otank\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Tank Condition</td><td><input type=\"text\" name=\"otcond\" value=\"-\" size=\"30\"></td>"); 
	out.println("<td>Domestic Hot Water</td><td><input type=\"text\" name=\"odheat\" value=\"-\" size=\"30\"></td></tr>");
	out.println("<tr><td>Combustion Chamber</td><td><input type=\"text\" name=\"ocombustion\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Electrodes</td><td><input type=\"text\" name=\"oelectrodes\" value=\"-\" size=\"30\"></td></tr>"); 
	out.println("<tr><td>Boiler/Furnace Brush/Vacuum</td><td><input type=\"text\" name=\"obrush\" value=\"-\" size=\"30\"></td>");
	out.println("<td>Filters</td><td><input type=\"text\" name=\"ofilters\" value=\"-\" size=\"30\"></td></tr>");
	out.println("</table>");

	out.println("<p></p><p></p>");
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Geothermal</h3></th><th></th>");
	out.println("<tr><td>Loop Pressure</td><td><input type=\"text\" name=\"g_looppres\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Pressure Drop</td><td><input type=\"text\" name=\"g_pdrop\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Comp. Rated Amps</td><td><input type=\"text\" name=\"g_compar\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Comp. Actual Amps</td><td><input type=\"text\" name=\"g_compaa\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Blower Amps Rated</td><td><input type=\"text\" name=\"g_bampr\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Blower Amps Actual</td><td><input type=\"text\" name=\"g_bampa\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Pump Amps Rated</td><td><input type=\"text\" name=\"g_pampr\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Pump Amps Actual</td><td><input type=\"text\" name=\"g_pampa\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Cleaned Coil</td><td><input type=\"text\" name=\"g_cleancoil\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Cleaned Compartments</td><td><input type=\"text\" name=\"g_cleancomp\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Clean Drainlines</td><td><input type=\"text\" name=\"g_cleandrain\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Oil Blower</td><td><input type=\"text\" name=\"g_oilblower\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Clean Cond. Pump</td><td><input type=\"text\" name=\"g_cleanpump\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Temp Split</td><td><input type=\"text\" name=\"g_tsplit\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Electrical</td><td><input type=\"text\" name=\"g_electrical\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Filter</td><td><input type=\"text\" name=\"g_filter\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Cleaned Unit</td><td><input type=\"text\" name=\"g_cleanunit\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Checked Pan Sensor</td><td><input type=\"text\" name=\"g_pansensor\" size=\"30\" value=\"-\"></td></tr>");
	out.println("</table>");
	out.println("<p></p><p></p>");
	
	out.println("<table size=100% border=1>");
	out.println("<th><h3>Ice Machine</h3></th><th></th>");
	out.println("<tr><td>Clean Ice Bin</td><td><input type=\"text\" name=\"im_cleanbin\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Clean With LimeAway</td><td><input type=\"text\" name=\"im_limeaway\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Clean With Bleach</td><td><input type=\"text\" name=\"im_bleach\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Clean All Water Components</td><td><input type=\"text\" name=\"im_watercomp\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Clean All Ice Components</td><td><input type=\"text\" name=\"im_icecomp\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Clean / Check Water Filter</td><td><input type=\"text\" name=\"im_filter\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Clean Float</td><td><input type=\"text\" name=\"im_float\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Clean Water Pump</td><td><input type=\"text\" name=\"im_wpump\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Check Bin Sensor</td><td><input type=\"text\" name=\"im_binsensor\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Run 3 Batches and Dump</td><td><input type=\"text\" name=\"im_testdump\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Check Electrical</td><td><input type=\"text\" name=\"im_electrical\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Compressor Amps Rated</td><td><input type=\"text\" name=\"im_comprated\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Compressor Amps Actual</td><td><input type=\"text\" name=\"im_compactual\" size=\"30\" value=\"-\"></td></tr>");
	out.println("</table>");
	out.println("<p></p><p></p>");


	out.println("<table size=100% border=1>");
	out.println("<th><h3>Refrigeration</h3></th><th></th>");
	out.println("<tr><td>Condensor Coil Condition</td><td><input type=\"text\" name=\"ref_condcoilcond\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Condensor Coil Cleaned</td><td><input type=\"text\" name=\"ref_condcoilcleaned\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Evaperator Coil Condition</td><td><input type=\"text\" name=\"ref_evapcoilcond\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Evaperator Coil Cleaned</td><td><input type=\"text\" name=\"ref_evapcoilcleaned\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Fan Blade Condition</td><td><input type=\"text\" name=\"ref_fanbladecond\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Fan Blade Cleaned</td><td><input type=\"text\" name=\"ref_fanbladecleaned\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Cleaned Condensate Line</td><td><input type=\"text\" name=\"ref_condensateline\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Condensor Fan</td><td><input type=\"text\" name=\"ref_condfan\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Door Gaskets</td><td><input type=\"text\" name=\"ref_doorgasket\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Doors Close Properly</td><td><input type=\"text\" name=\"ref_doorsclose\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Product Box Condition</td><td><input type=\"text\" name=\"ref_productboxcond\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Check Screws</td><td><input type=\"text\" name=\"ref_checkscrews\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Evaporator Air Temp In</td><td><input type=\"text\" name=\"ref_evaptempin\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Evaporator Air Temp Out</td><td><input type=\"text\" name=\"ref_evaptempout\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Box Temp</td><td><input type=\"text\" name=\"ref_boxtemp\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Sight Glass Level</td><td><input type=\"text\" name=\"ref_sightglasslevel\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Refrigerant</td><td><input type=\"text\" name=\"ref_refrigerant\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Defrost Clock</td><td><input type=\"text\" name=\"ref_defrostclock\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Defrost Times</td><td><input type=\"text\" name=\"ref_defrosttimes\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Check Electrical</td><td><input type=\"text\" name=\"ref_electrical\" size=\"30\" value=\"-\"></td></tr>");
	out.println("<tr><td>Compressor Amp Rated</td><td><input type=\"text\" name=\"ref_compamprated\" size=\"30\" value=\"-\"></td>");
	out.println("<td>Compressor Amp Actual</td><td><input type=\"text\" name=\"ref_compampactual\" size=\"30\" value=\"-\"></td></tr>");	
	out.println("</table>");
	out.println("<p></p><p></p>");
		
	

	out.println("<table size=100% border=1>");
///////////////////////////////////////////////////////
// Here is where the services - recomm - notes area is
//////////////////////////////////////////////////////
	out.println("<tr><td>Services</td><td>");
	out.println("<textarea name=\"services\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");

	out.println("<tr><td>Recommendations</td><td>");
	out.println("<textarea name=\"recommendations\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Parts Needed</td><td>");
	out.println("<textarea name=\"parts\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	//out.println("<tr><td>Notes</td><td>");
	//out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	//out.println("</td></tr>");

	out.println("<tr><td>Add Follow-up</td><td>");
	out.println("<input type=\"checkbox\" name=\"followup\" value=1></td></tr>");

	out.println("</table>");

/////////////////////////////////////////////
// Here is where the equipment section starts 
/////////////////////////////////////////////

        Vector v;
        v = UniEquip.getAllItems(con,custnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Number</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniEquip t = (UniEquip) v.elementAt(i);
		eenum=t.getId();
		ecustnum=t.getCustnum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		notes=t.getNotes();
                out.println("<tr><td>"+eenum+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
                }
	out.println("</table>");

	out.println("</table>");
	out.println("<h3>Enter Equipment Number</h3>");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Equipment 1</td><td><input type=\"text\" name=\"equip1\" size=\"30\" value=\"0\"></td><td>Equipment 2</td><td><input type=\"text\" name=\"equip2\" size=\"30\" value=\"0\"></td></tr>");
	out.println("<tr><td>Equipment 3</td><td><input type=\"text\" name=\"equip3\" size=\"30\" value=\"0\"></td><td>Equipment 4</td><td><input type=\"text\" name=\"equip4\" size=\"30\" value=\"0\"></td></tr>");
	out.println("</table>");


	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\" >");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<input type=\"hidden\" name=\"dueamount\" value=\""+dueamount+"\">");
	out.println("<input type=\"hidden\" name=\"paidamount\" value=\""+paidamount+"\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}


private void doPrintCheckme(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
	throws Exception
{
Format formatter;
Calendar now = Calendar.getInstance();
Date date = new Date();
formatter = new SimpleDateFormat("yyyy-MM-dd");
String s = formatter.format(date);
int hour = now.get(Calendar.HOUR_OF_DAY); 
int second = now.get(Calendar.SECOND);
int year = now.get(Calendar.YEAR);
int month = now.get(Calendar.MONTH);
int minute = now.get(Calendar.MINUTE);
int millisecond = now.get(Calendar.MILLISECOND);
String tcustnum = req.getParameter("custnum");
int custnum = Integer.parseInt(tcustnum);
String tcrecnum = req.getParameter("crecnum");
int crecnum = Integer.parseInt(tcrecnum);
String nate_id=doGetTechInfo_nateid(username);
int nateid=Integer.parseInt(nate_id);
 int eenum=0;
int ecustnum=0;
String brand=null;
String modelnum=null;
String serialnum=null;
String filter=null;
String notes=null;
String callslip=null;
String cdate=null;
int equip1=0;
int equip2=0;
int equip3=0;
int equip4=0;
String reason=null;
String services=null;
String recommendations=null;
String rscheduled=null;
String charges=null;
String collected=null;
int followup=0;
String descript;
String ccallslip;
double quant;
double price;
double total;
double totalcharge=0.00;
int recnum;
String cname=null;
String address1=null;
String address2=null;
String city =null;
String state=null;
String zip=null;
String homephone=null;
String altphone=null;
String cust_notes=null;
String etype="";
String custsite=null;
String cemail=null;
String sitenum=null;
	
String oa1= "-";
String oa2= "-";
String rwb1= "-";
String rwb2= "-";
String rdb1= "-";
String rdb2= "-";
String sdb1= "-";
String sdb2= "-";
String slt1= "-";
String slt2= "-";
String est1= "-";
String est2= "-";
String cst1= "-";
String cst2= "-";
String llt1= "-";
String llt2= "-";
String lp1= "-";
String lp2= "-";
String hp1= "-";
String hp2= "-";
String ss1= "-";
String ss2= "-";
String rs1= "-";
String rs2= "-";
String rfc1= "-";
String rca1= "-";
String afcor= "-";
String csp= "-";
String newins= "-";
String acsuite= "-";
String acn= "-";
String comp= "-";
ResultSet rs;
Statement stmt = con.createStatement();
String ttype= "-";
String actype= "-";
String manyear= "-";
String min1= "-";
String min2= "-";
String rtype= "-";
String trueflow= "-";
String hport= "-";
String mdevice= "-";
String targetas="-";
String tech_init = doGetTechInfo_init(username);
String tech_name = doGetTechInfo_name(username);
String tech_truck = doGetTechInfo_truck(username);

out.println("<html><basefont size=-1>");
out.println("<head><title>Equipment Check</title></head>");
doMHeader(req, res, out, session, username);

// pull checkme info here



            Vector v;
            v = UniCheckMe.getIndItems(con,custnum,crecnum);
		if (v.size()!=0) {
               		 for (int i = 0 ; i < v.size(); i++)
                	{
                       	UniCheckMe t = (UniCheckMe) v.elementAt(i);
	oa1=t.getOa1();
	oa2=t.getOa2();
	rwb1=t.getRwb1();
	rwb2=t.getRwb2();
	rdb1=t.getRdb1();
	rdb2=t.getRdb2();
	sdb1=t.getSdb1();
	sdb2=t.getSdb2();
	slt1=t.getSlt1();
	slt2=t.getSlt2();
	est1=t.getEst1();
	est2=t.getEst2();
	cst1=t.getCst1();
	cst2=t.getCst2();
	llt1=t.getLlt1();
	llt2=t.getLlt2();
	lp1=t.getLp1();
	lp2=t.getLp2();
	hp1=t.getHp1();
	hp2=t.getHp2();
	ss1=t.getSs1();
	ss2=t.getSs2();
	rs1=t.getRs1();
	rs2=t.getRs2();
	rfc1=t.getRfc1();
	rca1=t.getRca1();
	afcor=t.getAfcor();
	csp=t.getCsp();
	newins=t.getNewins();
	acsuite=t.getAcsuite();
	acn=t.getAcn();
	comp=t.getComp();
	ttype=t.getTtype();
	actype=t.getActype();
	manyear=t.getManyear();
	min1=t.getMin1();
	min2=t.getMin2();
	rtype=t.getRtype();
	trueflow=t.getTrueflow();
	hport= t.getHport();
	mdevice=t.getMdevice();
	targetas=t.getTargetas();
	callslip=t.getCallslip();
	services=t.getServices();
	recommendations=t.getRecommendations();
	rscheduled=t.getRscheduled();
	reason=t.getReason();
                	equip1=t.getEquip1();
                	equip2=t.getEquip2();
                	equip3=t.getEquip3();
                	equip4=t.getEquip4();
		}
	}

out.println("<br><font size=2>");
out.println("<table border=0 width=\"95%\" align=\"center\"><td width=\"30%\">");
//out.println("<b align=Left>Service Invoice:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;Call Slip: "+callslip+"<br>&nbsp;&nbsp;&nbsp;&nbsp;Call Date: "+doFormatDate(getDate(cdate))+"<br><br>");
out.println("<b align=Left>Equipment Check:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;Call Slip: "+callslip+"<br>&nbsp;&nbsp;&nbsp;&nbsp;Call Date: "+cdate+"<br><br>");
out.println("</td>");


                Vector vc;
                vc = UniCustomer.getIndItem(con, custnum);
                int counter=0;
                String custtype = null;
                for (int ic = 0 ; ic < vc.size(); ic++)
                {
                        UniCustomer tc = (UniCustomer) vc.elementAt(ic);
                        custtype = tc.getCustType();
			cname=tc.getCustomerName();
			address1=tc.getAddress1();
			address2=tc.getAddress2();
			city =tc.getCity();
			state=tc.getState();
			zip=tc.getZip();
			homephone=tc.getHomePhone();
			altphone=tc.getAltPhone();
			cust_notes=tc.getCustomerNotes();
			custsite=tc.getCustSite();
			sitenum=tc.getSiteNum();
			cemail=tc.getCEmail();
		}	

out.println("<td width=\"30%\">");
out.println("<b>Customer:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;"+cname+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+address1+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+city+","+state+"<br>&nbsp;&nbsp;&nbsp;"+cemail+"");
out.println("</td>");

out.println("<td width=\"30%\">");
out.println("Customer Number / Site:&nbsp;&nbsp;&nbsp;"+custsite+"&nbsp;/&nbsp;"+sitenum+"<br>Home Phone:&nbsp;&nbsp;&nbsp;"+homephone+"<br>Alt. Phone:&nbsp;&nbsp;&nbsp;"+altphone+"");
out.println("</td>");

out.println("</table>");
if (custnum==267)
	{

rs = stmt.executeQuery("select inv_detail.itemnum, callslip, date as idate, itemname, quantity as quant, description from inv_detail, inv_items where inv_detail.itemnum=inv_items.itemnum and inv_detail.date='"+cdate+"' and inv_detail.callslip='"+callslip+"' order by description");
} else {
rs = stmt.executeQuery("select inv_detail.itemnum as itemnum, callslip, date as idate, itemname, abs(quantity) as quant, description from inv_detail, inv_items where inv_detail.itemnum=inv_items.itemnum and inv_detail.date='"+cdate+"' and inv_detail.callslip='"+callslip+"' order by description");
}
if (rs!= null) {
	out.println("<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parts Used</h4>");
	out.println("<table width=\"95%\" align=\"center\" border=1>");
	out.println("<font size=1>");
	out.println("<th>Key</th><th>Part</th><th>Quantity</th><th>Date</th>");
	while (rs.next()) {
		String description = rs.getString("description");
		String itemname=rs.getString("itemname");
		String pquant = rs.getString("quant");
		String idate = doFormatDate(getDate(rs.getString("idate")));
		out.println("<tr><td>"+description+"</td><td>"+itemname+"</td><td>"+pquant+"</td><td>"+idate+"</td></tr>");
		}
	out.println("</font>");
	out.println("</table>");
	}


	out.println("<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Equipment</h4>");
	out.println("<table width=\"95%\" align=\"center\" border=1>");
	out.println("<font size=1>");
Statement stmt2 = con.createStatement();
ResultSet rse = stmt2.executeQuery("SELECT * FROM  equipment where enum='"+equip1+"' or enum='"+equip2+"' or enum='"+equip3+"' or enum='"+equip4+"';");
out.println("<th>Type</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
	 while(rse.next())
	{
	brand = rse.getString("brand");
	modelnum = rse.getString("modelnum");
	serialnum = rse.getString("serialnum");
	filter = rse.getString("filter");
	notes = rse.getString("notes");
	etype = rse.getString("etype");
if (etype==null) { 
	etype = "-";
	}
out.println("<tr><td>"+etype+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
	}
	out.println("</font>");
	out.println("</table>");



	out.println("<table align=\"center\" size=\"95%\" width=\"95%\" border=1>");
	out.println("<th></th><th></th><th></th>");
	out.println("<tr><td align=\"left\">");
	out.println("<table width=\"95%\" size=\"95%\" border=0>");
	
	out.println("<th>Program Information</th><tr>");
	out.println("<td width=\"50%\">Cool Smart Program</td>");
	out.println("<td width=\"50%\">"+csp+"</td></tr>");
	
	out.println("<tr>");
	out.println("<td>New Install?</td>");
	out.println("<td>"+newins+"</td></tr>");

	out.println("<tr>");
	out.println("<td>A/C Type</td>");
	out.println("<td>"+actype+"</td></tr>");

	out.println("<tr>");
	out.println("<td>Test Type</td>");
	out.println("<td>"+ttype+"</td></tr>");

	out.println("<tr>");
	out.println("<td>Suite/Space</td>");
	out.println("<td>"+acsuite+"</td></tr>");

	out.println("<tr>");
	out.println("<td>AC Number</td>");
	out.println("<td>"+acn+"</td></tr>");

	out.println("<tr>");
	out.println("<td>Compressor Number</td>");
	out.println("<td>"+comp+"</td></tr>");

	out.println("<tr>");
	out.println("<td>Year Manufactured</td>");
	out.println("<td>"+manyear+"</td></tr>");

	out.println("</table><br><br>");

out.println("<table width=\"95%\" size=\"95%\" border=0>");

out.println("<th>Test Information</th><tr>");
out.println("<td>Minutes Running Before Initial Test</td>");
out.println("<td>"+min1+"</td></tr>");

out.println("<tr>");
out.println("<td>Minutes Running Since Repairs Made</td>");
out.println("<td>"+min2+"</td></tr>");

out.println("<tr>");
out.println("<td>Refrigerant Type</td>");
out.println("<td>"+rtype+"</td></tr>");

out.println("<tr>");
out.println("<td>True Flow Meter</td>");
out.println("<td>"+trueflow+"</td></tr>");

out.println("<tr>");
out.println("<td>High Side Port</td>");
out.println("<td>"+hport+"</td></tr>");

out.println("<tr>");
out.println("<td>Metering Device</td>");
out.println("<td>"+mdevice+"</td></tr>");

out.println("<tr>");
out.println("<td>Target Subcooling/Approach</td>");
out.println("<td>"+targetas+"</td></tr>");

out.println("</table>");

	out.println("</td><td>");
out.println("</td><td>");

out.println("<table size=95% border=0>");
out.println("<center><b>Test Results</b></center><th>Temperatures/Pressures</th><th>Initial Test</th><th>Test After<br>Repairs</th>");

out.println("<tr>");
out.println("<td>Condenser Air Entering Temp</td>");
out.println("<td>"+oa1+"</td>");
out.println("<td>"+oa2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Return Air Wet Bulb Temp</td>");
out.println("<td>"+rwb1+"</td>");
out.println("<td>"+rwb2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Return Air Dry Bulb Temp</td>");
out.println("<td>"+rdb1+"</td>");
out.println("<td>"+rdb2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Supply Air Dry Bulb Temp</td>");
out.println("<td>"+sdb1+"</td>");
out.println("<td>"+sdb2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Suction Line Temp</td>");
out.println("<td>"+slt1+"</td>");
out.println("<td>"+slt2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Evaporator Saturation Temp</td>");
out.println("<td>"+est1+"</td>");
out.println("<td>"+est2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Condenser Saturation Temp</td>");
out.println("<td>"+cst1+"</td>");
out.println("<td>"+cst2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Liquid Line Temp</td>");
out.println("<td>"+llt1+"</td>");
out.println("<td>"+llt2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Suction (Low side) Pressure</td>");
out.println("<td>"+lp1+"</td>");
out.println("<td>"+lp2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Discharge (High side) Pressure</td>");
out.println("<td>"+hp1+"</td>");
out.println("<td>"+hp2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Supply Static Pressure</td>");
out.println("<td>"+ss1+"</td>");
out.println("<td>"+ss2+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Return Static Pressure</td>");
out.println("<td>"+rs1+"</td>");
out.println("<td>"+rs2+"</td>");
out.println("</tr>");

out.println("</table></tr></td></table><br><br>");


	out.println("<center><table size=\"95%\" width=\"95%\" border=1>");
	out.println("<th>Corrections and Repairs</th>");

	out.println("<tr>");
	out.println("<td width=\"50%\">Factory Stamped Charge</td>");
	out.println("<td width=\"50%\">"+rfc1+"</td></tr>");

	out.println("<tr>");
	out.println("<td>Refrigerant Charge Adjustment</td>");
	out.println("<td>"+rca1+"</td></tr>");

	out.println("<tr>");
	out.println("<td>Air Flow Corrections</td>");
	out.println("<td>"+afcor+"</td></tr>");

	//out.println("<tr>");
	//out.println("<td></td>");
	//out.println("<td><input type=\"text\" name=\"\" size=\"20\" value="++"></td></tr>");
	out.println("</table></center><br><br>");

out.println("<center><table size=\"95%\" width=\"95%\" border=1><td width=\"50%\" size=\"50%\"");
out.println("<center><table size=\"95%\" width=\"95%\" border=0>");

out.println("<center><b>Test Results - Before Repairs</b></center><th>Temperatures/Pressures</th><th>Target</th><th>Actual</th>");

int sh1 = Integer.parseInt(slt1)-Integer.parseInt(est1);

String ttempsplit1="0.00";
String superheat1="0.00";
TempSplit t = new TempSplit(con, rdb1, rwb1);
ttempsplit1=t.getTempSplit();
Superheat sh = new Superheat(con,oa1, rwb1);
superheat1=sh.getSuperheat();


out.println("<tr>");
out.println("<td>Superheat</td>");
out.println("<td>"+superheat1+"</td>");
out.println("<td>"+sh1+"</td>");
out.println("</tr>");

int at1 = Integer.parseInt(llt1)-Integer.parseInt(oa1);
int subcool1 = Integer.parseInt(cst1) - Integer.parseInt(llt1);
int af1 = Integer.parseInt(rdb1) - Integer.parseInt(sdb1);

out.println("<tr>");
out.println("<td>Approach Temp</td>");
out.println("<td>"+targetas+"</td>");
out.println("<td>"+at1+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Subcooling</td>");
out.println("<td>"+targetas+"</td>");
out.println("<td>"+subcool1+"</td>");
out.println("</tr>");


out.println("<tr>");
out.println("<td>Airflow / Temp Split</td>");
out.println("<td>"+ttempsplit1+"</td>");
out.println("<td>"+af1+"</td>");
out.println("</tr>");

//out.println("<tr>");
//out.println("<td></td>");
//out.println("<td><input type=\"text\" name=\"\" size=\"20\" value="++"></td></tr>");
out.println("</table></center><br><br>");

out.println("If TempSplit lower than target you have to much air.<br>If TempSplit higher than target you do not have enough air flow.<br>");
out.println("Use Superheat for non-txv metering device.<br>Use subcooling for TXV metering device.<br>Use Aproach temp for Lennox equipment only.<br>");
 
out.println("</td><td width=\"50%\" size=\"50%\">");

if (!oa2.equalsIgnoreCase("-")&&!llt2.equalsIgnoreCase("-")&&!cst2.equalsIgnoreCase("-")&&!sdb2.equalsIgnoreCase("-")&&!rdb2.equalsIgnoreCase("-")&&!slt2.equalsIgnoreCase("-")&&!est2.equalsIgnoreCase("-"))
{
out.println("<center><table size=\"95%\" width=\"95%\" border=0>");
out.println("<center><b>Test Results - After Repairs</b></center><th>Temperatures/Pressures</th><th>Target</th><th>Actual</th>");
int sh2 = Integer.parseInt(slt2)-Integer.parseInt(est2);
String ttempsplit2="0.00";
String superheat2="0.00";
TempSplit t2 = new TempSplit(con, rdb2, rwb2);
ttempsplit2=t2.getTempSplit();
Superheat ssh2 = new Superheat(con,oa2, rwb2);
superheat2=ssh2.getSuperheat();
out.println("<tr>");
out.println("<td>Superheat</td>");
out.println("<td>"+superheat2+"</td>");
out.println("<td>"+ssh2+"</td>");
out.println("</tr>");
int at2 = Integer.parseInt(llt2)-Integer.parseInt(oa2);
int subcool2 = Integer.parseInt(cst2) - Integer.parseInt(llt2);
int af2 = Integer.parseInt(rdb2) - Integer.parseInt(sdb2);
out.println("<tr>");
out.println("<td>Approach Temp</td>");
out.println("<td>"+targetas+"</td>");
out.println("<td>"+at2+"</td>");
out.println("</tr>");
out.println("<tr>");
out.println("<td>Subcooling</td>");
out.println("<td>"+targetas+"</td>");
out.println("<td>"+subcool2+"</td>");
out.println("</tr>");
out.println("<tr>");
out.println("<td>Airflow / Temp Split</td>");
out.println("<td>"+ttempsplit2+"</td>");
out.println("<td>"+af2+"</td>");
out.println("</tr>");
out.println("</table></center><br><br>");
}
out.println("</td></table><br><br>");
		out.println("<font size=1>");
		out.println("<table width=\"95%\" size=\"95%\" align=\"center\" border=1 height=5>");
		out.println("<font size=1");
if ((services!=null)||(recommendations!=null)||(rscheduled!=null)) {
		out.println("<br>");
		out.println("<table width=\"95%\" size=\"95%\" align=\"center\" border=1>");
		out.println("<font size=1>");
		if (services.length()>1) {
		out.println("<tr><td><h4>Services</h4></td></tr><tr><td>"+services+"");
		out.println("</td></tr>");
		}

		if (recommendations.length()>1) {
		out.println("<P></P><br>");
		out.println("<tr><td><h4>Our Trained Technician Recommends</h4></td></tr><tr><td>"+recommendations+"");
		out.println("<table><font size=1><tr><td>Customer Accepts Recomendations</td><td>______________</td><td>Customer Declines Recommendations</td><td>________________</td></tr></font></table></tr>");
		out.println("</td></tr>");
		}
	
		if (rscheduled.length()>1) {
		out.println("<tr><td><h4>Repair Scheduled</h4></td></tr><tr><td>"+rscheduled+"");
		out.println("</td></tr>");
		}
	out.println("</font>");
	out.println("</table>");
	out.println("");
	}

	out.println("</font>");
	out.println("<table width=\"95%\" align=\"center\">");
	out.println("<font size=1>");
	out.println("<tr>");
	out.println("<P></p><br><br>");

	out.println("<table width=\"95%\" align=\"center\">");
	out.println("<font size=1>");
out.println("<tr><td>Technician Name</td><td>"+tech_name+"</td></tr>");
                        if (nateid==0) {
                        if (custtype.equalsIgnoreCase("T")) {

		out.println("<tr><td></td><td><b>Please ask our technician how you could save money on this call with a Planned Service Agreement!</b></td></tr>");
                        }
			else if (custtype.equalsIgnoreCase("F")) {

		out.println("<tr><td></td><td><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
                        else {
		out.println("<tr><td></td><td><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
			//NO NATE ID - DO NOT PRINT NATE INFO
			} else {
	out.println("<tr><td> ");
	out.println("<IMG SRC=\"http://127.0.0.1:8080/servsys/natelogo.gif\" NAME=\"NateLogo\" ALIGN=LEFT WIDTH=60 HEIGHT=60 BORDER=0><BR CLEAR=LEFT>");
	out.println("</td>");
                        if (custtype.equalsIgnoreCase("T")) {

		out.println("<td>Your Service Technician is NATE Certified - ID: "+nate_id+"<br><b>Please ask our technician how you could save money on this call with a Planned Service Agreement!</b></td></tr>");
                        }
			else if (custtype.equalsIgnoreCase("F")) {

		out.println("<td>Your Service Technician is NATE Certified - ID: "+nate_id+"<br><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
                        else {
		out.println("<td>Your Service Technician is NATE Certified - ID: "+nate_id+"<br><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
			}
out.println("</font></table>");

out.println("</body>");
out.println("</html>");
	
		con.close();
}
//////////////////////////////////////////////////////
//SEND CHECKME STARTS HERE
/////////////////////////////////////////////////////


private void doMailCheckme(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
	throws Exception
{
Format formatter;
Calendar now = Calendar.getInstance();
Date date = new Date();
formatter = new SimpleDateFormat("yyyy-MM-dd");
      String smtpuser = doGetSmtpUser(username);
      String smtppassword = doGetSmtpPassword(username);
String s = formatter.format(date);
int hour = now.get(Calendar.HOUR_OF_DAY); 
int second = now.get(Calendar.SECOND);
int year = now.get(Calendar.YEAR);
int month = now.get(Calendar.MONTH);
int minute = now.get(Calendar.MINUTE);
int millisecond = now.get(Calendar.MILLISECOND);
String tcustnum = req.getParameter("custnum");
String tcrecnum = req.getParameter("crecnum");
String listdate = req.getParameter("listdate");
String nate_id=doGetTechInfo_nateid(username);
int nateid=Integer.parseInt(nate_id);
 int eenum=0;
int ecustnum=0;
String brand=null;
String modelnum=null;
String serialnum=null;
String filter=null;
String notes=null;
String callslip=null;
String cdate=null;
int equip1=0;
int equip2=0;
int equip3=0;
int equip4=0;
String reason=null;
String services=null;
String recommendations=null;
String rscheduled=null;
String charges=null;
String collected=null;
int followup=0;
String descript;
String ccallslip;
double quant;
double price;
double total;
double totalcharge=0.00;
int recnum;
String cname=null;
String address1=null;
String address2=null;
String city =null;
String state=null;
String zip=null;
String homephone=null;
String altphone=null;
String cust_notes=null;
String etype="";
String custsite=null;
String cemail=null;
String sitenum=null;
	
String oa1= "-";
String oa2= "-";
String rwb1= "-";
String rwb2= "-";
String rdb1= "-";
String rdb2= "-";
String sdb1= "-";
String sdb2= "-";
String slt1= "-";
String slt2= "-";
String est1= "-";
String est2= "-";
String cst1= "-";
String cst2= "-";
String llt1= "-";
String llt2= "-";
String lp1= "-";
String lp2= "-";
String hp1= "-";
String hp2= "-";
String ss1= "-";
String ss2= "-";
String rs1= "-";
String rs2= "-";
String rfc1= "-";
String rca1= "-";
String afcor= "-";
String csp= "-";
String newins= "-";
String acsuite= "-";
String acn= "-";
String comp= "-";
ResultSet rs;
Statement stmt = con.createStatement();
String ttype= "-";
String actype= "-";
String manyear= "-";
String min1= "-";
String min2= "-";
String rtype= "-";
String trueflow= "-";
String hport= "-";
String mdevice= "-";
String targetas="-";
int custnum=0;
String mbody="";
String tech_init = doGetTechInfo_init(username);
String tech_name = doGetTechInfo_name(username);
String tech_truck = doGetTechInfo_truck(username);

//mbody=combinestring(mbody,"<br><hr noshade size=1 width=100% color=cccccc>");

mbody=combinestring(mbody,"<html><basefont size=-1>");
mbody=combinestring(mbody,"<head><title>Equipment Check</title></head>");
doMHeader(req, res, out, session, username);

// pull checkme info here



            Vector v;
                v = UniCheckMe.getAllDateItems(con,doFormatDateDb(getDateDb(listdate)));
		if (v.size()!=0) {
               		 for (int i = 0 ; i < v.size(); i++)
                	{
                       	UniCheckMe t = (UniCheckMe) v.elementAt(i);
	oa1=t.getOa1();
	oa2=t.getOa2();
	rwb1=t.getRwb1();
	rwb2=t.getRwb2();
	rdb1=t.getRdb1();
	rdb2=t.getRdb2();
	sdb1=t.getSdb1();
	sdb2=t.getSdb2();
	slt1=t.getSlt1();
	slt2=t.getSlt2();
	est1=t.getEst1();
	est2=t.getEst2();
	cst1=t.getCst1();
	cst2=t.getCst2();
	llt1=t.getLlt1();
	llt2=t.getLlt2();
	lp1=t.getLp1();
	lp2=t.getLp2();
	hp1=t.getHp1();
	hp2=t.getHp2();
	ss1=t.getSs1();
	ss2=t.getSs2();
	rs1=t.getRs1();
	rs2=t.getRs2();
	rfc1=t.getRfc1();
	rca1=t.getRca1();
	afcor=t.getAfcor();
	csp=t.getCsp();
	newins=t.getNewins();
	acsuite=t.getAcsuite();
	acn=t.getAcn();
	comp=t.getComp();
	ttype=t.getTtype();
	actype=t.getActype();
	manyear=t.getManyear();
	min1=t.getMin1();
	min2=t.getMin2();
	rtype=t.getRtype();
	trueflow=t.getTrueflow();
	hport= t.getHport();
	mdevice=t.getMdevice();
	targetas=t.getTargetas();
	callslip=t.getCallslip();
	services=t.getServices();
	recommendations=t.getRecommendations();
	rscheduled=t.getRscheduled();
	reason=t.getReason();
                	equip1=t.getEquip1();
                	equip2=t.getEquip2();
                	equip3=t.getEquip3();
                	equip4=t.getEquip4();
			custnum = t.getCustnum();
		//}
//	}

mbody=combinestring(mbody,"<br><font size=2>");
mbody=combinestring(mbody,"<table border=0 width=\"95%\" align=\"center\"><td width=\"30%\">");
//mbody=combinestring(mbody,"<b align=Left>Equipment Check:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;Call Slip: "+callslip+"<br>&nbsp;&nbsp;&nbsp;&nbsp;Call Date: "+doFormatDate(getDate(cdate))+"<br><br>");
mbody=combinestring(mbody,"<b align=Left>Equipment Check:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;Call Slip: "+callslip+"<br>&nbsp;&nbsp;&nbsp;&nbsp;Call Date: "+cdate+"<br><br>");
mbody=combinestring(mbody,"</td>");


                Vector vc;
                vc = UniCustomer.getIndItem(con, custnum);
                int counter=0;
                String custtype = null;
                for (int ic = 0 ; ic < vc.size(); ic++)
                {
                        UniCustomer tc = (UniCustomer) vc.elementAt(ic);
                        custtype = tc.getCustType();
			cname=tc.getCustomerName();
			address1=tc.getAddress1();
			address2=tc.getAddress2();
			city =tc.getCity();
			state=tc.getState();
			zip=tc.getZip();
			homephone=tc.getHomePhone();
			altphone=tc.getAltPhone();
			cust_notes=tc.getCustomerNotes();
			custsite=tc.getCustSite();
			sitenum=tc.getSiteNum();
			cemail=tc.getCEmail();
		}	

mbody=combinestring(mbody,"<td width=\"30%\">");
mbody=combinestring(mbody,"<b>Customer:</b><br>&nbsp;&nbsp;&nbsp;&nbsp;"+cname+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+address1+"<br>&nbsp;&nbsp;&nbsp;&nbsp;"+city+","+state+"<br>&nbsp;&nbsp;&nbsp;"+cemail+"");
mbody=combinestring(mbody,"</td>");

mbody=combinestring(mbody,"<td width=\"30%\">");
mbody=combinestring(mbody,"Customer Number / Site:&nbsp;&nbsp;&nbsp;"+custsite+"&nbsp;/&nbsp;"+sitenum+"<br>Home Phone:&nbsp;&nbsp;&nbsp;"+homephone+"<br>Alt. Phone:&nbsp;&nbsp;&nbsp;"+altphone+"");
mbody=combinestring(mbody,"</td>");

mbody=combinestring(mbody,"</table>");
if (custnum==267)
	{

rs = stmt.executeQuery("select inv_detail.itemnum, callslip, date as idate, itemname, quantity as quant, description from inv_detail, inv_items where inv_detail.itemnum=inv_items.itemnum and inv_detail.date='"+cdate+"' and inv_detail.callslip='"+callslip+"' order by description");
} else {
rs = stmt.executeQuery("select inv_detail.itemnum as itemnum, callslip, date as idate, itemname, abs(quantity) as quant, description from inv_detail, inv_items where inv_detail.itemnum=inv_items.itemnum and inv_detail.date='"+cdate+"' and inv_detail.callslip='"+callslip+"' order by description");
}
if (rs!= null) {
	mbody=combinestring(mbody,"<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parts Used</h4>");
	mbody=combinestring(mbody,"<table width=\"95%\" align=\"center\" border=1>");
	mbody=combinestring(mbody,"<font size=1>");
	mbody=combinestring(mbody,"<th>Key</th><th>Part</th><th>Quantity</th><th>Date</th>");
	while (rs.next()) {
		String description = rs.getString("description");
		String itemname=rs.getString("itemname");
		String pquant = rs.getString("quant");
		String idate = doFormatDate(getDate(rs.getString("idate")));
		mbody=combinestring(mbody,"<tr><td>"+description+"</td><td>"+itemname+"</td><td>"+pquant+"</td><td>"+idate+"</td></tr>");
		}
	mbody=combinestring(mbody,"</font>");
	mbody=combinestring(mbody,"</table>");
	}


	mbody=combinestring(mbody,"<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Equipment</h4>");
	mbody=combinestring(mbody,"<table width=\"95%\" align=\"center\" border=1>");
	mbody=combinestring(mbody,"<font size=1>");
Statement stmt2 = con.createStatement();
ResultSet rse = stmt2.executeQuery("SELECT * FROM  equipment where enum='"+equip1+"' or enum='"+equip2+"' or enum='"+equip3+"' or enum='"+equip4+"';");
mbody=combinestring(mbody,"<th>Type</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
	 while(rse.next())
	{
	brand = rse.getString("brand");
	modelnum = rse.getString("modelnum");
	serialnum = rse.getString("serialnum");
	filter = rse.getString("filter");
	notes = rse.getString("notes");
	etype = rse.getString("etype");
if (etype==null) { 
	etype = "-";
	}
mbody=combinestring(mbody,"<tr><td>"+etype+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
	}
	mbody=combinestring(mbody,"</font>");
	mbody=combinestring(mbody,"</table>");



	mbody=combinestring(mbody,"<table align=\"center\" size=\"95%\" width=\"95%\" border=1>");
	mbody=combinestring(mbody,"<th></th><th></th><th></th>");
	mbody=combinestring(mbody,"<tr><td align=\"left\">");
	mbody=combinestring(mbody,"<table width=\"95%\" size=\"95%\" border=0>");
	
	mbody=combinestring(mbody,"<th>Program Information</th><tr>");
	mbody=combinestring(mbody,"<td width=\"50%\">Cool Smart Program</td>");
	mbody=combinestring(mbody,"<td width=\"50%\">"+csp+"</td></tr>");
	
	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td>New Install?</td>");
	mbody=combinestring(mbody,"<td>"+newins+"</td></tr>");

	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td>A/C Type</td>");
	mbody=combinestring(mbody,"<td>"+actype+"</td></tr>");

	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td>Test Type</td>");
	mbody=combinestring(mbody,"<td>"+ttype+"</td></tr>");

	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td>Suite/Space</td>");
	mbody=combinestring(mbody,"<td>"+acsuite+"</td></tr>");

	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td>AC Number</td>");
	mbody=combinestring(mbody,"<td>"+acn+"</td></tr>");

	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td>Compressor Number</td>");
	mbody=combinestring(mbody,"<td>"+comp+"</td></tr>");

	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td>Year Manufactured</td>");
	mbody=combinestring(mbody,"<td>"+manyear+"</td></tr>");

	mbody=combinestring(mbody,"</table><br><br>");

mbody=combinestring(mbody,"<table width=\"95%\" size=\"95%\" border=0>");

mbody=combinestring(mbody,"<th>Test Information</th><tr>");
mbody=combinestring(mbody,"<td>Minutes Running Before Initial Test</td>");
mbody=combinestring(mbody,"<td>"+min1+"</td></tr>");

mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Minutes Running Since Repairs Made</td>");
mbody=combinestring(mbody,"<td>"+min2+"</td></tr>");

mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Refrigerant Type</td>");
mbody=combinestring(mbody,"<td>"+rtype+"</td></tr>");

mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>True Flow Meter</td>");
mbody=combinestring(mbody,"<td>"+trueflow+"</td></tr>");

mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>High Side Port</td>");
mbody=combinestring(mbody,"<td>"+hport+"</td></tr>");

mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Metering Device</td>");
mbody=combinestring(mbody,"<td>"+mdevice+"</td></tr>");

mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Target Subcooling/Approach</td>");
mbody=combinestring(mbody,"<td>"+targetas+"</td></tr>");

mbody=combinestring(mbody,"</table>");

	mbody=combinestring(mbody,"</td><td>");
mbody=combinestring(mbody,"</td><td>");

mbody=combinestring(mbody,"<table size=95% border=0>");
mbody=combinestring(mbody,"<center><b>Test Results</b></center><th>Temperatures/Pressures</th><th>Initial Test</th><th>Test After<br>Repairs</th>");

mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Condenser Air Entering Temp</td>");
mbody=combinestring(mbody,"<td>"+oa1+"</td>");
mbody=combinestring(mbody,"<td>"+oa2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Return Air Wet Bulb Temp</td>");
mbody=combinestring(mbody,"<td>"+rwb1+"</td>");
mbody=combinestring(mbody,"<td>"+rwb2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Return Air Dry Bulb Temp</td>");
mbody=combinestring(mbody,"<td>"+rdb1+"</td>");
mbody=combinestring(mbody,"<td>"+rdb2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Supply Air Dry Bulb Temp</td>");
mbody=combinestring(mbody,"<td>"+sdb1+"</td>");
mbody=combinestring(mbody,"<td>"+sdb2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Suction Line Temp</td>");
mbody=combinestring(mbody,"<td>"+slt1+"</td>");
mbody=combinestring(mbody,"<td>"+slt2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Evaporator Saturation Temp</td>");
mbody=combinestring(mbody,"<td>"+est1+"</td>");
mbody=combinestring(mbody,"<td>"+est2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Condenser Saturation Temp</td>");
mbody=combinestring(mbody,"<td>"+cst1+"</td>");
mbody=combinestring(mbody,"<td>"+cst2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Liquid Line Temp</td>");
mbody=combinestring(mbody,"<td>"+llt1+"</td>");
mbody=combinestring(mbody,"<td>"+llt2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Suction (Low side) Pressure</td>");
mbody=combinestring(mbody,"<td>"+lp1+"</td>");
mbody=combinestring(mbody,"<td>"+lp2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Discharge (High side) Pressure</td>");
mbody=combinestring(mbody,"<td>"+hp1+"</td>");
mbody=combinestring(mbody,"<td>"+hp2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Supply Static Pressure</td>");
mbody=combinestring(mbody,"<td>"+ss1+"</td>");
mbody=combinestring(mbody,"<td>"+ss2+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Return Static Pressure</td>");
mbody=combinestring(mbody,"<td>"+rs1+"</td>");
mbody=combinestring(mbody,"<td>"+rs2+"</td>");
mbody=combinestring(mbody,"</tr>");

mbody=combinestring(mbody,"</table></tr></td></table><br><br>");


	mbody=combinestring(mbody,"<center><table size=\"95%\" width=\"95%\" border=1>");
	mbody=combinestring(mbody,"<th>Corrections and Repairs</th>");

	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td width=\"50%\">Factory Stamped Charge</td>");
	mbody=combinestring(mbody,"<td width=\"50%\">"+rfc1+"</td></tr>");

	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td>Refrigerant Charge Adjustment</td>");
	mbody=combinestring(mbody,"<td>"+rca1+"</td></tr>");

	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<td>Air Flow Corrections</td>");
	mbody=combinestring(mbody,"<td>"+afcor+"</td></tr>");

	//mbody=combinestring(mbody,"<tr>");
	//mbody=combinestring(mbody,"<td></td>");
	//mbody=combinestring(mbody,"<td><input type=\"text\" name=\"\" size=\"20\" value="++"></td></tr>");
	mbody=combinestring(mbody,"</table></center><br><br>");

mbody=combinestring(mbody,"<center><table size=\"95%\" width=\"95%\" border=1><td width=\"50%\" size=\"50%\"");
mbody=combinestring(mbody,"<center><table size=\"95%\" width=\"95%\" border=0>");

mbody=combinestring(mbody,"<center><b>Test Results - Before Repairs</b></center><th>Temperatures/Pressures</th><th>Target</th><th>Actual</th>");

int sh1 = Integer.parseInt(slt1)-Integer.parseInt(est1);

String ttempsplit1="0.00";
String superheat1="0.00";
TempSplit tts = new TempSplit(con, rdb1, rwb1);
ttempsplit1=tts.getTempSplit();
Superheat sh = new Superheat(con,oa1, rwb1);
superheat1=sh.getSuperheat();


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Superheat</td>");
mbody=combinestring(mbody,"<td>"+superheat1+"</td>");
mbody=combinestring(mbody,"<td>"+sh1+"</td>");
mbody=combinestring(mbody,"</tr>");

int at1 = Integer.parseInt(llt1)-Integer.parseInt(oa1);
int subcool1 = Integer.parseInt(cst1) - Integer.parseInt(llt1);
int af1 = Integer.parseInt(rdb1) - Integer.parseInt(sdb1);

mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Approach Temp</td>");
mbody=combinestring(mbody,"<td>"+targetas+"</td>");
mbody=combinestring(mbody,"<td>"+at1+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Subcooling</td>");
mbody=combinestring(mbody,"<td>"+targetas+"</td>");
mbody=combinestring(mbody,"<td>"+subcool1+"</td>");
mbody=combinestring(mbody,"</tr>");


mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Airflow / Temp Split</td>");
mbody=combinestring(mbody,"<td>"+ttempsplit1+"</td>");
mbody=combinestring(mbody,"<td>"+af1+"</td>");
mbody=combinestring(mbody,"</tr>");

//mbody=combinestring(mbody,"<tr>");
//mbody=combinestring(mbody,"<td></td>");
//mbody=combinestring(mbody,"<td><input type=\"text\" name=\"\" size=\"20\" value="++"></td></tr>");
mbody=combinestring(mbody,"</table></center><br><br>");

mbody=combinestring(mbody,"If TempSplit lower than target you have to much air.<br>If TempSplit higher than target you do not have enough air flow.<br>");
mbody=combinestring(mbody,"Use Superheat for non-txv metering device.<br>Use subcooling for TXV metering device.<br>Use Aproach temp for Lennox equipment only.<br>");
 
mbody=combinestring(mbody,"</td><td width=\"50%\" size=\"50%\">");

if (!oa2.equalsIgnoreCase("-")&&!llt2.equalsIgnoreCase("-")&&!cst2.equalsIgnoreCase("-")&&!sdb2.equalsIgnoreCase("-")&&!rdb2.equalsIgnoreCase("-")&&!slt2.equalsIgnoreCase("-")&&!est2.equalsIgnoreCase("-"))
{
mbody=combinestring(mbody,"<center><table size=\"95%\" width=\"95%\" border=0>");
mbody=combinestring(mbody,"<center><b>Test Results - After Repairs</b></center><th>Temperatures/Pressures</th><th>Target</th><th>Actual</th>");
int sh2 = Integer.parseInt(slt2)-Integer.parseInt(est2);
String ttempsplit2="0.00";
String superheat2="0.00";
TempSplit t2 = new TempSplit(con, rdb2, rwb2);
ttempsplit2=t2.getTempSplit();
Superheat ssh2 = new Superheat(con,oa2, rwb2);
superheat2=ssh2.getSuperheat();
mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Superheat</td>");
mbody=combinestring(mbody,"<td>"+superheat2+"</td>");
mbody=combinestring(mbody,"<td>"+ssh2+"</td>");
mbody=combinestring(mbody,"</tr>");
int at2 = Integer.parseInt(llt2)-Integer.parseInt(oa2);
int subcool2 = Integer.parseInt(cst2) - Integer.parseInt(llt2);
int af2 = Integer.parseInt(rdb2) - Integer.parseInt(sdb2);
mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Approach Temp</td>");
mbody=combinestring(mbody,"<td>"+targetas+"</td>");
mbody=combinestring(mbody,"<td>"+at2+"</td>");
mbody=combinestring(mbody,"</tr>");
mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Subcooling</td>");
mbody=combinestring(mbody,"<td>"+targetas+"</td>");
mbody=combinestring(mbody,"<td>"+subcool2+"</td>");
mbody=combinestring(mbody,"</tr>");
mbody=combinestring(mbody,"<tr>");
mbody=combinestring(mbody,"<td>Airflow / Temp Split</td>");
mbody=combinestring(mbody,"<td>"+ttempsplit2+"</td>");
mbody=combinestring(mbody,"<td>"+af2+"</td>");
mbody=combinestring(mbody,"</tr>");
mbody=combinestring(mbody,"</table></center><br><br>");
}
mbody=combinestring(mbody,"</td></table><br><br>");
		mbody=combinestring(mbody,"<font size=1>");
		mbody=combinestring(mbody,"<table width=\"95%\" size=\"95%\" align=\"center\" border=1 height=5>");
		mbody=combinestring(mbody,"<font size=1");
if ((services!=null)||(recommendations!=null)||(rscheduled!=null)) {
		mbody=combinestring(mbody,"<br>");
		mbody=combinestring(mbody,"<table width=\"95%\" size=\"95%\" align=\"center\" border=1>");
		mbody=combinestring(mbody,"<font size=1>");
		if (services.length()>1) {
		mbody=combinestring(mbody,"<tr><td><h4>Services</h4></td></tr><tr><td>"+services+"");
		mbody=combinestring(mbody,"</td></tr>");
		}

		if (recommendations.length()>1) {
		mbody=combinestring(mbody,"<P></P><br>");
		mbody=combinestring(mbody,"<tr><td><h4>Our Trained Technician Recommends</h4></td></tr><tr><td>"+recommendations+"");
		mbody=combinestring(mbody,"<table><font size=1><tr><td>Customer Accepts Recomendations</td><td>______________</td><td>Customer Declines Recommendations</td><td>________________</td></tr></font></table></tr>");
		mbody=combinestring(mbody,"</td></tr>");
		}
	
		if (rscheduled.length()>1) {
		mbody=combinestring(mbody,"<tr><td><h4>Repair Scheduled</h4></td></tr><tr><td>"+rscheduled+"");
		mbody=combinestring(mbody,"</td></tr>");
		}
	mbody=combinestring(mbody,"</font>");
	mbody=combinestring(mbody,"</table>");
	mbody=combinestring(mbody,"");
	}

	mbody=combinestring(mbody,"</font>");
	mbody=combinestring(mbody,"<table width=\"95%\" align=\"center\">");
	mbody=combinestring(mbody,"<font size=1>");
	mbody=combinestring(mbody,"<tr>");
	mbody=combinestring(mbody,"<P></p><br><br>");

	mbody=combinestring(mbody,"<table width=\"95%\" align=\"center\">");
	mbody=combinestring(mbody,"<font size=1>");
mbody=combinestring(mbody,"<tr><td>Technician Name</td><td>"+tech_name+"</td></tr>");
                        if (nateid==0) {
                        if (custtype.equalsIgnoreCase("T")) {

		mbody=combinestring(mbody,"<tr><td></td><td><b>Please ask our technician how you could save money on this call with a Planned Service Agreement!</b></td></tr>");
                        }
			else if (custtype.equalsIgnoreCase("F")) {

		mbody=combinestring(mbody,"<tr><td></td><td><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
                        else {
		mbody=combinestring(mbody,"<tr><td></td><td><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
			//NO NATE ID - DO NOT PRINT NATE INFO
			} else {
	mbody=combinestring(mbody,"<tr><td> ");
	mbody=combinestring(mbody,"<IMG SRC=\"http://127.0.0.1:8080/servsys/natelogo.gif\" NAME=\"NateLogo\" ALIGN=LEFT WIDTH=60 HEIGHT=60 BORDER=0><BR CLEAR=LEFT>");
	mbody=combinestring(mbody,"</td>");
                        if (custtype.equalsIgnoreCase("T")) {

		mbody=combinestring(mbody,"<td>Your Service Technician is NATE Certified - ID: "+nate_id+"<br><b>Please ask our technician how you could save money on this call with a Planned Service Agreement!</b></td></tr>");
                        }
			else if (custtype.equalsIgnoreCase("F")) {

		mbody=combinestring(mbody,"<td>Your Service Technician is NATE Certified - ID: "+nate_id+"<br><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
                        else {
		mbody=combinestring(mbody,"<td>Your Service Technician is NATE Certified - ID: "+nate_id+"<br><b>Thank you for calling "+doGetCompanyName()+"</b> </td></tr>");
			}
mbody=combinestring(mbody,"</font></table>");

////////////////////////////////////////////////////////
// Here is where we end the http headers
////////////////////////////////////////////////////////
                out.println(mbody);
               //String newstring = mbody.replaceAll("<br>","\n");
        emailserver = doGetSmtpServer(username);
        emailsendaddress=doGetSvc_Email(username);
        techemailaddress=doGetTech_Email(username);
	doMailSend(emailserver, emailsendaddress, techemailaddress, "Service Call: "+callslip+" - " + cname+" - "+listdate+" - "+ tech_name , mbody, smtpuser, smtppassword);
		mbody="";
		}
mbody=combinestring(mbody,"</body>");
mbody=combinestring(mbody,"</html>");
}
}	
		con.close();
}

////////////////////////////////////////////
//END CHECK ME HERE
///////////////////////////////////////////

private void doAddCheckme(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
	String collected="0.00";
	String charges="0.00";
        int custnum = Integer.parseInt(tcustnum);
	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
	String action = req.getParameter("action");
        int eenum=0;
        int ecustnum=0;
        String brand=null;
	
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
	String oa1= "-";
	String oa2= "-";
	String rwb1= "-";
	String rwb2= "-";
	String rdb1= "-";
	String rdb2= "-";
	String sdb1= "-";
	String sdb2= "-";
	String slt1= "-";
	String slt2= "-";
	String est1= "-";
	String est2= "-";
	String cst1= "-";
	String cst2= "-";
	String llt1= "-";
	String llt2= "-";
	String lp1= "-";
	String lp2= "-";
	String hp1= "-";
	String hp2= "-";
	String ss1= "-";
	String ss2= "-";
	String rs1= "-";
	String rs2= "-";
	String rfc1= "-";
	String rca1= "-";
	String afcor= "-";
	String csp= "-";
	String newins= "-";
	String acsuite= "-";
	String acn= "-";
	String comp= "-";
	String ttype= "-";
	String actype= "-";
	String manyear= "-";
	String min1= "-";
	String min2= "-";
	String rtype= "-";
	String trueflow= "-";
	String hport= "-";
	String mdevice= "-";
	String targetas= "-";
	String callslip="-";
	String services="-";
	String reason="-";
	String crecnum="";
	int equip1=0;
	int equip2=0;
	int equip3=0;
	int equip4=0;
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Equipment Check</title>");
	out.println("</head>");

if (action.equalsIgnoreCase("addcheckme"))
		{
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savecheckme&custnum="+custnum+"\" name=\"addcat\">");
		}
else 
		{
	crecnum = req.getParameter("crecnum");
        int tcrecnum = Integer.parseInt(crecnum);
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=updatecheckme&custnum="+custnum+"\" name=\"addcat\">");

            Vector v;
            v = UniCheckMe.getIndItems(con,custnum,tcrecnum);
		if (v.size()!=0) {
               		 for (int i = 0 ; i < v.size(); i++)
                	{
                       	UniCheckMe t = (UniCheckMe) v.elementAt(i);
	oa1=t.getOa1();
	oa2=t.getOa2();
	rwb1=t.getRwb1();
	rwb2=t.getRwb2();
	rdb1=t.getRdb1();
	rdb2=t.getRdb2();
	sdb1=t.getSdb1();
	sdb2=t.getSdb2();
	slt1=t.getSlt1();
	slt2=t.getSlt2();
	est1=t.getEst1();
	est2=t.getEst2();
	cst1=t.getCst1();
	cst2=t.getCst2();
	llt1=t.getLlt1();
	llt2=t.getLlt2();
	lp1=t.getLp1();
	lp2=t.getLp2();
	hp1=t.getHp1();
	hp2=t.getHp2();
	ss1=t.getSs1();
	ss2=t.getSs2();
	rs1=t.getRs1();
	rs2=t.getRs2();
	rfc1=t.getRfc1();
	rca1=t.getRca1();
	afcor=t.getAfcor();
	csp=t.getCsp();
	newins=t.getNewins();
	acsuite=t.getAcsuite();
	acn=t.getAcn();
	comp=t.getComp();
	ttype=t.getTtype();
	actype=t.getActype();
	manyear=t.getManyear();
	min1=t.getMin1();
	min2=t.getMin2();
	rtype=t.getRtype();
	trueflow=t.getTrueflow();
	hport= t.getHport();
	mdevice=t.getMdevice();
	targetas=t.getTargetas();
	callslip=t.getCallslip();
	services=t.getServices();
	reason=t.getReason();
                	equip1=t.getEquip1();
                	equip2=t.getEquip2();
                	equip3=t.getEquip3();
                	equip4=t.getEquip4();
		}
			}
		}
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"cdate\" value="+s+"></td>");
	out.println("</tr>");
	out.println("<tr><td>Call Slip</td><td>");
	out.println("<input type=\"text\" name=\"callslip\" value="+callslip+" ></td>");
	out.println("</tr>");
	out.println("<tr><td>Reason</td><td>");
	out.println("<input type=\"text\" name=\"reason\" size=\"60\" value="+reason+"></td></tr>");
	out.println("<tr><td>Services</td><td>");
	out.println("<textarea name=\"services\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\">"+services+"</textarea>");
	out.println("</td></tr>");
	out.println("</table>");

	out.println("<table size=100% border=1>");
	out.println("<th>Program Information</th><th></th><th>Test Information</th>");
	out.println("<tr><td>");
	out.println("<table size=100% border=1>");
	
	out.println("<tr>");
	out.println("<td>Cool Smart Program</td>");
	out.println("<td><input type=\"text\" name=\"csp\" size=\"20\" value="+csp+"></td></tr>");
	
	out.println("<tr>");
	out.println("<td>New Install?</td>");
	out.println("<td><input type=\"text\" name=\"newins\" size=\"20\" value="+newins+"></td></tr>");

	out.println("<tr>");
	out.println("<td>A/C Type</td>");
	out.println("<td><input type=\"text\" name=\"actype\" size=\"20\" value="+actype+"></td></tr>");
	out.println("<input type=\"hidden\" name=\"crecnum\" value="+crecnum+">");

	out.println("<tr>");
	out.println("<td>Test Type</td>");
	out.println("<td><input type=\"text\" name=\"ttype\" size=\"20\" value="+ttype+"></td></tr>");

	out.println("<tr>");
	out.println("<td>Suite/Space</td>");
	out.println("<td><input type=\"text\" name=\"acsuite\" size=\"20\" value="+acsuite+"></td></tr>");

	out.println("<tr>");
	out.println("<td>AC Number</td>");
	out.println("<td><input type=\"text\" name=\"acn\" size=\"20\" value="+acn+"></td></tr>");

	out.println("<tr>");
	out.println("<td>Compressor Number</td>");
	out.println("<td><input type=\"text\" name=\"comp\" size=\"20\" value="+comp+"></td></tr>");

	out.println("<tr>");
	out.println("<td>Year Manufactured</td>");
	out.println("<td><input type=\"text\" name=\"manyear\" size=\"20\" value="+manyear+"></td></tr>");

	out.println("</table>");

	out.println("</td><td></td><td>");

	out.println("<table size=100% border=1>");

	out.println("<tr>");
	out.println("<td>Minutes Running Before Initial Test</td>");
	out.println("<td><input type=\"text\" name=\"min1\" size=\"20\" value="+min1+"></td></tr>");

	out.println("<tr>");
	out.println("<td>Minutes Running Since Repairs Made</td>");
	out.println("<td><input type=\"text\" name=\"min2\" size=\"20\" value="+min2+"></td></tr>");

	out.println("<tr>");
	out.println("<td>Refrigerant Type</td>");
	out.println("<td><input type=\"text\" name=\"rtype\" size=\"20\" value="+rtype+"></td></tr>");

	out.println("<tr>");
	out.println("<td>True Flow Meter</td>");
	out.println("<td><input type=\"text\" name=\"trueflow\" size=\"20\" value="+trueflow+"></td></tr>");

	out.println("<tr>");
	out.println("<td>High Side Port</td>");
	out.println("<td><input type=\"text\" name=\"hport\" size=\"20\" value="+hport+"></td></tr>");

	out.println("<tr>");
	out.println("<td>Metering Device</td>");
	out.println("<td><input type=\"text\" name=\"mdevice\" size=\"20\" value="+mdevice+"></td></tr>");

	out.println("<tr>");
	out.println("<td>Target Subcooling/Approach</td>");
	out.println("<td><input type=\"text\" name=\"targetas\" size=\"20\" value="+targetas+"></td></tr>");

	out.println("</table>");
	out.println("</td></tr></table>");

	out.println("<table size=100% border=1>");
	out.println("<th>Temperatures/Pressures</th><th>Initial Test</th><th>Test After<br>Repairs</th>");

	out.println("<tr>");
	out.println("<td>Condenser Air Entering Temp</td>");
	out.println("<td><input type=\"text\" name=\"oa1\" size=\"20\" value="+oa1+"></td>");
	out.println("<td><input type=\"text\" name=\"oa2\" size=\"20\" value="+oa2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Return Air Wet Bulb Temp</td>");
	out.println("<td><input type=\"text\" name=\"rwb1\" size=\"20\" value="+rwb1+"></td>");
	out.println("<td><input type=\"text\" name=\"rwb2\" size=\"20\" value="+rwb2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Return Air Dry Bulb Temp</td>");
	out.println("<td><input type=\"text\" name=\"rdb1\" size=\"20\" value="+rdb1+"></td>");
	out.println("<td><input type=\"text\" name=\"rdb2\" size=\"20\" value="+rdb2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Supply Air Dry Bulb Temp</td>");
	out.println("<td><input type=\"text\" name=\"sdb1\" size=\"20\" value="+sdb1+"></td>");
	out.println("<td><input type=\"text\" name=\"sdb2\" size=\"20\" value="+sdb2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Suction Line Temp</td>");
	out.println("<td><input type=\"text\" name=\"slt1\" size=\"20\" value="+slt1+"></td>");
	out.println("<td><input type=\"text\" name=\"slt2\" size=\"20\" value="+slt2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Evaporator Saturation Temp</td>");
	out.println("<td><input type=\"text\" name=\"est1\" size=\"20\" value="+est1+"></td>");
	out.println("<td><input type=\"text\" name=\"est2\" size=\"20\" value="+est2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Condenser Saturation Temp</td>");
	out.println("<td><input type=\"text\" name=\"cst1\" size=\"20\" value="+cst1+"></td>");
	out.println("<td><input type=\"text\" name=\"cst2\" size=\"20\" value="+cst2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Liquid Line Temp</td>");
	out.println("<td><input type=\"text\" name=\"llt1\" size=\"20\" value="+llt1+"></td>");
	out.println("<td><input type=\"text\" name=\"llt2\" size=\"20\" value="+llt2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Suction (Low side) Pressure</td>");
	out.println("<td><input type=\"text\" name=\"lp1\" size=\"20\" value="+lp1+"></td>");
	out.println("<td><input type=\"text\" name=\"lp2\" size=\"20\" value="+lp2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Discharge (High side) Pressure</td>");
	out.println("<td><input type=\"text\" name=\"hp1\" size=\"20\" value="+hp1+"></td>");
	out.println("<td><input type=\"text\" name=\"hp2\" size=\"20\" value="+hp2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Supply Static Pressure</td>");
	out.println("<td><input type=\"text\" name=\"ss1\" size=\"20\" value="+ss1+"></td>");
	out.println("<td><input type=\"text\" name=\"ss2\" size=\"20\" value="+ss2+"></td>");
	out.println("</tr>");


	out.println("<tr>");
	out.println("<td>Return Static Pressure</td>");
	out.println("<td><input type=\"text\" name=\"rs1\" size=\"20\" value="+rs1+"></td>");
	out.println("<td><input type=\"text\" name=\"rs2\" size=\"20\" value="+rs2+"></td>");
	out.println("</tr>");

	out.println("</table>");


	out.println("<table size=100% border=1>");
	out.println("<th>Corrections and Repairs</th>");

	out.println("<tr>");
	out.println("<td>Factory Stamped Charge</td>");
	out.println("<td><input type=\"text\" name=\"rfc1\" size=\"20\" value="+rfc1+"></td></tr>");

	out.println("<tr>");
	out.println("<td>Refrigerant Charge Adjustment</td>");
	out.println("<td><input type=\"text\" name=\"rca1\" size=\"20\" value="+rca1+"></td></tr>");

	out.println("<tr>");
	out.println("<td>Air Flow Corrections</td>");
	out.println("<td><input type=\"text\" name=\"afcor\" size=\"20\" value="+afcor+"></td></tr>");

	//out.println("<tr>");
	//out.println("<td></td>");
	//out.println("<td><input type=\"text\" name=\"\" size=\"20\" value="++"></td></tr>");
	out.println("</table>");

	out.println("<table size=100% border=1>");
	out.println("<tr><td>Recommendations</td><td>");
	out.println("<textarea name=\"recommendations\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Repair Scheduled</td><td>");
	out.println("<textarea name=\"rscheduled\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Notes</td><td>");
	out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");

	out.println("<tr><td>Add Follow-up</td><td>");
	out.println("<input type=\"checkbox\" name=\"followup\" value=\"1\"></td></tr>");

	out.println("</table>");

        Vector v;
        v = UniEquip.getAllItems(con,custnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Number</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniEquip t = (UniEquip) v.elementAt(i);
		eenum=t.getId();
		ecustnum=t.getCustnum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		notes=t.getNotes();
                out.println("<tr><td>"+eenum+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
                }
	out.println("</table><br><br>");

	out.println("</table>");
	out.println("<h3>Enter Equipment Number</h3>");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Equipment 1</td><td><input type=\"text\" name=\"equip1\" size=\"30\" value=\""+equip1+"\"></td><td>Equipment 2</td><td><input type=\"text\" name=\"equip2\" size=\"30\" value=\""+equip2+"\"></td></tr>");
	out.println("<tr><td>Equipment 3</td><td><input type=\"text\" name=\"equip3\" size=\"30\" value=\""+equip3+"\"></td><td>Equipment 4</td><td><input type=\"text\" name=\"equip4\" size=\"30\" value=\""+equip4+"\"></td></tr>");
	out.println("</table>");


	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\" >");
	out.println("<input type=\"hidden\" name=\"collected\" value=\""+collected+"\" >");
	out.println("<input type=\"hidden\" name=\"charges\" value=\""+charges+"\" >");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<input type=\"hidden\" name=\"crectype\" value=\"c\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}

private void doAddCallslip(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
        {
	Format formatter;
        Calendar now = Calendar.getInstance();
        Date date = new Date();
        formatter = new SimpleDateFormat("MM-dd-yyyy");
        String s = formatter.format(date);
        int hour = now.get(Calendar.HOUR_OF_DAY); 
        int second = now.get(Calendar.SECOND);
        int year = now.get(Calendar.YEAR);
        int month = now.get(Calendar.MONTH);
        int minute = now.get(Calendar.MINUTE);
        int millisecond = now.get(Calendar.MILLISECOND);
	String tcustnum = req.getParameter("custnum");
	String collected="0.00";
	String charges="0.00";
        int custnum = Integer.parseInt(tcustnum);
	String custstart = req.getParameter("custstart");
	String custstop = req.getParameter("custstop");
        int eenum=0;
        int ecustnum=0;
        String brand=null;
        String modelnum=null;
        String serialnum=null;
        String filter=null;
        String notes=null;
	out.println("<html>");
	out.println("<head>");
	out.println("<title>Add Call Slip</title>");
	out.println("</head>");
	out.println("<form method=\"post\" action=\""+classdir+"UniCash?action=savecallslip&custnum="+custnum+"\" name=\"addcat\">");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Date</td><td>");
	out.println("<input type=\"text\" name=\"cdate\" value="+s+"></td>");
	out.println("</tr>");
	out.println("<tr><td>Call Slip</td><td>");
	out.println("<input type=\"text\" name=\"callslip\" ></td>");
	out.println("</tr>");
	out.println("<tr><td>Reason</td><td>");
	out.println("<input type=\"text\" name=\"reason\" size=\"60\"></td></tr>");
	out.println("<tr><td>Services</td><td>");
	out.println("<textarea name=\"services\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");

	out.println("<tr><td>Recommendations</td><td>");
	out.println("<textarea name=\"recommendations\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Repair Scheduled</td><td>");
	out.println("<textarea name=\"rscheduled\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	out.println("<tr><td>Parts Needed</td><td>");
	out.println("<textarea name=\"parts\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	out.println("</td></tr>");
	//out.println("<tr><td>Notes</td><td>");
	//out.println("<textarea name=\"notes\" cols=\"60\" rows=\"4\" wrap=\"VIRTUAL\" style=\"width: 500px\"></textarea>");
	//out.println("</td></tr>");

	out.println("<tr><td>Add Follow-up</td><td>");
	out.println("<input type=\"checkbox\" name=\"followup\" value=\"1\"></td></tr>");

	out.println("</table>");

        Vector v;
        v = UniEquip.getAllItems(con,custnum);
	out.println("<table border=1 width=100%>");
        out.println("<th>Number</th><th>Brand</th><th>Model</th><th>Serial</th><th>Filter</th><th>Notes</th>");
		int counter=0;
                for (int i = 0 ; i < v.size(); i++)
                {
                UniEquip t = (UniEquip) v.elementAt(i);
		eenum=t.getId();
		ecustnum=t.getCustnum();
		brand=t.getBrand();
		modelnum=t.getModelnum();
		serialnum=t.getSerialnum();
		filter=t.getFilter();
		notes=t.getNotes();
                out.println("<tr><td>"+eenum+"</td><td>"+brand+"</td><td>"+modelnum+"</td><td>"+serialnum+"</td><td>"+filter+"</td><td>"+notes+"</tr>");
                }
	out.println("</table><br><br>");

	out.println("</table>");
	out.println("<h3>Enter Equipment Number</h3>");
	out.println("<table size=100% border=1>");
	out.println("<tr><td>Equipment 1</td><td><input type=\"text\" name=\"equip1\" size=\"30\" value=\"0\"></td><td>Equipment 2</td><td><input type=\"text\" name=\"equip2\" size=\"30\" value=\"0\"></td></tr>");
	out.println("<tr><td>Equipment 3</td><td><input type=\"text\" name=\"equip3\" size=\"30\" value=\"0\"></td><td>Equipment 4</td><td><input type=\"text\" name=\"equip4\" size=\"30\" value=\"0\"></td></tr>");
	out.println("</table>");


	out.println("<input type=\"hidden\" name=\"custstart\" value=\""+custstart+"\" >");
	out.println("<input type=\"hidden\" name=\"collected\" value=\""+collected+"\" >");
	out.println("<input type=\"hidden\" name=\"charges\" value=\""+charges+"\" >");
	out.println("<input type=\"hidden\" name=\"custstop\" value=\""+custstop+"\">");
	out.println("<input type=\"hidden\" name=\"crectype\" value=\"c\">");
	out.println("<INPUT TYPE=\"submit\" NAME=\"submit\" VALUE=\"Save\">");
	out.println("<INPUT TYPE=\"reset\">");
	out.println("</CENTER>");
		con.close();
	}



private void doPrintServProposal(HttpServletRequest req, HttpServletResponse res, PrintWriter out, HttpSession session, String username)
                throws Exception
                        {
		String tcustnum = req.getParameter("custnum");
		String tcontnum = req.getParameter("propnum");
       		 int custnum = Integer.parseInt(tcustnum);
       		 int propnum = Integer.parseInt(tcontnum);
               int eenum=0;
                int ecustnum=0;
                String brand=null;
                String modelnum=null;
                String serialnum=null;
                String filter=null;
                String enotes=null;
                String type=null;

                int enum1 =0;
                int enum2 = 0;
                int enum3 = 0;
                int enum4 = 0;
                int enum5 = 0;
                int enum6 = 0;
                int enum7 = 0;
                int enum8 = 0;
                int enum9 = 0;
                int enum10 =0;
                String aservice  = null;
                String startdate = null;
                String enddate = null;
                String term = null;
                String cost = null;
                String notes = null;
                String agrdate = null;
                int vperyear = 0;

		String cname=null;
		String address1=null;
		String address2=null;
		String city =null;
		String state=null;
		String zip=null;
		String homephone=null;
		String altphone=null;
		String cust_notes=null;
		
		String tech_init = doGetTechInfo_init(username);
		String tech_name = doGetTechInfo_name(username);
		String tech_truck = doGetTechInfo_truck(username);

                String qdate  = null;
                String qdescription  = null;
                String qpayterms  = null;
                String qnotes  = null;
                String qadditionalserv  = null;
		int qpartnum=0;
		String itemname=null;
		String mannum=null;
		int itemquant=0;
		int itemnum=0;
		int counter = 0;
		double totinvestment=0.00;
		String investment=null;
		double qtotal=0.00;
                Vector vv;
                vv = ServQuotes.getIndItem(con,custnum,propnum);
		counter=0;
                for (int i = 0 ; i < vv.size(); i++)
                {
                ServQuotes tt = (ServQuotes) vv.elementAt(i);
		qdate=tt.getQDate();
		qdescription=tt.getQDescription();
		qnotes=tt.getQNotes();
		qpayterms=tt.getQPayterms();
		qadditionalserv=tt.getQAdditionalServ();
	}

 		Statement stmt = con.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM customers where custnum="+tcustnum+"");
		 while(rs.next())
        	        {
			cname=rs.getString("cname");
			address1=rs.getString("address1");
			address2=rs.getString("address2");
			city =rs.getString("city");
			state=rs.getString("state");
			zip=rs.getString("zip");
			homephone=rs.getString("homephone");
			altphone=rs.getString("altphone");
			cust_notes=rs.getString("cust_notes");
			}

	
	out.println("<html><head><title>Service Proposal</title>");
	doStyleSheet(req, res, out, session, username);
	out.println("</head><body>");
	doMHeader(req, res, out, session, username); 
	out.println("<h4 align=CENTER>HVAC REPAIR PROPOSAL</h4>");
	out.println("<P ALIGN=LEFT>"+doFormatDate(getDate(qdate))+"<table><tr>");
	out.println("<td>Customer:</td><td>"+cname+" </td></tr> ");
	out.println("<tr><td></td><td>"+address1+" "+ address2+"<br>"+city+", "+state+"  "+zip+" </td></tr>");
	out.println("<tr><td></td><td></td></tr>");
	out.println("</table></p> ");
	out.println("<p>Re: "+qdescription+".<br>");
	out.println("<br>"+doGetCompanyName()+", recommends the following repairs for your property located at "+address1+", "+city+". These repairs are for your comfort, safety, and peace of mind.<br>");
	out.println("<br>We suggest the Following Repairs:<br>");
	out.println("<ul>");
	
                Vector vp;
                vp = ServQuoteParts.getAllItems(con,propnum);
                for (int j = 0 ; j < vp.size(); j++)
                {
                ServQuoteParts tp = (ServQuoteParts) vp.elementAt(j);
		qpartnum=tp.getQPartnum();
		itemname=tp.getItemName();
		mannum=tp.getManNum();
		itemquant=tp.getItemQuant();
		investment=tp.getInvestment();
		qtotal=tp.getQuoteTotal();
		double subtot=Double.parseDouble(tp.getInvestment())*itemquant;
		totinvestment=totinvestment+subtot;
	out.println("<li>"+itemquant+" - "+itemname+"; "+mannum+".............."+NumberFormat.getCurrencyInstance().format(subtot)+"</li>");
		}
	
	out.println("</ul>");
	out.println("");

	 Locale[] locales = NumberFormat.getAvailableLocales();
	  double myNumber = totinvestment;
	   NumberFormat form;
	   form = NumberFormat.getIntegerInstance(locales[1]);
	out.println("<p align=\"right\">Total Investment: "+NumberFormat.getCurrencyInstance().format(form.parse(form.format(myNumber)))+"<br></p>");
	out.println("<br>");
	out.println("Pricing does include labor and these prices are subject to change without notice unless accepted within thirty (30) calendar days from the date of this contract.<br><br>");
	out.println(""+doGetCompanyName()+" will coordinate the scheduling of the project with you as soon as you approve the work.<br><br>Please review, and if you have any questions feel free to contact me.<br><br>");

	out.println("<br><br><p align=center><b>Acceptance of Proposal</b></p>");
	out.println("The above prices, specifications and conditions are satisfactory and are hereby accepted.  You are authorized to do the work as specified.  Payment will be made upon completion of the work.<br><br>");
	out.println("</p><table width=\"95%\" align=center><tr><td>____________________________</td><td>_______</td><td>____________________________</td><td>_______</td></tr> ");
	out.println("<tr><td>Customer Signature</td><td>Date</td><td>"+doGetCompanyName()+"</td><td>Date</td></tr> ");
	out.println("<tr><td>"+cname+"</td><td></td><td>"+tech_name+"</td><td></td></tr></table> ");

	out.println("<br><br><h3>\"100% MONEY BACK GUARANTEE\"</h3><br>");
		con.close();
    }


}//UniCash
